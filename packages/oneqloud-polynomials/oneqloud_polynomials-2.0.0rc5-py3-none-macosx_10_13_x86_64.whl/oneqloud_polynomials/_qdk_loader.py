# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.11qdk
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_qdk')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_qdk')
    _qdk = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_qdk', [dirname(__file__)])
        except ImportError:
            import _qdk
            return _qdk
        try:
            _mod = imp.load_module('_qdk', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _qdk = swig_import_helper()
    del swig_import_helper
else:
    import _qdk
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _qdk.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _qdk.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _qdk.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _qdk.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _qdk.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _qdk.SwigPyIterator_equal(self, x)

    def copy(self):
        return _qdk.SwigPyIterator_copy(self)

    def next(self):
        return _qdk.SwigPyIterator_next(self)

    def __next__(self):
        return _qdk.SwigPyIterator___next__(self)

    def previous(self):
        return _qdk.SwigPyIterator_previous(self)

    def advance(self, n):
        return _qdk.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _qdk.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _qdk.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _qdk.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _qdk.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _qdk.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _qdk.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _qdk.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _qdk.SHARED_PTR_DISOWN
class PairUInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairUInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairUInt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _qdk.new_PairUInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _qdk.PairUInt_first_set
    __swig_getmethods__["first"] = _qdk.PairUInt_first_get
    if _newclass:
        first = _swig_property(_qdk.PairUInt_first_get, _qdk.PairUInt_first_set)
    __swig_setmethods__["second"] = _qdk.PairUInt_second_set
    __swig_getmethods__["second"] = _qdk.PairUInt_second_get
    if _newclass:
        second = _swig_property(_qdk.PairUInt_second_get, _qdk.PairUInt_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _qdk.delete_PairUInt
    __del__ = lambda self: None
PairUInt_swigregister = _qdk.PairUInt_swigregister
PairUInt_swigregister(PairUInt)

class VectorPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorPair, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qdk.VectorPair_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qdk.VectorPair___nonzero__(self)

    def __bool__(self):
        return _qdk.VectorPair___bool__(self)

    def __len__(self):
        return _qdk.VectorPair___len__(self)

    def __getslice__(self, i, j):
        return _qdk.VectorPair___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _qdk.VectorPair___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _qdk.VectorPair___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _qdk.VectorPair___delitem__(self, *args)

    def __getitem__(self, *args):
        return _qdk.VectorPair___getitem__(self, *args)

    def __setitem__(self, *args):
        return _qdk.VectorPair___setitem__(self, *args)

    def pop(self):
        return _qdk.VectorPair_pop(self)

    def append(self, x):
        return _qdk.VectorPair_append(self, x)

    def empty(self):
        return _qdk.VectorPair_empty(self)

    def size(self):
        return _qdk.VectorPair_size(self)

    def swap(self, v):
        return _qdk.VectorPair_swap(self, v)

    def begin(self):
        return _qdk.VectorPair_begin(self)

    def end(self):
        return _qdk.VectorPair_end(self)

    def rbegin(self):
        return _qdk.VectorPair_rbegin(self)

    def rend(self):
        return _qdk.VectorPair_rend(self)

    def clear(self):
        return _qdk.VectorPair_clear(self)

    def get_allocator(self):
        return _qdk.VectorPair_get_allocator(self)

    def pop_back(self):
        return _qdk.VectorPair_pop_back(self)

    def erase(self, *args):
        return _qdk.VectorPair_erase(self, *args)

    def __init__(self, *args):
        this = _qdk.new_VectorPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _qdk.VectorPair_push_back(self, x)

    def front(self):
        return _qdk.VectorPair_front(self)

    def back(self):
        return _qdk.VectorPair_back(self)

    def assign(self, n, x):
        return _qdk.VectorPair_assign(self, n, x)

    def resize(self, *args):
        return _qdk.VectorPair_resize(self, *args)

    def insert(self, *args):
        return _qdk.VectorPair_insert(self, *args)

    def reserve(self, n):
        return _qdk.VectorPair_reserve(self, n)

    def capacity(self):
        return _qdk.VectorPair_capacity(self)
    __swig_destroy__ = _qdk.delete_VectorPair
    __del__ = lambda self: None
VectorPair_swigregister = _qdk.VectorPair_swigregister
VectorPair_swigregister(VectorPair)

class VectorUint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUint, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qdk.VectorUint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qdk.VectorUint___nonzero__(self)

    def __bool__(self):
        return _qdk.VectorUint___bool__(self)

    def __len__(self):
        return _qdk.VectorUint___len__(self)

    def __getslice__(self, i, j):
        return _qdk.VectorUint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _qdk.VectorUint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _qdk.VectorUint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _qdk.VectorUint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _qdk.VectorUint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _qdk.VectorUint___setitem__(self, *args)

    def pop(self):
        return _qdk.VectorUint_pop(self)

    def append(self, x):
        return _qdk.VectorUint_append(self, x)

    def empty(self):
        return _qdk.VectorUint_empty(self)

    def size(self):
        return _qdk.VectorUint_size(self)

    def swap(self, v):
        return _qdk.VectorUint_swap(self, v)

    def begin(self):
        return _qdk.VectorUint_begin(self)

    def end(self):
        return _qdk.VectorUint_end(self)

    def rbegin(self):
        return _qdk.VectorUint_rbegin(self)

    def rend(self):
        return _qdk.VectorUint_rend(self)

    def clear(self):
        return _qdk.VectorUint_clear(self)

    def get_allocator(self):
        return _qdk.VectorUint_get_allocator(self)

    def pop_back(self):
        return _qdk.VectorUint_pop_back(self)

    def erase(self, *args):
        return _qdk.VectorUint_erase(self, *args)

    def __init__(self, *args):
        this = _qdk.new_VectorUint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _qdk.VectorUint_push_back(self, x)

    def front(self):
        return _qdk.VectorUint_front(self)

    def back(self):
        return _qdk.VectorUint_back(self)

    def assign(self, n, x):
        return _qdk.VectorUint_assign(self, n, x)

    def resize(self, *args):
        return _qdk.VectorUint_resize(self, *args)

    def insert(self, *args):
        return _qdk.VectorUint_insert(self, *args)

    def reserve(self, n):
        return _qdk.VectorUint_reserve(self, n)

    def capacity(self):
        return _qdk.VectorUint_capacity(self)
    __swig_destroy__ = _qdk.delete_VectorUint
    __del__ = lambda self: None
VectorUint_swigregister = _qdk.VectorUint_swigregister
VectorUint_swigregister(VectorUint)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qdk.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qdk.VectorInt___nonzero__(self)

    def __bool__(self):
        return _qdk.VectorInt___bool__(self)

    def __len__(self):
        return _qdk.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _qdk.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _qdk.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _qdk.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _qdk.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _qdk.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _qdk.VectorInt___setitem__(self, *args)

    def pop(self):
        return _qdk.VectorInt_pop(self)

    def append(self, x):
        return _qdk.VectorInt_append(self, x)

    def empty(self):
        return _qdk.VectorInt_empty(self)

    def size(self):
        return _qdk.VectorInt_size(self)

    def swap(self, v):
        return _qdk.VectorInt_swap(self, v)

    def begin(self):
        return _qdk.VectorInt_begin(self)

    def end(self):
        return _qdk.VectorInt_end(self)

    def rbegin(self):
        return _qdk.VectorInt_rbegin(self)

    def rend(self):
        return _qdk.VectorInt_rend(self)

    def clear(self):
        return _qdk.VectorInt_clear(self)

    def get_allocator(self):
        return _qdk.VectorInt_get_allocator(self)

    def pop_back(self):
        return _qdk.VectorInt_pop_back(self)

    def erase(self, *args):
        return _qdk.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _qdk.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _qdk.VectorInt_push_back(self, x)

    def front(self):
        return _qdk.VectorInt_front(self)

    def back(self):
        return _qdk.VectorInt_back(self)

    def assign(self, n, x):
        return _qdk.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _qdk.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _qdk.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _qdk.VectorInt_reserve(self, n)

    def capacity(self):
        return _qdk.VectorInt_capacity(self)
    __swig_destroy__ = _qdk.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _qdk.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorByte(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorByte, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorByte, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qdk.VectorByte_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qdk.VectorByte___nonzero__(self)

    def __bool__(self):
        return _qdk.VectorByte___bool__(self)

    def __len__(self):
        return _qdk.VectorByte___len__(self)

    def __getslice__(self, i, j):
        return _qdk.VectorByte___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _qdk.VectorByte___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _qdk.VectorByte___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _qdk.VectorByte___delitem__(self, *args)

    def __getitem__(self, *args):
        return _qdk.VectorByte___getitem__(self, *args)

    def __setitem__(self, *args):
        return _qdk.VectorByte___setitem__(self, *args)

    def pop(self):
        return _qdk.VectorByte_pop(self)

    def append(self, x):
        return _qdk.VectorByte_append(self, x)

    def empty(self):
        return _qdk.VectorByte_empty(self)

    def size(self):
        return _qdk.VectorByte_size(self)

    def swap(self, v):
        return _qdk.VectorByte_swap(self, v)

    def begin(self):
        return _qdk.VectorByte_begin(self)

    def end(self):
        return _qdk.VectorByte_end(self)

    def rbegin(self):
        return _qdk.VectorByte_rbegin(self)

    def rend(self):
        return _qdk.VectorByte_rend(self)

    def clear(self):
        return _qdk.VectorByte_clear(self)

    def get_allocator(self):
        return _qdk.VectorByte_get_allocator(self)

    def pop_back(self):
        return _qdk.VectorByte_pop_back(self)

    def erase(self, *args):
        return _qdk.VectorByte_erase(self, *args)

    def __init__(self, *args):
        this = _qdk.new_VectorByte(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _qdk.VectorByte_push_back(self, x)

    def front(self):
        return _qdk.VectorByte_front(self)

    def back(self):
        return _qdk.VectorByte_back(self)

    def assign(self, n, x):
        return _qdk.VectorByte_assign(self, n, x)

    def resize(self, *args):
        return _qdk.VectorByte_resize(self, *args)

    def insert(self, *args):
        return _qdk.VectorByte_insert(self, *args)

    def reserve(self, n):
        return _qdk.VectorByte_reserve(self, n)

    def capacity(self):
        return _qdk.VectorByte_capacity(self)
    __swig_destroy__ = _qdk.delete_VectorByte
    __del__ = lambda self: None
VectorByte_swigregister = _qdk.VectorByte_swigregister
VectorByte_swigregister(VectorByte)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qdk.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qdk.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _qdk.VectorFloat___bool__(self)

    def __len__(self):
        return _qdk.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _qdk.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _qdk.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _qdk.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _qdk.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _qdk.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _qdk.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _qdk.VectorFloat_pop(self)

    def append(self, x):
        return _qdk.VectorFloat_append(self, x)

    def empty(self):
        return _qdk.VectorFloat_empty(self)

    def size(self):
        return _qdk.VectorFloat_size(self)

    def swap(self, v):
        return _qdk.VectorFloat_swap(self, v)

    def begin(self):
        return _qdk.VectorFloat_begin(self)

    def end(self):
        return _qdk.VectorFloat_end(self)

    def rbegin(self):
        return _qdk.VectorFloat_rbegin(self)

    def rend(self):
        return _qdk.VectorFloat_rend(self)

    def clear(self):
        return _qdk.VectorFloat_clear(self)

    def get_allocator(self):
        return _qdk.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _qdk.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _qdk.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _qdk.new_VectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _qdk.VectorFloat_push_back(self, x)

    def front(self):
        return _qdk.VectorFloat_front(self)

    def back(self):
        return _qdk.VectorFloat_back(self)

    def assign(self, n, x):
        return _qdk.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _qdk.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _qdk.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _qdk.VectorFloat_reserve(self, n)

    def capacity(self):
        return _qdk.VectorFloat_capacity(self)
    __swig_destroy__ = _qdk.delete_VectorFloat
    __del__ = lambda self: None
VectorFloat_swigregister = _qdk.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qdk.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qdk.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _qdk.VectorDouble___bool__(self)

    def __len__(self):
        return _qdk.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _qdk.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _qdk.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _qdk.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _qdk.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _qdk.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _qdk.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _qdk.VectorDouble_pop(self)

    def append(self, x):
        return _qdk.VectorDouble_append(self, x)

    def empty(self):
        return _qdk.VectorDouble_empty(self)

    def size(self):
        return _qdk.VectorDouble_size(self)

    def swap(self, v):
        return _qdk.VectorDouble_swap(self, v)

    def begin(self):
        return _qdk.VectorDouble_begin(self)

    def end(self):
        return _qdk.VectorDouble_end(self)

    def rbegin(self):
        return _qdk.VectorDouble_rbegin(self)

    def rend(self):
        return _qdk.VectorDouble_rend(self)

    def clear(self):
        return _qdk.VectorDouble_clear(self)

    def get_allocator(self):
        return _qdk.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _qdk.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _qdk.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _qdk.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _qdk.VectorDouble_push_back(self, x)

    def front(self):
        return _qdk.VectorDouble_front(self)

    def back(self):
        return _qdk.VectorDouble_back(self)

    def assign(self, n, x):
        return _qdk.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _qdk.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _qdk.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _qdk.VectorDouble_reserve(self, n)

    def capacity(self):
        return _qdk.VectorDouble_capacity(self)
    __swig_destroy__ = _qdk.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _qdk.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qdk.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qdk.VectorString___nonzero__(self)

    def __bool__(self):
        return _qdk.VectorString___bool__(self)

    def __len__(self):
        return _qdk.VectorString___len__(self)

    def __getslice__(self, i, j):
        return _qdk.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _qdk.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _qdk.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _qdk.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _qdk.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _qdk.VectorString___setitem__(self, *args)

    def pop(self):
        return _qdk.VectorString_pop(self)

    def append(self, x):
        return _qdk.VectorString_append(self, x)

    def empty(self):
        return _qdk.VectorString_empty(self)

    def size(self):
        return _qdk.VectorString_size(self)

    def swap(self, v):
        return _qdk.VectorString_swap(self, v)

    def begin(self):
        return _qdk.VectorString_begin(self)

    def end(self):
        return _qdk.VectorString_end(self)

    def rbegin(self):
        return _qdk.VectorString_rbegin(self)

    def rend(self):
        return _qdk.VectorString_rend(self)

    def clear(self):
        return _qdk.VectorString_clear(self)

    def get_allocator(self):
        return _qdk.VectorString_get_allocator(self)

    def pop_back(self):
        return _qdk.VectorString_pop_back(self)

    def erase(self, *args):
        return _qdk.VectorString_erase(self, *args)

    def __init__(self, *args):
        this = _qdk.new_VectorString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _qdk.VectorString_push_back(self, x)

    def front(self):
        return _qdk.VectorString_front(self)

    def back(self):
        return _qdk.VectorString_back(self)

    def assign(self, n, x):
        return _qdk.VectorString_assign(self, n, x)

    def resize(self, *args):
        return _qdk.VectorString_resize(self, *args)

    def insert(self, *args):
        return _qdk.VectorString_insert(self, *args)

    def reserve(self, n):
        return _qdk.VectorString_reserve(self, n)

    def capacity(self):
        return _qdk.VectorString_capacity(self)
    __swig_destroy__ = _qdk.delete_VectorString
    __del__ = lambda self: None
VectorString_swigregister = _qdk.VectorString_swigregister
VectorString_swigregister(VectorString)

class VectorVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qdk.VectorVectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qdk.VectorVectorInt___nonzero__(self)

    def __bool__(self):
        return _qdk.VectorVectorInt___bool__(self)

    def __len__(self):
        return _qdk.VectorVectorInt___len__(self)

    def __getslice__(self, i, j):
        return _qdk.VectorVectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _qdk.VectorVectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _qdk.VectorVectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _qdk.VectorVectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _qdk.VectorVectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _qdk.VectorVectorInt___setitem__(self, *args)

    def pop(self):
        return _qdk.VectorVectorInt_pop(self)

    def append(self, x):
        return _qdk.VectorVectorInt_append(self, x)

    def empty(self):
        return _qdk.VectorVectorInt_empty(self)

    def size(self):
        return _qdk.VectorVectorInt_size(self)

    def swap(self, v):
        return _qdk.VectorVectorInt_swap(self, v)

    def begin(self):
        return _qdk.VectorVectorInt_begin(self)

    def end(self):
        return _qdk.VectorVectorInt_end(self)

    def rbegin(self):
        return _qdk.VectorVectorInt_rbegin(self)

    def rend(self):
        return _qdk.VectorVectorInt_rend(self)

    def clear(self):
        return _qdk.VectorVectorInt_clear(self)

    def get_allocator(self):
        return _qdk.VectorVectorInt_get_allocator(self)

    def pop_back(self):
        return _qdk.VectorVectorInt_pop_back(self)

    def erase(self, *args):
        return _qdk.VectorVectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _qdk.new_VectorVectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _qdk.VectorVectorInt_push_back(self, x)

    def front(self):
        return _qdk.VectorVectorInt_front(self)

    def back(self):
        return _qdk.VectorVectorInt_back(self)

    def assign(self, n, x):
        return _qdk.VectorVectorInt_assign(self, n, x)

    def resize(self, *args):
        return _qdk.VectorVectorInt_resize(self, *args)

    def insert(self, *args):
        return _qdk.VectorVectorInt_insert(self, *args)

    def reserve(self, n):
        return _qdk.VectorVectorInt_reserve(self, n)

    def capacity(self):
        return _qdk.VectorVectorInt_capacity(self)
    __swig_destroy__ = _qdk.delete_VectorVectorInt
    __del__ = lambda self: None
VectorVectorInt_swigregister = _qdk.VectorVectorInt_swigregister
VectorVectorInt_swigregister(VectorVectorInt)

class MapUIntBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapUIntBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapUIntBool, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qdk.MapUIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qdk.MapUIntBool___nonzero__(self)

    def __bool__(self):
        return _qdk.MapUIntBool___bool__(self)

    def __len__(self):
        return _qdk.MapUIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _qdk.MapUIntBool___getitem__(self, key)

    def __delitem__(self, key):
        return _qdk.MapUIntBool___delitem__(self, key)

    def has_key(self, key):
        return _qdk.MapUIntBool_has_key(self, key)

    def keys(self):
        return _qdk.MapUIntBool_keys(self)

    def values(self):
        return _qdk.MapUIntBool_values(self)

    def items(self):
        return _qdk.MapUIntBool_items(self)

    def __contains__(self, key):
        return _qdk.MapUIntBool___contains__(self, key)

    def key_iterator(self):
        return _qdk.MapUIntBool_key_iterator(self)

    def value_iterator(self):
        return _qdk.MapUIntBool_value_iterator(self)

    def __setitem__(self, *args):
        return _qdk.MapUIntBool___setitem__(self, *args)

    def asdict(self):
        return _qdk.MapUIntBool_asdict(self)

    def __init__(self, *args):
        this = _qdk.new_MapUIntBool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _qdk.MapUIntBool_empty(self)

    def size(self):
        return _qdk.MapUIntBool_size(self)

    def swap(self, v):
        return _qdk.MapUIntBool_swap(self, v)

    def begin(self):
        return _qdk.MapUIntBool_begin(self)

    def end(self):
        return _qdk.MapUIntBool_end(self)

    def rbegin(self):
        return _qdk.MapUIntBool_rbegin(self)

    def rend(self):
        return _qdk.MapUIntBool_rend(self)

    def clear(self):
        return _qdk.MapUIntBool_clear(self)

    def get_allocator(self):
        return _qdk.MapUIntBool_get_allocator(self)

    def count(self, x):
        return _qdk.MapUIntBool_count(self, x)

    def erase(self, *args):
        return _qdk.MapUIntBool_erase(self, *args)

    def find(self, x):
        return _qdk.MapUIntBool_find(self, x)

    def lower_bound(self, x):
        return _qdk.MapUIntBool_lower_bound(self, x)

    def upper_bound(self, x):
        return _qdk.MapUIntBool_upper_bound(self, x)
    __swig_destroy__ = _qdk.delete_MapUIntBool
    __del__ = lambda self: None
MapUIntBool_swigregister = _qdk.MapUIntBool_swigregister
MapUIntBool_swigregister(MapUIntBool)

class MapUIntInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapUIntInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapUIntInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qdk.MapUIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qdk.MapUIntInt___nonzero__(self)

    def __bool__(self):
        return _qdk.MapUIntInt___bool__(self)

    def __len__(self):
        return _qdk.MapUIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _qdk.MapUIntInt___getitem__(self, key)

    def __delitem__(self, key):
        return _qdk.MapUIntInt___delitem__(self, key)

    def has_key(self, key):
        return _qdk.MapUIntInt_has_key(self, key)

    def keys(self):
        return _qdk.MapUIntInt_keys(self)

    def values(self):
        return _qdk.MapUIntInt_values(self)

    def items(self):
        return _qdk.MapUIntInt_items(self)

    def __contains__(self, key):
        return _qdk.MapUIntInt___contains__(self, key)

    def key_iterator(self):
        return _qdk.MapUIntInt_key_iterator(self)

    def value_iterator(self):
        return _qdk.MapUIntInt_value_iterator(self)

    def __setitem__(self, *args):
        return _qdk.MapUIntInt___setitem__(self, *args)

    def asdict(self):
        return _qdk.MapUIntInt_asdict(self)

    def __init__(self, *args):
        this = _qdk.new_MapUIntInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _qdk.MapUIntInt_empty(self)

    def size(self):
        return _qdk.MapUIntInt_size(self)

    def swap(self, v):
        return _qdk.MapUIntInt_swap(self, v)

    def begin(self):
        return _qdk.MapUIntInt_begin(self)

    def end(self):
        return _qdk.MapUIntInt_end(self)

    def rbegin(self):
        return _qdk.MapUIntInt_rbegin(self)

    def rend(self):
        return _qdk.MapUIntInt_rend(self)

    def clear(self):
        return _qdk.MapUIntInt_clear(self)

    def get_allocator(self):
        return _qdk.MapUIntInt_get_allocator(self)

    def count(self, x):
        return _qdk.MapUIntInt_count(self, x)

    def erase(self, *args):
        return _qdk.MapUIntInt_erase(self, *args)

    def find(self, x):
        return _qdk.MapUIntInt_find(self, x)

    def lower_bound(self, x):
        return _qdk.MapUIntInt_lower_bound(self, x)

    def upper_bound(self, x):
        return _qdk.MapUIntInt_upper_bound(self, x)
    __swig_destroy__ = _qdk.delete_MapUIntInt
    __del__ = lambda self: None
MapUIntInt_swigregister = _qdk.MapUIntInt_swigregister
MapUIntInt_swigregister(MapUIntInt)

class MapIntVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapIntVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapIntVectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qdk.MapIntVectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qdk.MapIntVectorInt___nonzero__(self)

    def __bool__(self):
        return _qdk.MapIntVectorInt___bool__(self)

    def __len__(self):
        return _qdk.MapIntVectorInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _qdk.MapIntVectorInt___getitem__(self, key)

    def __delitem__(self, key):
        return _qdk.MapIntVectorInt___delitem__(self, key)

    def has_key(self, key):
        return _qdk.MapIntVectorInt_has_key(self, key)

    def keys(self):
        return _qdk.MapIntVectorInt_keys(self)

    def values(self):
        return _qdk.MapIntVectorInt_values(self)

    def items(self):
        return _qdk.MapIntVectorInt_items(self)

    def __contains__(self, key):
        return _qdk.MapIntVectorInt___contains__(self, key)

    def key_iterator(self):
        return _qdk.MapIntVectorInt_key_iterator(self)

    def value_iterator(self):
        return _qdk.MapIntVectorInt_value_iterator(self)

    def __setitem__(self, *args):
        return _qdk.MapIntVectorInt___setitem__(self, *args)

    def asdict(self):
        return _qdk.MapIntVectorInt_asdict(self)

    def __init__(self, *args):
        this = _qdk.new_MapIntVectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _qdk.MapIntVectorInt_empty(self)

    def size(self):
        return _qdk.MapIntVectorInt_size(self)

    def swap(self, v):
        return _qdk.MapIntVectorInt_swap(self, v)

    def begin(self):
        return _qdk.MapIntVectorInt_begin(self)

    def end(self):
        return _qdk.MapIntVectorInt_end(self)

    def rbegin(self):
        return _qdk.MapIntVectorInt_rbegin(self)

    def rend(self):
        return _qdk.MapIntVectorInt_rend(self)

    def clear(self):
        return _qdk.MapIntVectorInt_clear(self)

    def get_allocator(self):
        return _qdk.MapIntVectorInt_get_allocator(self)

    def count(self, x):
        return _qdk.MapIntVectorInt_count(self, x)

    def erase(self, *args):
        return _qdk.MapIntVectorInt_erase(self, *args)

    def find(self, x):
        return _qdk.MapIntVectorInt_find(self, x)

    def lower_bound(self, x):
        return _qdk.MapIntVectorInt_lower_bound(self, x)

    def upper_bound(self, x):
        return _qdk.MapIntVectorInt_upper_bound(self, x)
    __swig_destroy__ = _qdk.delete_MapIntVectorInt
    __del__ = lambda self: None
MapIntVectorInt_swigregister = _qdk.MapIntVectorInt_swigregister
MapIntVectorInt_swigregister(MapIntVectorInt)

class MapStringUInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringUInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringUInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qdk.MapStringUInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qdk.MapStringUInt___nonzero__(self)

    def __bool__(self):
        return _qdk.MapStringUInt___bool__(self)

    def __len__(self):
        return _qdk.MapStringUInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _qdk.MapStringUInt___getitem__(self, key)

    def __delitem__(self, key):
        return _qdk.MapStringUInt___delitem__(self, key)

    def has_key(self, key):
        return _qdk.MapStringUInt_has_key(self, key)

    def keys(self):
        return _qdk.MapStringUInt_keys(self)

    def values(self):
        return _qdk.MapStringUInt_values(self)

    def items(self):
        return _qdk.MapStringUInt_items(self)

    def __contains__(self, key):
        return _qdk.MapStringUInt___contains__(self, key)

    def key_iterator(self):
        return _qdk.MapStringUInt_key_iterator(self)

    def value_iterator(self):
        return _qdk.MapStringUInt_value_iterator(self)

    def __setitem__(self, *args):
        return _qdk.MapStringUInt___setitem__(self, *args)

    def asdict(self):
        return _qdk.MapStringUInt_asdict(self)

    def __init__(self, *args):
        this = _qdk.new_MapStringUInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _qdk.MapStringUInt_empty(self)

    def size(self):
        return _qdk.MapStringUInt_size(self)

    def swap(self, v):
        return _qdk.MapStringUInt_swap(self, v)

    def begin(self):
        return _qdk.MapStringUInt_begin(self)

    def end(self):
        return _qdk.MapStringUInt_end(self)

    def rbegin(self):
        return _qdk.MapStringUInt_rbegin(self)

    def rend(self):
        return _qdk.MapStringUInt_rend(self)

    def clear(self):
        return _qdk.MapStringUInt_clear(self)

    def get_allocator(self):
        return _qdk.MapStringUInt_get_allocator(self)

    def count(self, x):
        return _qdk.MapStringUInt_count(self, x)

    def erase(self, *args):
        return _qdk.MapStringUInt_erase(self, *args)

    def find(self, x):
        return _qdk.MapStringUInt_find(self, x)

    def lower_bound(self, x):
        return _qdk.MapStringUInt_lower_bound(self, x)

    def upper_bound(self, x):
        return _qdk.MapStringUInt_upper_bound(self, x)
    __swig_destroy__ = _qdk.delete_MapStringUInt
    __del__ = lambda self: None
MapStringUInt_swigregister = _qdk.MapStringUInt_swigregister
MapStringUInt_swigregister(MapStringUInt)

class PairDoubleVectorint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairDoubleVectorint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairDoubleVectorint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _qdk.new_PairDoubleVectorint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _qdk.PairDoubleVectorint_first_set
    __swig_getmethods__["first"] = _qdk.PairDoubleVectorint_first_get
    if _newclass:
        first = _swig_property(_qdk.PairDoubleVectorint_first_get, _qdk.PairDoubleVectorint_first_set)
    __swig_setmethods__["second"] = _qdk.PairDoubleVectorint_second_set
    __swig_getmethods__["second"] = _qdk.PairDoubleVectorint_second_get
    if _newclass:
        second = _swig_property(_qdk.PairDoubleVectorint_second_get, _qdk.PairDoubleVectorint_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _qdk.delete_PairDoubleVectorint
    __del__ = lambda self: None
PairDoubleVectorint_swigregister = _qdk.PairDoubleVectorint_swigregister
PairDoubleVectorint_swigregister(PairDoubleVectorint)

class IntStringDict(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntStringDict, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntStringDict, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qdk.IntStringDict_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qdk.IntStringDict___nonzero__(self)

    def __bool__(self):
        return _qdk.IntStringDict___bool__(self)

    def __len__(self):
        return _qdk.IntStringDict___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _qdk.IntStringDict___getitem__(self, key)

    def __delitem__(self, key):
        return _qdk.IntStringDict___delitem__(self, key)

    def has_key(self, key):
        return _qdk.IntStringDict_has_key(self, key)

    def keys(self):
        return _qdk.IntStringDict_keys(self)

    def values(self):
        return _qdk.IntStringDict_values(self)

    def items(self):
        return _qdk.IntStringDict_items(self)

    def __contains__(self, key):
        return _qdk.IntStringDict___contains__(self, key)

    def key_iterator(self):
        return _qdk.IntStringDict_key_iterator(self)

    def value_iterator(self):
        return _qdk.IntStringDict_value_iterator(self)

    def __setitem__(self, *args):
        return _qdk.IntStringDict___setitem__(self, *args)

    def asdict(self):
        return _qdk.IntStringDict_asdict(self)

    def __init__(self, *args):
        this = _qdk.new_IntStringDict(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _qdk.IntStringDict_empty(self)

    def size(self):
        return _qdk.IntStringDict_size(self)

    def swap(self, v):
        return _qdk.IntStringDict_swap(self, v)

    def begin(self):
        return _qdk.IntStringDict_begin(self)

    def end(self):
        return _qdk.IntStringDict_end(self)

    def rbegin(self):
        return _qdk.IntStringDict_rbegin(self)

    def rend(self):
        return _qdk.IntStringDict_rend(self)

    def clear(self):
        return _qdk.IntStringDict_clear(self)

    def get_allocator(self):
        return _qdk.IntStringDict_get_allocator(self)

    def count(self, x):
        return _qdk.IntStringDict_count(self, x)

    def erase(self, *args):
        return _qdk.IntStringDict_erase(self, *args)

    def find(self, x):
        return _qdk.IntStringDict_find(self, x)

    def lower_bound(self, x):
        return _qdk.IntStringDict_lower_bound(self, x)

    def upper_bound(self, x):
        return _qdk.IntStringDict_upper_bound(self, x)
    __swig_destroy__ = _qdk.delete_IntStringDict
    __del__ = lambda self: None
IntStringDict_swigregister = _qdk.IntStringDict_swigregister
IntStringDict_swigregister(IntStringDict)

class IntFloatMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntFloatMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntFloatMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qdk.IntFloatMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qdk.IntFloatMap___nonzero__(self)

    def __bool__(self):
        return _qdk.IntFloatMap___bool__(self)

    def __len__(self):
        return _qdk.IntFloatMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _qdk.IntFloatMap___getitem__(self, key)

    def __delitem__(self, key):
        return _qdk.IntFloatMap___delitem__(self, key)

    def has_key(self, key):
        return _qdk.IntFloatMap_has_key(self, key)

    def keys(self):
        return _qdk.IntFloatMap_keys(self)

    def values(self):
        return _qdk.IntFloatMap_values(self)

    def items(self):
        return _qdk.IntFloatMap_items(self)

    def __contains__(self, key):
        return _qdk.IntFloatMap___contains__(self, key)

    def key_iterator(self):
        return _qdk.IntFloatMap_key_iterator(self)

    def value_iterator(self):
        return _qdk.IntFloatMap_value_iterator(self)

    def __setitem__(self, *args):
        return _qdk.IntFloatMap___setitem__(self, *args)

    def asdict(self):
        return _qdk.IntFloatMap_asdict(self)

    def __init__(self, *args):
        this = _qdk.new_IntFloatMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _qdk.IntFloatMap_empty(self)

    def size(self):
        return _qdk.IntFloatMap_size(self)

    def swap(self, v):
        return _qdk.IntFloatMap_swap(self, v)

    def begin(self):
        return _qdk.IntFloatMap_begin(self)

    def end(self):
        return _qdk.IntFloatMap_end(self)

    def rbegin(self):
        return _qdk.IntFloatMap_rbegin(self)

    def rend(self):
        return _qdk.IntFloatMap_rend(self)

    def clear(self):
        return _qdk.IntFloatMap_clear(self)

    def get_allocator(self):
        return _qdk.IntFloatMap_get_allocator(self)

    def count(self, x):
        return _qdk.IntFloatMap_count(self, x)

    def erase(self, *args):
        return _qdk.IntFloatMap_erase(self, *args)

    def find(self, x):
        return _qdk.IntFloatMap_find(self, x)

    def lower_bound(self, x):
        return _qdk.IntFloatMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _qdk.IntFloatMap_upper_bound(self, x)
    __swig_destroy__ = _qdk.delete_IntFloatMap
    __del__ = lambda self: None
IntFloatMap_swigregister = _qdk.IntFloatMap_swigregister
IntFloatMap_swigregister(IntFloatMap)

class IntIntMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntIntMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntIntMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qdk.IntIntMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qdk.IntIntMap___nonzero__(self)

    def __bool__(self):
        return _qdk.IntIntMap___bool__(self)

    def __len__(self):
        return _qdk.IntIntMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _qdk.IntIntMap___getitem__(self, key)

    def __delitem__(self, key):
        return _qdk.IntIntMap___delitem__(self, key)

    def has_key(self, key):
        return _qdk.IntIntMap_has_key(self, key)

    def keys(self):
        return _qdk.IntIntMap_keys(self)

    def values(self):
        return _qdk.IntIntMap_values(self)

    def items(self):
        return _qdk.IntIntMap_items(self)

    def __contains__(self, key):
        return _qdk.IntIntMap___contains__(self, key)

    def key_iterator(self):
        return _qdk.IntIntMap_key_iterator(self)

    def value_iterator(self):
        return _qdk.IntIntMap_value_iterator(self)

    def __setitem__(self, *args):
        return _qdk.IntIntMap___setitem__(self, *args)

    def asdict(self):
        return _qdk.IntIntMap_asdict(self)

    def __init__(self, *args):
        this = _qdk.new_IntIntMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _qdk.IntIntMap_empty(self)

    def size(self):
        return _qdk.IntIntMap_size(self)

    def swap(self, v):
        return _qdk.IntIntMap_swap(self, v)

    def begin(self):
        return _qdk.IntIntMap_begin(self)

    def end(self):
        return _qdk.IntIntMap_end(self)

    def rbegin(self):
        return _qdk.IntIntMap_rbegin(self)

    def rend(self):
        return _qdk.IntIntMap_rend(self)

    def clear(self):
        return _qdk.IntIntMap_clear(self)

    def get_allocator(self):
        return _qdk.IntIntMap_get_allocator(self)

    def count(self, x):
        return _qdk.IntIntMap_count(self, x)

    def erase(self, *args):
        return _qdk.IntIntMap_erase(self, *args)

    def find(self, x):
        return _qdk.IntIntMap_find(self, x)

    def lower_bound(self, x):
        return _qdk.IntIntMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _qdk.IntIntMap_upper_bound(self, x)
    __swig_destroy__ = _qdk.delete_IntIntMap
    __del__ = lambda self: None
IntIntMap_swigregister = _qdk.IntIntMap_swigregister
IntIntMap_swigregister(IntIntMap)

class IntBoolMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntBoolMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntBoolMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qdk.IntBoolMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qdk.IntBoolMap___nonzero__(self)

    def __bool__(self):
        return _qdk.IntBoolMap___bool__(self)

    def __len__(self):
        return _qdk.IntBoolMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _qdk.IntBoolMap___getitem__(self, key)

    def __delitem__(self, key):
        return _qdk.IntBoolMap___delitem__(self, key)

    def has_key(self, key):
        return _qdk.IntBoolMap_has_key(self, key)

    def keys(self):
        return _qdk.IntBoolMap_keys(self)

    def values(self):
        return _qdk.IntBoolMap_values(self)

    def items(self):
        return _qdk.IntBoolMap_items(self)

    def __contains__(self, key):
        return _qdk.IntBoolMap___contains__(self, key)

    def key_iterator(self):
        return _qdk.IntBoolMap_key_iterator(self)

    def value_iterator(self):
        return _qdk.IntBoolMap_value_iterator(self)

    def __setitem__(self, *args):
        return _qdk.IntBoolMap___setitem__(self, *args)

    def asdict(self):
        return _qdk.IntBoolMap_asdict(self)

    def __init__(self, *args):
        this = _qdk.new_IntBoolMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _qdk.IntBoolMap_empty(self)

    def size(self):
        return _qdk.IntBoolMap_size(self)

    def swap(self, v):
        return _qdk.IntBoolMap_swap(self, v)

    def begin(self):
        return _qdk.IntBoolMap_begin(self)

    def end(self):
        return _qdk.IntBoolMap_end(self)

    def rbegin(self):
        return _qdk.IntBoolMap_rbegin(self)

    def rend(self):
        return _qdk.IntBoolMap_rend(self)

    def clear(self):
        return _qdk.IntBoolMap_clear(self)

    def get_allocator(self):
        return _qdk.IntBoolMap_get_allocator(self)

    def count(self, x):
        return _qdk.IntBoolMap_count(self, x)

    def erase(self, *args):
        return _qdk.IntBoolMap_erase(self, *args)

    def find(self, x):
        return _qdk.IntBoolMap_find(self, x)

    def lower_bound(self, x):
        return _qdk.IntBoolMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _qdk.IntBoolMap_upper_bound(self, x)
    __swig_destroy__ = _qdk.delete_IntBoolMap
    __del__ = lambda self: None
IntBoolMap_swigregister = _qdk.IntBoolMap_swigregister
IntBoolMap_swigregister(IntBoolMap)









# This file is compatible with both classic and new-style classes.


