import json, random, os

class Vulnerability(object):
    
    __DATA_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), 'data', 'nessus-plugin-samples' + '.json'))
    __DATA = None

    def __init__(self, host_count=1, critical = 1, high = 1, medium = 1, low = 1, informational = 1):
        self.host_count = host_count
        
        if critical:
            self.critical = critical
        if high:
            self.high = high
        if medium:
            self.medium = medium
        if low:
            self.low = low
        if informational:
            self.informational = informational

    @property
    def host(self):
        from .vulnerabilityhost import VulnerabilityHost
        return VulnerabilityHost(
            critical=self.critical, 
            high=self.high,
            medium=self.medium,
            low=self.low,
            informational=self.informational
        )

    @property
    def scan(self):
        from .vulnerabilityscan import VulnerabilityScan
        return VulnerabilityScan(self.host_count)
        
    @property
    def data(self):
        if not self.__DATA:
            with open(self.__DATA_PATH) as json_file:
                self.__DATA = json.load(json_file)
        return self.__DATA
        
    @property
    def critical(self):
        return self._critical

    @critical.setter
    def critical(self, value):
        count = 0
        critical_list = []
        for vuln in self.data:
            if vuln['risk_factor'].lower() == 'critical':
                critical_list.append(random.choice([vuln]))
                count += 1
            if count == value:
                break
        self._critical = critical_list
       
    @property
    def high(self):
        return self._high

    @high.setter
    def high(self, value):
        count = 0
        high_list = []
        for vuln in self.data:
            if vuln['risk_factor'].lower() == 'high':
                high_list.append(random.choice([vuln]))
                count += 1
            if count == value:
                break
        self._high = high_list

    @property
    def medium(self):
        return self._medium

    @medium.setter
    def medium(self, value):
        count = 0
        medium_list = []
        for vuln in self.data:
            if vuln['risk_factor'].lower() == 'medium':
                medium_list.append(random.choice([vuln]))
                count += 1
            if count == value:
                break
        self._medium = medium_list

    @property
    def low(self):
        return self._low

    @low.setter
    def low(self, value):
        count = 0
        low_list = []
        for vuln in self.data:
            if vuln['risk_factor'].lower() == 'low':
                low_list.append(random.choice([vuln]))
                count += 1
            if count == value:
                break
        self._low = low_list

    @property
    def informational(self):
        return self._informational

    @informational.setter
    def informational(self, value):
        count = 0
        informational_list = []
        for vuln in self.data:
            if vuln['risk_factor'].lower() == 'informational':
                informational_list.append(random.choice([vuln]))
                count += 1
            if count == value:
                break
        self._informational = informational_list