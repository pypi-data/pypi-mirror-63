import json, random, pendulum, uuid, datetime

from .network import Network


class VulnerabilityScan(object):

    def __init__(self, host_count):
        self.hostCount = host_count
        self.scanId = ''
        self.scanName = ''
        self.scannerName = ''
        self.scanType = ''
        self.status = ''
        self.uuid = ''
        self.startTime = ''
        self.endTime = ''

    @property
    def scanId(self):
        return self._scanId

    @scanId.setter
    def scanId(self, value):
        self._scanId = random.randint(1, 999)

    @property
    def scannerName(self):
        return self._scannerName

    @scannerName.setter
    def scannerName(self, value):
        self._scannerName = 'Local Scanner %s' % random.randint(1,5)

    @property
    def scannerUUID(self):
        return str(uuid.uuid4())

    @property
    def scanName(self):
        return self._scanName

    @scanName.setter
    def scanName(self, value):
        self._scanName = random.choice(['Web Server Scan', 'Endpoint Scan', 'Container Scanner', 'Audit Scan', 'Vulnerability Patch List Scan', 'Random Scan'])

    @property
    def scanType(self):
        return self._scanType

    @scanType.setter
    def scanType(self, value):
        self._scanType = random.choice(['local', 'cloud', 'mssp'])

    @property
    def status(self):
        return self._status

    @status.setter
    def status(self, value):
        self._status = random.choice(['complete'] * 4 + ['new', 'pending', 'running','incomplete', 'imported', 'scheduled', 'canceled'])

    @property
    def uuid(self):
        return self._uuid

    @uuid.setter
    def uuid(self, value):
        self._uuid = str(uuid.uuid4())

    @property
    def hostCount(self):
        return self._hostCount
    
    @hostCount.setter
    def hostCount(self, value):
        self._hostCount = value

    @property
    def ipList(self):
        count = 0
        ip_list = []
        network = Network()
        while count < self.hostCount:
            ip_list.append(network.ipv4)
            count += 1
        return ip_list

    @property
    def startTime(self):
        return self._startTime

    @startTime.setter
    def startTime(self, value):
        self._startTime = pendulum.now().subtract(
            days=random.randint(1,30), 
            hours=random.randint(1,23), 
            minutes=random.randint(1,59), 
            seconds=random.randint(1,59)
        )

    @property
    def endTime(self):
        return self._endTime

    @endTime.setter
    def endTime(self, value):
        self._endTime = self.startTime.add(
            hours=random.randint(1,4), 
            minutes=random.randint(1, 59), 
            seconds=random.randint(1,59)
        )