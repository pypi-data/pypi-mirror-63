import random, time, uuid, json, pendulum, string

from .vulnerability import Vulnerability

class VulnerabilityHost(Vulnerability):

    def __init__(self, critical = 0, high = 0, medium = 0, low = 0, informational = 0):
        self.critical = critical
        self.high = high
        self.medium = medium
        self.low = low
        self.informational = informational

        self.hostId = ''
        self.checksConsidered = ''
        self.name = ''
        
        
    @property
    def hostId(self):
        return self._hostId

    @hostId.setter
    def hostId(self, value):
        self._hostId = random.randint(1, 899)

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        prefix = random.choice(['Desktop'] * 4 + ['Laptop'])
        self._name = '%s-' % prefix + ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(7))

    @property
    def fqdn(self):
        return '{name}.{domain}.{tld}'.format(
            name=self.name,
            domain=random.choice(['swimlane', 'tenable', 'google', 'microsoft', 'apple', 'facebook']),
            tld=random.choice(['com', 'net', 'edu', 'co.uk', 'io', 'org', 'gov'])
        )

    @property
    def mac_address(self):
        return ':'.join("%02x"%random.randint(0, 255) for _ in range(5))
        
    @property
    def checksConsidered(self):
        return self._checksConsidered

    @checksConsidered.setter
    def checksConsidered(self, value):
        self._checksConsidered = random.randint(323, 839)

    @property
    def percentage(self):
        return_dict = {}
        if self.critical:
            return_dict['critical'] = round(float(len(self.critical)) / float(self.checksConsidered) * 100, 4)
        if self.high:
            return_dict['high'] = round(float(len(self.high)) / float(self.checksConsidered) * 100, 4)
        if self.medium:
            return_dict['medium'] = round(float(len(self.medium)) / float(self.checksConsidered) * 100, 4)
        if self.low:
            return_dict['low'] = round(float(len(self.low)) / float(self.checksConsidered) * 100, 4)
        if self.informational:
            return_dict['informational'] = round(float(len(self.informational)) / float(self.checksConsidered) * 100, 4)
        return return_dict

    @property
    def totalScore(self):
        score = len(self.critical) * 5
        score += len(self.high) * 4
        score += len(self.medium) * 3
        score += len(self.low) * 2
        score += len(self.informational) * 1
        return score