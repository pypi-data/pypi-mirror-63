#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import print_function, division, absolute_import, unicode_literals

from tatsu.objectmodel import Node
from tatsu.semantics import ModelBuilderSemantics


class ModelBase(Node):
    pass


class PDDLModelBuilderSemantics(ModelBuilderSemantics):
    def __init__(self, context=None, types=None):
        types = [
            t for t in globals().values()
            if type(t) is type and issubclass(t, ModelBase)
        ] + (types or [])
        super(PDDLModelBuilderSemantics, self).__init__(context=context, types=types)


class DomainNode(ModelBase):
    constants = None
    domain = None
    predicates = None
    requirements = None
    structures = None
    types = None


class TypesNode(ModelBase):
    types = None


class TypeNode(ModelBase):
    subtypes = None
    supertype = None


class PredicatesNode(ModelBase):
    predicates = None


class PredicateNode(ModelBase):
    name = None
    parameters = None


class ParameterNode(ModelBase):
    names = None
    type = None


class RuleNode(ModelBase):
    body = None
    name = None
    parameters = None


class GoalNode(ModelBase):
    and_ = None
    atomic = None
    exists = None
    forall = None
    not_ = None
    or_ = None
    parameters = None
    predicates = None


class Predicate2Node(ModelBase):
    name = None
    parameters = None


class AliasNode(ModelBase):
    alias = None
    replacement = None


class EffectNode(ModelBase):
    and_ = None
    atomic = None


class NameNode(ModelBase):
    pass


class VariableNode(ModelBase):
    first = None
    rest = None
