{"version":3,"sources":["webpack:///./src/app/task/task-detail/step/step.component.css","webpack:///./src/app/task/task-detail/step/step.component.html","webpack:///./src/app/task/task-detail/step/step.component.ts","webpack:///./src/app/task/task-detail/task-detail-routing.module.ts","webpack:///./src/app/task/task-detail/task-detail.module.ts","webpack:///./src/app/task/task-detail/task-detail/task-detail.component.html","webpack:///./src/app/task/task-detail/task-detail/task-detail.component.ts"],"names":[],"mappings":"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","file":"default~task-detail-task-detail-module~task-task-module.js","sourcesContent":["module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Rhc2svdGFzay1kZXRhaWwvc3RlcC9zdGVwLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<mat-tree [dataSource]=\\\"dataSource\\\" [treeControl]=\\\"treeControl\\\">\\n    <mat-tree-node *matTreeNodeDef=\\\"let node\\\" matTreeNodePadding>\\n        <button\\n                mat-icon-button\\n                mat-button class=\\\"mat-icon-button\\\"\\n                (click)=\\\"node_click(node)\\\">\\n\\n        </button>\\n\\n        <mat-accordion>\\n            <mat-expansion-panel\\n                    (opened)=\\\"node.opened = true\\\"\\n                    (closed)=\\\"node.opened = false\\\">\\n                <mat-expansion-panel-header>\\n                    <mat-panel-title>\\n                        <span [style.margin]=\\\"'auto'\\\">\\n                            {{node.name}}\\n                        </span>\\n\\n                    </mat-panel-title>\\n                    <mat-panel-description>\\n                        <span style=\\\"padding: 10px\\\">\\n                            {{node.content.duration}}\\n                        </span>\\n\\n                        <svg height=\\\"40\\\" width=\\\"220px\\\" style=\\\"display: block;\\\">\\n                            <g matTooltip=\\\"{{status.name}}\\\"\\n                               [attr.transform]=\\\"'translate('+\\n                               (16+i*30).toString()+','+'20)'\\\"\\n                               *ngFor=\\\"let status of\\n                               node.content.log_statuses; let i = index\\\">\\n\\n                                <text\\n                                        fill=\\\"black\\\"\\n                                        text-anchor=\\\"middle\\\"\\n                                        vertical-align=\\\"middle\\\"\\n                                      font-size=\\\"10\\\" y=\\\"3\\\">\\n                                    {{status.count > 0 ? status.count : ''}}\\n                                </text>\\n\\n                                <circle [attr.stroke-width]=\\n                                                \\\"status.count>0?2:1\\\"\\n                                        (click)=\\\"status_click(node,\\n                                        status.name)\\\"\\n                                        [attr.stroke]=\\\"color_for_log_status(\\n                                        status.name, status.count)\\\"\\n                                        fill-opacity=\\\"0\\\" r=\\\"12.5\\\"\\n                                        style=\\\"cursor: pointer; opacity: 1;\\\">\\n\\n                                </circle>\\n                            </g>\\n\\n                        </svg>\\n\\n                    </mat-panel-description>\\n                </mat-expansion-panel-header>\\n\\n                <app-log\\n                        *ngIf=\\\"node.opened\\\"\\n                        [step]=\\\"node.content.id\\\"\\n                        [init_level]=\\\"node.content.init_level\\\">\\n\\n                </app-log>\\n\\n\\n            </mat-expansion-panel>\\n        </mat-accordion>\\n\\n\\n    </mat-tree-node>\\n\\n    <mat-tree-node *matTreeNodeDef=\\\"let node;when: hasChild\\\"\\n                   matTreeNodePadding>\\n        <button mat-icon-button matTreeNodeToggle\\n                [attr.aria-label]=\\\"'toggle ' + node.name\\\"\\n                class=\\\"mat-icon-button\\\">\\n\\n            <mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\n\\n            </mat-icon>\\n        </button>\\n\\n            <mat-accordion>\\n            <mat-expansion-panel\\n                    (opened)=\\\"node.opened = true\\\"\\n                    (closed)=\\\"node.opened = false\\\">\\n                <mat-expansion-panel-header>\\n                    <mat-panel-title>\\n                        <span [style.margin]=\\\"'auto'\\\">\\n                            {{node.name}}\\n                        </span>\\n\\n                    </mat-panel-title>\\n                    <mat-panel-description>\\n                        <span style=\\\"padding: 10px\\\">\\n                            {{node.content.duration}}\\n                        </span>\\n\\n                        <svg height=\\\"40\\\" width=\\\"220px\\\" style=\\\"display: block;\\\">\\n                            <g matTooltip=\\\"{{status.name}}\\\"\\n                               [attr.transform]=\\\"'translate('+\\n                               (16+i*30).toString()+','+'20)'\\\"\\n                               *ngFor=\\\"let status of\\n                               node.content.log_statuses; let i = index\\\">\\n\\n                                <text\\n                                        fill=\\\"black\\\"\\n                                        text-anchor=\\\"middle\\\"\\n                                        vertical-align=\\\"middle\\\"\\n                                      font-size=\\\"10\\\" y=\\\"3\\\">\\n                                    {{status.count > 0 ? status.count : ''}}\\n                                </text>\\n\\n                                <circle [attr.stroke-width]=\\n                                                \\\"status.count>0?2:1\\\"\\n                                        (click)=\\\"status_click(node,\\n                                        status.name)\\\"\\n                                        [attr.stroke]=\\\"color_for_log_status(\\n                                        status.name, status.count)\\\"\\n                                        fill-opacity=\\\"0\\\" r=\\\"12.5\\\"\\n                                        style=\\\"cursor: pointer; opacity: 1;\\\">\\n\\n                                </circle>\\n                            </g>\\n\\n                        </svg>\\n\\n                    </mat-panel-description>\\n                </mat-expansion-panel-header>\\n\\n                <app-log\\n                        *ngIf=\\\"node.opened\\\"\\n                        [step]=\\\"node.content.id\\\"\\n                        [init_level]=\\\"node.content.init_level\\\">\\n\\n                </app-log>\\n\\n            </mat-expansion-panel>\\n        </mat-accordion>\\n\\n    </mat-tree-node>\\n</mat-tree>\"","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Location} from \"@angular/common\";\nimport {MatTreeFlatDataSource, MatTreeFlattener} from \"@angular/material\";\nimport {StepNode, FlatNode} from \"../../../models\";\nimport {FlatTreeControl} from \"@angular/cdk/tree\";\nimport {AppSettings} from \"../../../app-settings\";\nimport {of as ofObservable} from 'rxjs';\nimport {TaskService} from \"../../task.service\";\n\n@Component({\n    selector: 'app-step',\n    templateUrl: './step.component.html',\n    styleUrls: ['./step.component.css']\n})\nexport class StepComponent implements OnInit, OnDestroy {\n    public task: number;\n    private interval: number;\n    flat_node_map: Map<StepNode, FlatNode> = new Map<StepNode, FlatNode>();\n\n    constructor(protected service: TaskService,\n                protected location: Location\n    ) {\n    }\n\n    private transformer = (node: StepNode, level: number) => {\n        let res = {\n            expandable: !!node.children && node.children.length > 0,\n            name: node.name,\n            level: level,\n            content: node\n        };\n        if (node.id in this.flat_node_map) {\n            let node_flat = this.flat_node_map[node.id];\n            for (let k in res) {\n                if(res[k]!=node_flat[k]){\n                    Object.defineProperty(node_flat, k,\n                        {'value': res[k]});\n                }\n            }\n\n            return node_flat;\n        }\n        this.flat_node_map[node.id] = res;\n        return res;\n    };\n\n    get_children = node => ofObservable(node.children);\n\n    treeControl = new FlatTreeControl<FlatNode>(\n        node => node.level, node => node.expandable);\n\n    treeFlattener = new MatTreeFlattener(\n        this.transformer,\n            node => node.level,\n            node => node.expandable,\n        this.get_children);\n\n    dataSource = new MatTreeFlatDataSource(this.treeControl,\n        this.treeFlattener);\n\n    load() {\n        let self = this;\n        this.service.steps(this.task).subscribe(res => {\n            if(!res || !res.data){\n                return;\n            }\n            self.dataSource.data = res.data;\n            self.treeControl.expandAll();\n\n        });\n    }\n\n    ngOnInit() {\n        this.load();\n        this.interval = setInterval(() => this.load(), 3000);\n    }\n\n\n    node_click(node: FlatNode) {\n\n    }\n\n    hasChild = (_: number, node: FlatNode) => node.expandable;\n\n    color_for_log_status(name: string, count: number) {\n        return count > 0 ? AppSettings.log_colors[name] : 'gainsboro'\n    }\n\n    status_click(node: any, status: string) {\n        node.content.init_level = status;\n    }\n\n    ngOnDestroy() {\n        clearInterval(this.interval);\n    }\n}\n\n\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\n\nimport {TaskDetailComponent} from \"./task-detail/task-detail.component\";\nimport {LogComponent} from \"../../log/log.component\";\nimport {ReportsComponent} from \"../../report/reports/reports.component\";\nimport {StepComponent} from \"./step/step.component\";\n\nconst routes: Routes = [\n    {\n\n        path: '',\n        component: TaskDetailComponent,\n        children: [\n            {path: 'report', component: ReportsComponent},\n            {path: 'step', component: StepComponent},\n            {path: 'logs', component: LogComponent}\n        ]\n\n\n    }\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes)\n    ],\n    exports: [\n        RouterModule\n    ]\n})\nexport class TaskDetailRoutingModule {\n}","import {NgModule} from '@angular/core';\n\nimport {TaskDetailRoutingModule} from './task-detail-routing.module';\nimport {SharedModule} from \"../../shared.module\";\nimport {TaskDetailComponent} from \"./task-detail/task-detail.component\";\nimport { StepComponent } from './step/step.component';\n\n@NgModule({\n    imports: [\n        TaskDetailRoutingModule,\n        SharedModule\n    ],\n    declarations: [\n        TaskDetailComponent,\n        StepComponent\n    ]\n})\nexport class TaskDetailModule {\n}","module.exports = \"<h4>Task detail</h4>\\n\\n<app-task-table\\n        [paginator]=\\\"this\\\"\\n        [report]=\\\"report\\\"\\n        [projects]=\\\"projects\\\">\\n\\n</app-task-table>\\n\\n<div *ngIf=\\\"child_paginator.total==null||child_paginator.total>0\\\">\\n    <h4>Child tasks</h4>\\n\\n    <app-task-table\\n            [paginator]=\\\"child_paginator\\\"\\n            [show_links]=\\\"false\\\">\\n    </app-task-table>\\n</div>\\n\\n\\n<nav>\\n    <a routerLink=\\\"./logs\\\" routerLinkActive=\\\"active\\\"\\n       [routerLinkActiveOptions]=\\\"{ exact: true }\\\">Logs</a>\\n    <a routerLink=\\\"./step\\\" routerLinkActive=\\\"active\\\">Steps</a>\\n    <a routerLink=\\\"./report\\\" routerLinkActive=\\\"active\\\">Reports</a>\\n</nav>\\n\\n<router-outlet (activate)=\\\"onActivate($event)\\\"></router-outlet>\"","import {Component} from '@angular/core';\nimport {TasksComponent} from \"../../tasks/tasks.component\";\nimport {Paginator} from \"../../../paginator\";\nimport {Task} from \"../../../models\";\n\n@Component({\n    selector: 'app-task-detail',\n    templateUrl: './task-detail.component.html',\n    styleUrls: ['../../tasks/tasks.component.css']\n})\nexport class TaskDetailComponent extends TasksComponent {\n    child_paginator: Paginator<Task>;\n    components: any[] = [];\n\n    get_filter(): any {\n        let res = super.get_filter();\n        res.id = this.id;\n        res.type = ['User', 'Train', 'Service'];\n        return res;\n    }\n\n    get id() {\n        return parseInt(this.route.snapshot.paramMap.get('id'));\n    }\n\n    get filter_params_get() {\n        let self = this;\n\n        function filter_params_get_int() {\n            return {\n                parent: self.id,\n                type: ['Service']\n            }\n        }\n\n        return filter_params_get_int;\n\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n\n        this.child_paginator = new Paginator<Task>(\n            this.service,\n            this.location,\n            this.filter_params_get,\n            'paginator',\n            true,\n            false\n        );\n\n        this.child_paginator.ngOnInit();\n        this.child_paginator.change.subscribe(x => {\n            for (let c of this.components) {\n                c.task = this.id;\n            }\n        });\n        this.child_paginator.change.emit();\n    }\n\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this.child_paginator.ngOnDestroy();\n    }\n\n    onActivate(component) {\n        component.task = this.id;\n        this.components.push(component);\n    }\n\n}\n"],"sourceRoot":""}