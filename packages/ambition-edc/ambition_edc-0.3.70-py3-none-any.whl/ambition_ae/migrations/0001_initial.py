# Generated by Django 2.0.1 on 2018-01-19 10:55

import _socket
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_revision.revision_field
import edc_model_fields.fields
import edc_model_fields.fields.hostname_modification_field
import edc_model_fields.fields.userfield
import edc_model_fields.fields.uuid_auto_field
import edc_model.validators
import edc_sites.models
import edc_utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("sites", "0002_alter_domain_unique"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AeFollowup",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(max_length=50, verbose_name="Subject Identifier"),
                ),
                ("tracking_identifier", models.CharField(max_length=30, unique=True)),
                ("action_identifier", models.CharField(max_length=25, null=True)),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        verbose_name="Report date and time",
                    ),
                ),
                (
                    "outcome",
                    models.CharField(
                        choices=[
                            ("continuing/update", "Continuing/Update"),
                            ("increase_from_g3", "Severity increased from Grade III"),
                            ("recovered", "Recovered/Resolved"),
                            ("recovering", "Recovering/Resolving at end of study"),
                            ("not_recovered", "Not Recovered/Resolved at end of study"),
                            ("LTFU", "Unknown/Lost to follow-up"),
                            ("recovered_with_sequelae", "Recovered with sequelae"),
                            ("dead", "Death"),
                        ],
                        max_length=25,
                    ),
                ),
                (
                    "outcome_date",
                    models.DateField(
                        validators=[edc_model.validators.date.date_not_future]
                    ),
                ),
                (
                    "ae_grade",
                    models.CharField(
                        choices=[
                            ("4", "Grade 4 - Life-threatening"),
                            ("5", "Grade 5 - Death"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="If severity increased, indicate grade",
                    ),
                ),
                (
                    "relevant_history",
                    models.TextField(
                        help_text="Indicate Adverse Event, clinical results,medications given, dosage,treatment plan and outcomes.",
                        max_length=1000,
                        verbose_name="Description summary of Adverse Event outcome",
                    ),
                ),
                (
                    "followup",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="Yes",
                        help_text="If NO, this will be considered the final report",
                        max_length=15,
                        verbose_name="Is a follow-up to this report required?",
                    ),
                ),
            ],
            options={"verbose_name": "AE Follow-up Report"},
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="AeInitial",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(max_length=50, verbose_name="Subject Identifier"),
                ),
                ("tracking_identifier", models.CharField(max_length=30, unique=True)),
                ("action_identifier", models.CharField(max_length=25, null=True)),
                (
                    "ae_auto_created",
                    models.BooleanField(default=False, editable=False, max_length=25),
                ),
                (
                    "ae_auto_created_criteria",
                    models.CharField(default="N/A", editable=False, max_length=50),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "ae_description",
                    models.TextField(verbose_name="Adverse Event (AE) description"),
                ),
                (
                    "ae_awareness_date",
                    models.DateField(
                        default=edc_utils.date.get_utcnow,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="AE Awareness date",
                    ),
                ),
                (
                    "ae_start_date",
                    models.DateField(
                        default=edc_utils.date.get_utcnow,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Actual Start Date of AE",
                    ),
                ),
                (
                    "ae_grade",
                    models.CharField(
                        choices=[
                            ("3", "Grade III - Severe"),
                            ("4", "Grade 4 - Life-threatening"),
                            ("5", "Grade 5 - Death"),
                        ],
                        max_length=25,
                        verbose_name="Severity of AE",
                    ),
                ),
                (
                    "ae_intensity",
                    models.CharField(
                        choices=[
                            ("mild", "Mild"),
                            ("moderate", "Moderate"),
                            ("severe", "Severe"),
                        ],
                        max_length=25,
                        verbose_name="What is the intensity AE",
                    ),
                ),
                (
                    "ae_classification",
                    models.CharField(
                        choices=[
                            ("anaemia", "Anaemia"),
                            ("bacteraemia/sepsis", "Bacteraemia/Sepsis"),
                            ("CM_IRIS", "CM IRIS"),
                            ("diarrhoea", "Diarrhoea"),
                            ("hypokalaemia", "Hypokalaemia"),
                            ("neutropaenia", "Neutropaenia"),
                            ("pneumonia", "Pneumonia"),
                            ("respiratory_distress", "Respiratory distress"),
                            ("TB", "TB"),
                            ("thrombocytopenia", "Thrombocytopenia"),
                            ("thrombophlebitis", "Renal impairment"),
                            ("OTHER", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "ae_classification_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "regimen",
                    models.CharField(
                        choices=[
                            ("single_dose", "Single dose"),
                            ("control", "Control"),
                        ],
                        help_text="<ul><li>Single-dose: Ambisome 10mg/kg on day 1 with Flucytosine 100mg/kg/day and Fluconazole 1200mg/day for 14 days.<li>Control: Amphotericin B 1 mg/kg for 7 days with Flucytosine 100mg/kg/day for 7 days followed by Fluconazole 1200mg/day for 7 days.</ul>",
                        max_length=50,
                        verbose_name="Patient’s treatment regimen",
                    ),
                ),
                (
                    "ae_study_relation_possibility",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("unknown", "Unknown")],
                        max_length=10,
                        verbose_name="Is the incident related to the patient involvement in the study?",
                    ),
                ),
                (
                    "ambisome_relation",
                    models.CharField(
                        choices=[
                            ("not_related", "Not related"),
                            ("possibly_related", "Possibly related"),
                            ("probably_related", "Probably related"),
                            ("definitely_related", "Definitely related"),
                            ("unlikely_related", "Unlikely related"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=25,
                        verbose_name="Relationship to Ambisome:",
                    ),
                ),
                (
                    "fluconazole_relation",
                    models.CharField(
                        choices=[
                            ("not_related", "Not related"),
                            ("possibly_related", "Possibly related"),
                            ("probably_related", "Probably related"),
                            ("definitely_related", "Definitely related"),
                            ("unlikely_related", "Unlikely related"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=25,
                        verbose_name="Relationship to Fluconozole:",
                    ),
                ),
                (
                    "amphotericin_b_relation",
                    models.CharField(
                        choices=[
                            ("not_related", "Not related"),
                            ("possibly_related", "Possibly related"),
                            ("probably_related", "Probably related"),
                            ("definitely_related", "Definitely related"),
                            ("unlikely_related", "Unlikely related"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=25,
                        verbose_name="Relationship to Amphotericin B:",
                    ),
                ),
                (
                    "flucytosine_relation",
                    models.CharField(
                        choices=[
                            ("not_related", "Not related"),
                            ("possibly_related", "Possibly related"),
                            ("probably_related", "Probably related"),
                            ("definitely_related", "Definitely related"),
                            ("unlikely_related", "Unlikely related"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=25,
                        verbose_name="Relationship to Flucytosine:",
                    ),
                ),
                (
                    "details_last_study_drug",
                    models.TextField(
                        blank=True,
                        max_length=1000,
                        null=True,
                        verbose_name="Details of the last implicated drug (name, dose, route):",
                    ),
                ),
                (
                    "med_administered_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Date and time of last implicated study medication administered",
                    ),
                ),
                (
                    "ae_cause",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Has a reason other than the specified study drug been identified as the cause of the event(s)?",
                    ),
                ),
                (
                    "ae_cause_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name='If "Yes", specify',
                    ),
                ),
                (
                    "ae_treatment",
                    models.TextField(
                        verbose_name="Specify action taken for treatment of AE:"
                    ),
                ),
                (
                    "ae_cm_recurrence",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="unknown",
                        help_text='If "Yes", fill in the "Recurrence of Symptoms" form',
                        max_length=10,
                        verbose_name="Was the AE a recurrence of CM symptoms?",
                    ),
                ),
                (
                    "sae",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="(i.e. results in death, in-patient hospitalisation/prolongation, significant disability or is life-threatening)",
                        max_length=5,
                        verbose_name="Is this event a SAE?",
                    ),
                ),
                (
                    "sae_reason",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("dead", "Death"),
                            ("life_threatening", "Life-threatening"),
                            ("significant_disability", "Significant disability"),
                            (
                                "in-patient_hospitalization",
                                "In-patient hospitalization or prolongation (beyond 1 week from study inclusion)",
                            ),
                            (
                                "medically_important_event",
                                "Medically important event (e.g. Severe thrombophlebitis, Bacteraemia, recurrence of symptoms not requiring admission, Hospital acquired pneumonia)",
                            ),
                        ],
                        default="N/A",
                        help_text="If subject deceased, submit a Death Report",
                        max_length=50,
                        verbose_name='If "Yes", reason for SAE:',
                    ),
                ),
                (
                    "susar",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If yes, SUSAR must be reported to Principal Investigator and TMG immediately,",
                        max_length=5,
                        verbose_name="Is this a Suspected Unexpected Serious Adverse Reaction (SUSAR)?",
                    ),
                ),
                (
                    "susar_reported",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=5,
                        verbose_name="Is SUSAR reported?",
                    ),
                ),
                (
                    "tmg_report_datetime",
                    models.DateTimeField(
                        blank=True,
                        help_text="AEs ≥ Grade 4 or SAE must be reported to the Trial Management Group (TMG) within 24 hours",
                        null=True,
                        verbose_name="Date and time AE reported to TMG",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={"verbose_name": "AE Initial Report"},
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="AeTmg",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(max_length=50, verbose_name="Subject Identifier"),
                ),
                ("tracking_identifier", models.CharField(max_length=30, unique=True)),
                ("action_identifier", models.CharField(max_length=25, null=True)),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Report date and time",
                    ),
                ),
                (
                    "ae_received_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Date and time AE form received:",
                    ),
                ),
                (
                    "clinical_review_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Date and time of clinical review: ",
                    ),
                ),
                (
                    "investigator_comments",
                    models.TextField(
                        blank=True, null=True, verbose_name="Investigator comments:"
                    ),
                ),
                (
                    "ae_classification",
                    models.CharField(
                        choices=[
                            ("anaemia", "Anaemia"),
                            ("bacteraemia/sepsis", "Bacteraemia/Sepsis"),
                            ("CM_IRIS", "CM IRIS"),
                            ("diarrhoea", "Diarrhoea"),
                            ("hypokalaemia", "Hypokalaemia"),
                            ("neutropaenia", "Neutropaenia"),
                            ("pneumonia", "Pneumonia"),
                            ("respiratory_distress", "Respiratory distress"),
                            ("TB", "TB"),
                            ("thrombocytopenia", "Thrombocytopenia"),
                            ("thrombophlebitis", "Renal impairment"),
                            ("OTHER", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "ae_classification_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "ae_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Description of AE:"
                    ),
                ),
                (
                    "officials_notified",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Date and time regulatory authorities notified (SUSARs)",
                    ),
                ),
                (
                    "report_status",
                    models.CharField(
                        choices=[
                            ("open", "Open. Some information is still pending."),
                            ("closed", "Closed. This report is complete"),
                        ],
                        max_length=25,
                        verbose_name="What is the status of this report?",
                    ),
                ),
                (
                    "report_closed_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Date and time report closed.",
                    ),
                ),
                (
                    "ae_initial",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ambition_ae.AeInitial",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={"verbose_name": "AE TMG Report"},
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="AntibioticTreatment",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="(suggest 40 characters max.)",
                        max_length=250,
                        unique=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "short_name",
                    models.CharField(
                        db_index=True,
                        help_text="This is the stored value, required",
                        max_length=250,
                        unique=True,
                        verbose_name="Stored value",
                    ),
                ),
                (
                    "display_index",
                    models.IntegerField(
                        db_index=True,
                        default=0,
                        help_text="Index to control display order if not alphabetical, not required",
                        verbose_name="display index",
                    ),
                ),
                (
                    "field_name",
                    models.CharField(
                        blank=True,
                        editable=False,
                        help_text="Not required",
                        max_length=25,
                        null=True,
                    ),
                ),
                (
                    "version",
                    models.CharField(default="1.0", editable=False, max_length=35),
                ),
            ],
            options={"ordering": ["display_index", "name"], "abstract": False},
        ),
        migrations.CreateModel(
            name="HistoricalAeFollowup",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(max_length=50, verbose_name="Subject Identifier"),
                ),
                ("tracking_identifier", models.CharField(db_index=True, max_length=30)),
                ("action_identifier", models.CharField(max_length=25, null=True)),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        verbose_name="Report date and time",
                    ),
                ),
                (
                    "outcome",
                    models.CharField(
                        choices=[
                            ("continuing/update", "Continuing/Update"),
                            ("increase_from_g3", "Severity increased from Grade III"),
                            ("recovered", "Recovered/Resolved"),
                            ("recovering", "Recovering/Resolving at end of study"),
                            ("not_recovered", "Not Recovered/Resolved at end of study"),
                            ("LTFU", "Unknown/Lost to follow-up"),
                            ("recovered_with_sequelae", "Recovered with sequelae"),
                            ("dead", "Death"),
                        ],
                        max_length=25,
                    ),
                ),
                (
                    "outcome_date",
                    models.DateField(
                        validators=[edc_model.validators.date.date_not_future]
                    ),
                ),
                (
                    "ae_grade",
                    models.CharField(
                        choices=[
                            ("4", "Grade 4 - Life-threatening"),
                            ("5", "Grade 5 - Death"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="If severity increased, indicate grade",
                    ),
                ),
                (
                    "relevant_history",
                    models.TextField(
                        help_text="Indicate Adverse Event, clinical results,medications given, dosage,treatment plan and outcomes.",
                        max_length=1000,
                        verbose_name="Description summary of Adverse Event outcome",
                    ),
                ),
                (
                    "followup",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="Yes",
                        help_text="If NO, this will be considered the final report",
                        max_length=15,
                        verbose_name="Is a follow-up to this report required?",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "ae_initial",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ambition_ae.AeInitial",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalAeInitial",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(max_length=50, verbose_name="Subject Identifier"),
                ),
                ("tracking_identifier", models.CharField(db_index=True, max_length=30)),
                ("action_identifier", models.CharField(max_length=25, null=True)),
                (
                    "ae_auto_created",
                    models.BooleanField(default=False, editable=False, max_length=25),
                ),
                (
                    "ae_auto_created_criteria",
                    models.CharField(default="N/A", editable=False, max_length=50),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "ae_description",
                    models.TextField(verbose_name="Adverse Event (AE) description"),
                ),
                (
                    "ae_awareness_date",
                    models.DateField(
                        default=edc_utils.date.get_utcnow,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="AE Awareness date",
                    ),
                ),
                (
                    "ae_start_date",
                    models.DateField(
                        default=edc_utils.date.get_utcnow,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Actual Start Date of AE",
                    ),
                ),
                (
                    "ae_grade",
                    models.CharField(
                        choices=[
                            ("3", "Grade III - Severe"),
                            ("4", "Grade 4 - Life-threatening"),
                            ("5", "Grade 5 - Death"),
                        ],
                        max_length=25,
                        verbose_name="Severity of AE",
                    ),
                ),
                (
                    "ae_intensity",
                    models.CharField(
                        choices=[
                            ("mild", "Mild"),
                            ("moderate", "Moderate"),
                            ("severe", "Severe"),
                        ],
                        max_length=25,
                        verbose_name="What is the intensity AE",
                    ),
                ),
                (
                    "ae_classification",
                    models.CharField(
                        choices=[
                            ("anaemia", "Anaemia"),
                            ("bacteraemia/sepsis", "Bacteraemia/Sepsis"),
                            ("CM_IRIS", "CM IRIS"),
                            ("diarrhoea", "Diarrhoea"),
                            ("hypokalaemia", "Hypokalaemia"),
                            ("neutropaenia", "Neutropaenia"),
                            ("pneumonia", "Pneumonia"),
                            ("respiratory_distress", "Respiratory distress"),
                            ("TB", "TB"),
                            ("thrombocytopenia", "Thrombocytopenia"),
                            ("thrombophlebitis", "Renal impairment"),
                            ("OTHER", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "ae_classification_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "regimen",
                    models.CharField(
                        choices=[
                            ("single_dose", "Single dose"),
                            ("control", "Control"),
                        ],
                        help_text="<ul><li>Single-dose: Ambisome 10mg/kg on day 1 with Flucytosine 100mg/kg/day and Fluconazole 1200mg/day for 14 days.<li>Control: Amphotericin B 1 mg/kg for 7 days with Flucytosine 100mg/kg/day for 7 days followed by Fluconazole 1200mg/day for 7 days.</ul>",
                        max_length=50,
                        verbose_name="Patient’s treatment regimen",
                    ),
                ),
                (
                    "ae_study_relation_possibility",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("unknown", "Unknown")],
                        max_length=10,
                        verbose_name="Is the incident related to the patient involvement in the study?",
                    ),
                ),
                (
                    "ambisome_relation",
                    models.CharField(
                        choices=[
                            ("not_related", "Not related"),
                            ("possibly_related", "Possibly related"),
                            ("probably_related", "Probably related"),
                            ("definitely_related", "Definitely related"),
                            ("unlikely_related", "Unlikely related"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=25,
                        verbose_name="Relationship to Ambisome:",
                    ),
                ),
                (
                    "fluconazole_relation",
                    models.CharField(
                        choices=[
                            ("not_related", "Not related"),
                            ("possibly_related", "Possibly related"),
                            ("probably_related", "Probably related"),
                            ("definitely_related", "Definitely related"),
                            ("unlikely_related", "Unlikely related"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=25,
                        verbose_name="Relationship to Fluconozole:",
                    ),
                ),
                (
                    "amphotericin_b_relation",
                    models.CharField(
                        choices=[
                            ("not_related", "Not related"),
                            ("possibly_related", "Possibly related"),
                            ("probably_related", "Probably related"),
                            ("definitely_related", "Definitely related"),
                            ("unlikely_related", "Unlikely related"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=25,
                        verbose_name="Relationship to Amphotericin B:",
                    ),
                ),
                (
                    "flucytosine_relation",
                    models.CharField(
                        choices=[
                            ("not_related", "Not related"),
                            ("possibly_related", "Possibly related"),
                            ("probably_related", "Probably related"),
                            ("definitely_related", "Definitely related"),
                            ("unlikely_related", "Unlikely related"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=25,
                        verbose_name="Relationship to Flucytosine:",
                    ),
                ),
                (
                    "details_last_study_drug",
                    models.TextField(
                        blank=True,
                        max_length=1000,
                        null=True,
                        verbose_name="Details of the last implicated drug (name, dose, route):",
                    ),
                ),
                (
                    "med_administered_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Date and time of last implicated study medication administered",
                    ),
                ),
                (
                    "ae_cause",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Has a reason other than the specified study drug been identified as the cause of the event(s)?",
                    ),
                ),
                (
                    "ae_cause_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name='If "Yes", specify',
                    ),
                ),
                (
                    "ae_treatment",
                    models.TextField(
                        verbose_name="Specify action taken for treatment of AE:"
                    ),
                ),
                (
                    "ae_cm_recurrence",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="unknown",
                        help_text='If "Yes", fill in the "Recurrence of Symptoms" form',
                        max_length=10,
                        verbose_name="Was the AE a recurrence of CM symptoms?",
                    ),
                ),
                (
                    "sae",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="(i.e. results in death, in-patient hospitalisation/prolongation, significant disability or is life-threatening)",
                        max_length=5,
                        verbose_name="Is this event a SAE?",
                    ),
                ),
                (
                    "sae_reason",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("dead", "Death"),
                            ("life_threatening", "Life-threatening"),
                            ("significant_disability", "Significant disability"),
                            (
                                "in-patient_hospitalization",
                                "In-patient hospitalization or prolongation (beyond 1 week from study inclusion)",
                            ),
                            (
                                "medically_important_event",
                                "Medically important event (e.g. Severe thrombophlebitis, Bacteraemia, recurrence of symptoms not requiring admission, Hospital acquired pneumonia)",
                            ),
                        ],
                        default="N/A",
                        help_text="If subject deceased, submit a Death Report",
                        max_length=50,
                        verbose_name='If "Yes", reason for SAE:',
                    ),
                ),
                (
                    "susar",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If yes, SUSAR must be reported to Principal Investigator and TMG immediately,",
                        max_length=5,
                        verbose_name="Is this a Suspected Unexpected Serious Adverse Reaction (SUSAR)?",
                    ),
                ),
                (
                    "susar_reported",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=5,
                        verbose_name="Is SUSAR reported?",
                    ),
                ),
                (
                    "tmg_report_datetime",
                    models.DateTimeField(
                        blank=True,
                        help_text="AEs ≥ Grade 4 or SAE must be reported to the Trial Management Group (TMG) within 24 hours",
                        null=True,
                        verbose_name="Date and time AE reported to TMG",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalAeTmg",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(max_length=50, verbose_name="Subject Identifier"),
                ),
                ("tracking_identifier", models.CharField(db_index=True, max_length=30)),
                ("action_identifier", models.CharField(max_length=25, null=True)),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Report date and time",
                    ),
                ),
                (
                    "ae_received_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Date and time AE form received:",
                    ),
                ),
                (
                    "clinical_review_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Date and time of clinical review: ",
                    ),
                ),
                (
                    "investigator_comments",
                    models.TextField(
                        blank=True, null=True, verbose_name="Investigator comments:"
                    ),
                ),
                (
                    "ae_classification",
                    models.CharField(
                        choices=[
                            ("anaemia", "Anaemia"),
                            ("bacteraemia/sepsis", "Bacteraemia/Sepsis"),
                            ("CM_IRIS", "CM IRIS"),
                            ("diarrhoea", "Diarrhoea"),
                            ("hypokalaemia", "Hypokalaemia"),
                            ("neutropaenia", "Neutropaenia"),
                            ("pneumonia", "Pneumonia"),
                            ("respiratory_distress", "Respiratory distress"),
                            ("TB", "TB"),
                            ("thrombocytopenia", "Thrombocytopenia"),
                            ("thrombophlebitis", "Renal impairment"),
                            ("OTHER", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "ae_classification_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "ae_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Description of AE:"
                    ),
                ),
                (
                    "officials_notified",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Date and time regulatory authorities notified (SUSARs)",
                    ),
                ),
                (
                    "report_status",
                    models.CharField(
                        choices=[
                            ("open", "Open. Some information is still pending."),
                            ("closed", "Closed. This report is complete"),
                        ],
                        max_length=25,
                        verbose_name="What is the status of this report?",
                    ),
                ),
                (
                    "report_closed_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Date and time report closed.",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "ae_initial",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ambition_ae.AeInitial",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalRecurrenceSymptom",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(max_length=50, verbose_name="Subject Identifier"),
                ),
                ("tracking_identifier", models.CharField(db_index=True, max_length=30)),
                ("action_identifier", models.CharField(max_length=25, null=True)),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "meningitis_symptom_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other symptom, please specify",
                    ),
                ),
                (
                    "patient_readmitted",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Has the patient been re-admitted due to these recurrent symptoms?",
                    ),
                ),
                (
                    "glasgow_coma_score",
                    models.IntegerField(
                        help_text="/15",
                        validators=[
                            django.core.validators.MinValueValidator(3),
                            django.core.validators.MaxValueValidator(15),
                        ],
                        verbose_name="Score:",
                    ),
                ),
                (
                    "recent_seizure",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Recent seizure (<72 hrs):",
                    ),
                ),
                (
                    "behaviour_change",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=5
                    ),
                ),
                (
                    "confusion",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=5
                    ),
                ),
                (
                    "focal_neurologic_deficit",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        verbose_name='If "Focal neurologic deficit" chosen, please specify',
                    ),
                ),
                (
                    "cn_palsy_chosen_other",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        verbose_name="If other CN Palsy",
                    ),
                ),
                (
                    "lp_completed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If YES, complete LP form",
                        max_length=5,
                        verbose_name="LP completed",
                    ),
                ),
                (
                    "amb_administered",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=5
                    ),
                ),
                (
                    "amb_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, specify length of course",
                    ),
                ),
                (
                    "tb_treatment",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="TB treatment:",
                    ),
                ),
                (
                    "steroids_administered",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=5
                    ),
                ),
                (
                    "steroids_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, specify the length of course in days:",
                    ),
                ),
                (
                    "steroids_choices",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("oral_prednisolone", "Oral Prednisolone"),
                            ("iv_dexamethasone", "IV Dexamethasone used"),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="If YES",
                    ),
                ),
                (
                    "steroids_choices_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        verbose_name="If other steroids, please specify",
                    ),
                ),
                (
                    "CD4_count",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="CD4 count (if available)",
                    ),
                ),
                (
                    "antibiotic_treatment_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other antibiotic treatment, please specify",
                    ),
                ),
                (
                    "on_arvs",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            (
                                "on_arvs_before_enrollment",
                                "Already on ARVs before enrollment",
                            ),
                        ],
                        max_length=26,
                        verbose_name="On ARVs:",
                    ),
                ),
                (
                    "arv_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Study date ARVs started.",
                    ),
                ),
                (
                    "arvs_stopped",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=5,
                        verbose_name="ARVs stopped this clinical episode?",
                    ),
                ),
                (
                    "narrative_summary",
                    models.TextField(
                        help_text="Please ensure the following forms have been completed: LP, Bloods, Microbiology, Radiology",
                        verbose_name="Narrative summary of recurrence of symptoms:",
                    ),
                ),
                (
                    "dr_opinion",
                    models.CharField(
                        choices=[
                            ("cm_release", "CM Relapse"),
                            ("cm_iris", "CM IRIS"),
                            ("OTHER", "Other"),
                        ],
                        max_length=10,
                        verbose_name="Study doctor's opinion:",
                    ),
                ),
                (
                    "dr_opinion_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other doctor's opinion, please specify",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="MeningitisSymptom",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="(suggest 40 characters max.)",
                        max_length=250,
                        unique=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "short_name",
                    models.CharField(
                        db_index=True,
                        help_text="This is the stored value, required",
                        max_length=250,
                        unique=True,
                        verbose_name="Stored value",
                    ),
                ),
                (
                    "display_index",
                    models.IntegerField(
                        db_index=True,
                        default=0,
                        help_text="Index to control display order if not alphabetical, not required",
                        verbose_name="display index",
                    ),
                ),
                (
                    "field_name",
                    models.CharField(
                        blank=True,
                        editable=False,
                        help_text="Not required",
                        max_length=25,
                        null=True,
                    ),
                ),
                (
                    "version",
                    models.CharField(default="1.0", editable=False, max_length=35),
                ),
            ],
            options={"ordering": ["display_index", "name"], "abstract": False},
        ),
        migrations.CreateModel(
            name="Neurological",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="(suggest 40 characters max.)",
                        max_length=250,
                        unique=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "short_name",
                    models.CharField(
                        db_index=True,
                        help_text="This is the stored value, required",
                        max_length=250,
                        unique=True,
                        verbose_name="Stored value",
                    ),
                ),
                (
                    "display_index",
                    models.IntegerField(
                        db_index=True,
                        default=0,
                        help_text="Index to control display order if not alphabetical, not required",
                        verbose_name="display index",
                    ),
                ),
                (
                    "field_name",
                    models.CharField(
                        blank=True,
                        editable=False,
                        help_text="Not required",
                        max_length=25,
                        null=True,
                    ),
                ),
                (
                    "version",
                    models.CharField(default="1.0", editable=False, max_length=35),
                ),
            ],
            options={"ordering": ["display_index", "name"], "abstract": False},
        ),
        migrations.CreateModel(
            name="RecurrenceSymptom",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(max_length=50, verbose_name="Subject Identifier"),
                ),
                ("tracking_identifier", models.CharField(max_length=30, unique=True)),
                ("action_identifier", models.CharField(max_length=25, null=True)),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "meningitis_symptom_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other symptom, please specify",
                    ),
                ),
                (
                    "patient_readmitted",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Has the patient been re-admitted due to these recurrent symptoms?",
                    ),
                ),
                (
                    "glasgow_coma_score",
                    models.IntegerField(
                        help_text="/15",
                        validators=[
                            django.core.validators.MinValueValidator(3),
                            django.core.validators.MaxValueValidator(15),
                        ],
                        verbose_name="Score:",
                    ),
                ),
                (
                    "recent_seizure",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Recent seizure (<72 hrs):",
                    ),
                ),
                (
                    "behaviour_change",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=5
                    ),
                ),
                (
                    "confusion",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=5
                    ),
                ),
                (
                    "focal_neurologic_deficit",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        verbose_name='If "Focal neurologic deficit" chosen, please specify',
                    ),
                ),
                (
                    "cn_palsy_chosen_other",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        verbose_name="If other CN Palsy",
                    ),
                ),
                (
                    "lp_completed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If YES, complete LP form",
                        max_length=5,
                        verbose_name="LP completed",
                    ),
                ),
                (
                    "amb_administered",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=5
                    ),
                ),
                (
                    "amb_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, specify length of course",
                    ),
                ),
                (
                    "tb_treatment",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="TB treatment:",
                    ),
                ),
                (
                    "steroids_administered",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=5
                    ),
                ),
                (
                    "steroids_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, specify the length of course in days:",
                    ),
                ),
                (
                    "steroids_choices",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("oral_prednisolone", "Oral Prednisolone"),
                            ("iv_dexamethasone", "IV Dexamethasone used"),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="If YES",
                    ),
                ),
                (
                    "steroids_choices_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        verbose_name="If other steroids, please specify",
                    ),
                ),
                (
                    "CD4_count",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="CD4 count (if available)",
                    ),
                ),
                (
                    "antibiotic_treatment_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other antibiotic treatment, please specify",
                    ),
                ),
                (
                    "on_arvs",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            (
                                "on_arvs_before_enrollment",
                                "Already on ARVs before enrollment",
                            ),
                        ],
                        max_length=26,
                        verbose_name="On ARVs:",
                    ),
                ),
                (
                    "arv_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Study date ARVs started.",
                    ),
                ),
                (
                    "arvs_stopped",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=5,
                        verbose_name="ARVs stopped this clinical episode?",
                    ),
                ),
                (
                    "narrative_summary",
                    models.TextField(
                        help_text="Please ensure the following forms have been completed: LP, Bloods, Microbiology, Radiology",
                        verbose_name="Narrative summary of recurrence of symptoms:",
                    ),
                ),
                (
                    "dr_opinion",
                    models.CharField(
                        choices=[
                            ("cm_release", "CM Relapse"),
                            ("cm_iris", "CM IRIS"),
                            ("OTHER", "Other"),
                        ],
                        max_length=10,
                        verbose_name="Study doctor's opinion:",
                    ),
                ),
                (
                    "dr_opinion_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other doctor's opinion, please specify",
                    ),
                ),
                (
                    "antibiotic_treatment",
                    models.ManyToManyField(
                        to="ambition_ae.AntibioticTreatment",
                        verbose_name="Antibiotics treatment",
                    ),
                ),
                (
                    "meningitis_symptom",
                    models.ManyToManyField(
                        to="ambition_ae.MeningitisSymptom",
                        verbose_name="What are your current symptoms?",
                    ),
                ),
                (
                    "neurological",
                    models.ManyToManyField(
                        to="ambition_ae.Neurological", verbose_name="neurologic:"
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "Recurrence of Symptoms",
                "verbose_name_plural": "Recurrence of Symptoms",
            },
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.AddField(
            model_name="aefollowup",
            name="ae_initial",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="ambition_ae.AeInitial"
            ),
        ),
        migrations.AddField(
            model_name="aefollowup",
            name="site",
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="sites.Site",
            ),
        ),
    ]
