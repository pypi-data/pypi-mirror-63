# Generated by Django 2.0.1 on 2018-01-19 11:04

import _socket
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_crypto_fields.fields.firstname_field
import django_crypto_fields.fields.identity_field
import django_crypto_fields.fields.lastname_field
import django_revision.revision_field
import edc_model_fields.fields.date_estimated
import edc_model_fields.fields.hostname_modification_field
import edc_model_fields.fields.userfield
import edc_model_fields.fields.uuid_auto_field
import edc_model.validators.date
import edc_sites.models
import edc_utils
import edc_consent.validators
import edc_protocol.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("ambition_lists", "0001_initial"),
        ("edc_appointment", "0014_auto_20180116_1411"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("sites", "0002_alter_domain_unique"),
        ("edc_lab", "0013_auto_20180117_1438"),
    ]

    operations = [
        migrations.CreateModel(
            name="AmphotericinMissedDoses",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "ampho_day_missed",
                    models.IntegerField(
                        choices=[
                            (1, "Day 1"),
                            (2, "Day 2"),
                            (3, "Day 3"),
                            (4, "Day 4"),
                            (5, "Day 5"),
                            (6, "Day 6"),
                            (7, "Day 7"),
                            (8, "Day 8"),
                            (9, "Day 9"),
                            (10, "Day 10"),
                            (11, "Day 11"),
                            (12, "Day 12"),
                            (13, "Day 13"),
                            (14, "Day 14"),
                        ],
                        verbose_name="Day missed:",
                    ),
                ),
                (
                    "ampho_missed_reason",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("toxicity", "Toxicity"),
                            ("missed", "Missed"),
                            ("refused", "Refused"),
                            ("not_required", "Not required according to protocol"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        verbose_name="Reason:",
                    ),
                ),
                (
                    "missed_reason_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
            ],
            options={"verbose_name_plural": "Amphotericin Missed Doses"},
        ),
        migrations.CreateModel(
            name="BloodResult",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                ("tracking_identifier", models.CharField(max_length=30, unique=True)),
                ("action_identifier", models.CharField(max_length=25, null=True)),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "bios_crag",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="Gaborone and Blantyre only",
                        max_length=5,
                        verbose_name="Biosynex Semi-quantitative CrAg performed?",
                    ),
                ),
                (
                    "crag_control_result",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="Gaborone and Blantyre only",
                        max_length=5,
                        verbose_name="Control result",
                    ),
                ),
                (
                    "crag_t1_result",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="Gaborone and Blantyre only",
                        max_length=5,
                        verbose_name="T1 result",
                    ),
                ),
                (
                    "crag_t2_result",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="Gaborone and Blantyre only",
                        max_length=5,
                        verbose_name="T2 result",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "ft_assay_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Result Report Date and Time",
                    ),
                ),
                (
                    "cbc_assay_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Result Report Date and Time",
                    ),
                ),
                (
                    "cd4_assay_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Result Report Date and Time",
                    ),
                ),
                (
                    "vl_assay_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Result Report Date and Time",
                    ),
                ),
                (
                    "wbc",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=6,
                        null=True,
                        verbose_name="WBC",
                    ),
                ),
                (
                    "wbc_units",
                    models.CharField(
                        blank=True,
                        choices=[("10^9/L", "10^9/L")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "wbc_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "wbc_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "platelets",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(9999),
                        ],
                    ),
                ),
                (
                    "platelets_units",
                    models.CharField(
                        blank=True,
                        choices=[("10^9/L", "10^9/L")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "platelets_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "platelets_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "haemoglobin",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=6, null=True
                    ),
                ),
                (
                    "haemoglobin_units",
                    models.CharField(
                        blank=True,
                        choices=[("g/dL", "g/dL")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "haemoglobin_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "haemoglobin_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "neutrophil",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                (
                    "neutrophil_units",
                    models.CharField(
                        blank=True,
                        choices=[("10^9/L", "10^9/L")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "neutrophil_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "neutrophil_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "creatinine",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                (
                    "creatinine_units",
                    models.CharField(
                        blank=True,
                        choices=[("mg/dL", "mg/dL"), ("umol/L", "μmol/L")],
                        max_length=25,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "creatinine_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "creatinine_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "sodium",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(999),
                        ],
                    ),
                ),
                (
                    "sodium_units",
                    models.CharField(
                        blank=True,
                        choices=[("mmol/L", "mmol/L")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "sodium_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "sodium_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "potassium",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=2, null=True
                    ),
                ),
                (
                    "potassium_units",
                    models.CharField(
                        blank=True,
                        choices=[("mmol/L", "mmol/L")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "potassium_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "potassium_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "magnesium",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                (
                    "magnesium_units",
                    models.CharField(
                        blank=True,
                        choices=[("mg/dL", "mg/dL"), ("mmol/L", "mmol/L")],
                        max_length=25,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "magnesium_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "magnesium_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "alt",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(2999),
                        ],
                        verbose_name="ALT",
                    ),
                ),
                (
                    "alt_units",
                    models.CharField(
                        blank=True,
                        choices=[("IU/L", "IU/L")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "alt_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "alt_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "urea",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                (
                    "urea_units",
                    models.CharField(
                        blank=True,
                        choices=[("mg/dL", "mg/dL"), ("mmol/L", "mmol/L")],
                        max_length=25,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "urea_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "urea_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "cd4",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(999),
                        ],
                        verbose_name="abs CD4",
                    ),
                ),
                (
                    "cd4_units",
                    models.CharField(
                        blank=True,
                        choices=[("cells/mm^3", "cells/mm^3")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "cd4_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "cd4_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "vl",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Viral Load",
                    ),
                ),
                (
                    "vl_units",
                    models.CharField(
                        blank=True,
                        choices=[("copies/mL", "copies/mL")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "vl_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "vl_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "results_abnormal",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Are any of the above results abnormal?",
                    ),
                ),
                (
                    "results_reportable",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        help_text="If YES, this value will open Adverse Event Form.<br/><br/>Note: On Day 1 only abnormal bloods should not be reported as adverseevents.",
                        max_length=25,
                        verbose_name="If any results are abnormal, are results within grade III or above?",
                    ),
                ),
                ("summary", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Blood Result",
                "verbose_name_plural": "Blood Results",
                "abstract": False,
            },
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="Education",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "profession",
                    models.CharField(
                        max_length=25, verbose_name="What is your profession?"
                    ),
                ),
                (
                    "education_years",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How many years of education did you complete?",
                    ),
                ),
                (
                    "education_certificate",
                    models.CharField(
                        max_length=25,
                        verbose_name="What is the your highest education certificate?",
                    ),
                ),
                (
                    "elementary",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Did you go to elementary/primary school?",
                    ),
                ),
                (
                    "attendance_years",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, for how many years?",
                    ),
                ),
                (
                    "secondary",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Did you go to secondary school?",
                    ),
                ),
                (
                    "secondary_years",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, for how many years?",
                    ),
                ),
                (
                    "higher_education",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Did you go to higher education?",
                    ),
                ),
                (
                    "higher_years",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, for how many years?",
                    ),
                ),
                (
                    "household_head",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text='If NO, please complete the form "Health Economics: Education (Person who earns the highest income)" on behalf of the Person who earns the highest income.',
                        max_length=5,
                        verbose_name="Are you the person who earns the highest income?",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "Health Economics: Education",
                "verbose_name_plural": "Health Economics: Education",
                "abstract": False,
            },
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="EducationHoh",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "profession",
                    models.CharField(
                        max_length=25, verbose_name="What is your profession?"
                    ),
                ),
                (
                    "education_years",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How many years of education did you complete?",
                    ),
                ),
                (
                    "education_certificate",
                    models.CharField(
                        max_length=25,
                        verbose_name="What is the your highest education certificate?",
                    ),
                ),
                (
                    "elementary",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Did you go to elementary/primary school?",
                    ),
                ),
                (
                    "attendance_years",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, for how many years?",
                    ),
                ),
                (
                    "secondary",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Did you go to secondary school?",
                    ),
                ),
                (
                    "secondary_years",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, for how many years?",
                    ),
                ),
                (
                    "higher_education",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Did you go to higher education?",
                    ),
                ),
                (
                    "higher_years",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, for how many years?",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "Health Economics: Education (Person who earns the highest income)",
                "verbose_name_plural": "Health Economics: Education (Person who earns the highest income)",
                "abstract": False,
            },
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="FluconazoleMissedDoses",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "flucon_day_missed",
                    models.IntegerField(
                        choices=[
                            (1, "Day 1"),
                            (2, "Day 2"),
                            (3, "Day 3"),
                            (4, "Day 4"),
                            (5, "Day 5"),
                            (6, "Day 6"),
                            (7, "Day 7"),
                            (8, "Day 8"),
                            (9, "Day 9"),
                            (10, "Day 10"),
                            (11, "Day 11"),
                            (12, "Day 12"),
                            (13, "Day 13"),
                            (14, "Day 14"),
                        ],
                        verbose_name="Day missed:",
                    ),
                ),
                (
                    "flucon_missed_reason",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("toxicity", "Toxicity"),
                            ("missed", "Missed"),
                            ("refused", "Refused"),
                            ("not_required", "Not required according to protocol"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        verbose_name="Reason:",
                    ),
                ),
                (
                    "missed_reason_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
            ],
            options={"verbose_name_plural": "Fluconazole Missed Doses"},
        ),
        migrations.CreateModel(
            name="FlucytosineMissedDoses",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "flucy_day_missed",
                    models.IntegerField(
                        choices=[
                            (1, "Day 1"),
                            (2, "Day 2"),
                            (3, "Day 3"),
                            (4, "Day 4"),
                            (5, "Day 5"),
                            (6, "Day 6"),
                            (7, "Day 7"),
                            (8, "Day 8"),
                            (9, "Day 9"),
                            (10, "Day 10"),
                            (11, "Day 11"),
                            (12, "Day 12"),
                            (13, "Day 13"),
                            (14, "Day 14"),
                        ],
                        verbose_name="Day missed:",
                    ),
                ),
                (
                    "flucy_doses_missed",
                    models.IntegerField(
                        choices=[
                            (1, "1 Dose"),
                            (2, "2 Doses"),
                            (3, "3 Doses"),
                            (4, "4 Doses"),
                        ],
                        verbose_name="Doses missed:",
                    ),
                ),
                (
                    "flucy_missed_reason",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("toxicity", "Toxicity"),
                            ("missed", "Missed"),
                            ("refused", "Refused"),
                            ("not_required", "Not required according to protocol"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        verbose_name="Reason:",
                    ),
                ),
                (
                    "missed_reason_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
            ],
            options={"verbose_name_plural": "Flucytosine Missed Doses"},
        ),
        migrations.CreateModel(
            name="FollowUp",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "physical_symptoms",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Physical symptoms",
                    ),
                ),
                (
                    "headache",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Headache",
                    ),
                ),
                (
                    "visual_acuity_left_eye",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=4,
                        null=True,
                        verbose_name="Visual acuity Left Eye",
                    ),
                ),
                (
                    "visual_acuity_right_eye",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=4,
                        null=True,
                        verbose_name="Visual acuity Right Eye",
                    ),
                ),
                (
                    "glasgow_coma_score",
                    models.IntegerField(
                        blank=True,
                        help_text="/15",
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(15),
                            django.core.validators.MinValueValidator(3),
                        ],
                        verbose_name="Glasgow Coma Score",
                    ),
                ),
                (
                    "confusion",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Confusion",
                    ),
                ),
                (
                    "recent_seizure_less_72",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Recent seizure (<72 hrs)",
                    ),
                ),
                (
                    "cn_palsy",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="CN palsy",
                    ),
                ),
                (
                    "behaviour_change",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Behaviour change",
                    ),
                ),
                (
                    "focal_neurology",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Focal neurology",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "fluconazole_dose",
                    models.CharField(
                        choices=[
                            ("800mg_daily", "800mg daily"),
                            ("OTHER", "Other"),
                            ("not_done", "Not done"),
                        ],
                        max_length=25,
                        verbose_name="Fluconazole dose (day prior to visit)",
                    ),
                ),
                (
                    "fluconazole_dose_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name="If other, specify dose:",
                    ),
                ),
                (
                    "rifampicin_started",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("already_on_rifampicin", "Already on Rifampicin"),
                            ("not_done", "Not done"),
                        ],
                        max_length=25,
                        verbose_name="Rifampicin started since last visit?",
                    ),
                ),
                (
                    "rifampicin_start_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Date Rifampicin started",
                    ),
                ),
                (
                    "patient_help",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        help_text="For example eating, drinking, washing, brushing teeth, going to the toilet",
                        max_length=10,
                        verbose_name="Does the patient require help from anybody for everyday activities? ",
                    ),
                ),
                (
                    "patient_problems",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        verbose_name="Has the illness left the patient with any other problems?",
                    ),
                ),
                (
                    "rankin_score",
                    models.CharField(
                        choices=[
                            ("0", "0"),
                            ("1", "1"),
                            ("2", "2"),
                            ("3", "3"),
                            ("4", "4"),
                            ("5", "5"),
                            ("6", "6"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Modified Rankin score",
                    ),
                ),
                (
                    "other_significant_dx",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=5,
                        verbose_name="Other significant diagnosis since last visit?",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "Follow-up",
                "verbose_name_plural": "Follow-up",
                "abstract": False,
            },
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="FollowUpDiagnoses",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "possible_diagnoses",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("pulmonary_tb", "Pulmonary TB"),
                            ("extra_pulmonary_tb", "Extra-pulmonary TB"),
                            ("kaposi_sarcoma", "Kaposi-sarcoma"),
                            ("malaria", "Malaria"),
                            ("bacteraemia", "Bacteraemia"),
                            ("pneumonia", "Pneumonia"),
                            ("diarrhoeal_wasting", "Diarrhoeal wasting"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="Significant diagnoses:",
                    ),
                ),
                (
                    "dx_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Date of diagnosis:",
                    ),
                ),
                (
                    "dx_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other, please specify:",
                    ),
                ),
                (
                    "follow_up",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ambition_subject.FollowUp",
                    ),
                ),
            ],
            options={
                "verbose_name": "Follow-up diagnosis",
                "verbose_name_plural": "Follow-up diagnoses",
            },
        ),
        migrations.CreateModel(
            name="HistoricalAmphotericinMissedDoses",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "ampho_day_missed",
                    models.IntegerField(
                        choices=[
                            (1, "Day 1"),
                            (2, "Day 2"),
                            (3, "Day 3"),
                            (4, "Day 4"),
                            (5, "Day 5"),
                            (6, "Day 6"),
                            (7, "Day 7"),
                            (8, "Day 8"),
                            (9, "Day 9"),
                            (10, "Day 10"),
                            (11, "Day 11"),
                            (12, "Day 12"),
                            (13, "Day 13"),
                            (14, "Day 14"),
                        ],
                        verbose_name="Day missed:",
                    ),
                ),
                (
                    "ampho_missed_reason",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("toxicity", "Toxicity"),
                            ("missed", "Missed"),
                            ("refused", "Refused"),
                            ("not_required", "Not required according to protocol"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        verbose_name="Reason:",
                    ),
                ),
                (
                    "missed_reason_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalBloodResult",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                ("tracking_identifier", models.CharField(db_index=True, max_length=30)),
                ("action_identifier", models.CharField(max_length=25, null=True)),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "bios_crag",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="Gaborone and Blantyre only",
                        max_length=5,
                        verbose_name="Biosynex Semi-quantitative CrAg performed?",
                    ),
                ),
                (
                    "crag_control_result",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="Gaborone and Blantyre only",
                        max_length=5,
                        verbose_name="Control result",
                    ),
                ),
                (
                    "crag_t1_result",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="Gaborone and Blantyre only",
                        max_length=5,
                        verbose_name="T1 result",
                    ),
                ),
                (
                    "crag_t2_result",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="Gaborone and Blantyre only",
                        max_length=5,
                        verbose_name="T2 result",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "ft_assay_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Result Report Date and Time",
                    ),
                ),
                (
                    "cbc_assay_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Result Report Date and Time",
                    ),
                ),
                (
                    "cd4_assay_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Result Report Date and Time",
                    ),
                ),
                (
                    "vl_assay_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Result Report Date and Time",
                    ),
                ),
                (
                    "wbc",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=6,
                        null=True,
                        verbose_name="WBC",
                    ),
                ),
                (
                    "wbc_units",
                    models.CharField(
                        blank=True,
                        choices=[("10^9/L", "10^9/L")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "wbc_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "wbc_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "platelets",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(9999),
                        ],
                    ),
                ),
                (
                    "platelets_units",
                    models.CharField(
                        blank=True,
                        choices=[("10^9/L", "10^9/L")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "platelets_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "platelets_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "haemoglobin",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=6, null=True
                    ),
                ),
                (
                    "haemoglobin_units",
                    models.CharField(
                        blank=True,
                        choices=[("g/dL", "g/dL")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "haemoglobin_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "haemoglobin_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "neutrophil",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                (
                    "neutrophil_units",
                    models.CharField(
                        blank=True,
                        choices=[("10^9/L", "10^9/L")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "neutrophil_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "neutrophil_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "creatinine",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                (
                    "creatinine_units",
                    models.CharField(
                        blank=True,
                        choices=[("mg/dL", "mg/dL"), ("umol/L", "μmol/L")],
                        max_length=25,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "creatinine_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "creatinine_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "sodium",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(999),
                        ],
                    ),
                ),
                (
                    "sodium_units",
                    models.CharField(
                        blank=True,
                        choices=[("mmol/L", "mmol/L")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "sodium_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "sodium_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "potassium",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=2, null=True
                    ),
                ),
                (
                    "potassium_units",
                    models.CharField(
                        blank=True,
                        choices=[("mmol/L", "mmol/L")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "potassium_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "potassium_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "magnesium",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                (
                    "magnesium_units",
                    models.CharField(
                        blank=True,
                        choices=[("mg/dL", "mg/dL"), ("mmol/L", "mmol/L")],
                        max_length=25,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "magnesium_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "magnesium_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "alt",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(2999),
                        ],
                        verbose_name="ALT",
                    ),
                ),
                (
                    "alt_units",
                    models.CharField(
                        blank=True,
                        choices=[("IU/L", "IU/L")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "alt_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "alt_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "urea",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                (
                    "urea_units",
                    models.CharField(
                        blank=True,
                        choices=[("mg/dL", "mg/dL"), ("mmol/L", "mmol/L")],
                        max_length=25,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "urea_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "urea_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "cd4",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(999),
                        ],
                        verbose_name="abs CD4",
                    ),
                ),
                (
                    "cd4_units",
                    models.CharField(
                        blank=True,
                        choices=[("cells/mm^3", "cells/mm^3")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "cd4_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "cd4_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "vl",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="Viral Load",
                    ),
                ),
                (
                    "vl_units",
                    models.CharField(
                        blank=True,
                        choices=[("copies/mL", "copies/mL")],
                        max_length=10,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "vl_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "vl_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("No", "No"),
                            ("3", "Grade 3"),
                            ("4", "Grade 4"),
                            ("Already reported", "Already reported"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "results_abnormal",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Are any of the above results abnormal?",
                    ),
                ),
                (
                    "results_reportable",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        help_text="If YES, this value will open Adverse Event Form.<br/><br/>Note: On Day 1 only abnormal bloods should not be reported as adverseevents.",
                        max_length=25,
                        verbose_name="If any results are abnormal, are results within grade III or above?",
                    ),
                ),
                ("summary", models.TextField(blank=True, null=True)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalEducation",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "profession",
                    models.CharField(
                        max_length=25, verbose_name="What is your profession?"
                    ),
                ),
                (
                    "education_years",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How many years of education did you complete?",
                    ),
                ),
                (
                    "education_certificate",
                    models.CharField(
                        max_length=25,
                        verbose_name="What is the your highest education certificate?",
                    ),
                ),
                (
                    "elementary",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Did you go to elementary/primary school?",
                    ),
                ),
                (
                    "attendance_years",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, for how many years?",
                    ),
                ),
                (
                    "secondary",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Did you go to secondary school?",
                    ),
                ),
                (
                    "secondary_years",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, for how many years?",
                    ),
                ),
                (
                    "higher_education",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Did you go to higher education?",
                    ),
                ),
                (
                    "higher_years",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, for how many years?",
                    ),
                ),
                (
                    "household_head",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text='If NO, please complete the form "Health Economics: Education (Person who earns the highest income)" on behalf of the Person who earns the highest income.',
                        max_length=5,
                        verbose_name="Are you the person who earns the highest income?",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalEducationHoh",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "profession",
                    models.CharField(
                        max_length=25, verbose_name="What is your profession?"
                    ),
                ),
                (
                    "education_years",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How many years of education did you complete?",
                    ),
                ),
                (
                    "education_certificate",
                    models.CharField(
                        max_length=25,
                        verbose_name="What is the your highest education certificate?",
                    ),
                ),
                (
                    "elementary",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Did you go to elementary/primary school?",
                    ),
                ),
                (
                    "attendance_years",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, for how many years?",
                    ),
                ),
                (
                    "secondary",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Did you go to secondary school?",
                    ),
                ),
                (
                    "secondary_years",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, for how many years?",
                    ),
                ),
                (
                    "higher_education",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Did you go to higher education?",
                    ),
                ),
                (
                    "higher_years",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, for how many years?",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalFluconazoleMissedDoses",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "flucon_day_missed",
                    models.IntegerField(
                        choices=[
                            (1, "Day 1"),
                            (2, "Day 2"),
                            (3, "Day 3"),
                            (4, "Day 4"),
                            (5, "Day 5"),
                            (6, "Day 6"),
                            (7, "Day 7"),
                            (8, "Day 8"),
                            (9, "Day 9"),
                            (10, "Day 10"),
                            (11, "Day 11"),
                            (12, "Day 12"),
                            (13, "Day 13"),
                            (14, "Day 14"),
                        ],
                        verbose_name="Day missed:",
                    ),
                ),
                (
                    "flucon_missed_reason",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("toxicity", "Toxicity"),
                            ("missed", "Missed"),
                            ("refused", "Refused"),
                            ("not_required", "Not required according to protocol"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        verbose_name="Reason:",
                    ),
                ),
                (
                    "missed_reason_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalFlucytosineMissedDoses",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "flucy_day_missed",
                    models.IntegerField(
                        choices=[
                            (1, "Day 1"),
                            (2, "Day 2"),
                            (3, "Day 3"),
                            (4, "Day 4"),
                            (5, "Day 5"),
                            (6, "Day 6"),
                            (7, "Day 7"),
                            (8, "Day 8"),
                            (9, "Day 9"),
                            (10, "Day 10"),
                            (11, "Day 11"),
                            (12, "Day 12"),
                            (13, "Day 13"),
                            (14, "Day 14"),
                        ],
                        verbose_name="Day missed:",
                    ),
                ),
                (
                    "flucy_doses_missed",
                    models.IntegerField(
                        choices=[
                            (1, "1 Dose"),
                            (2, "2 Doses"),
                            (3, "3 Doses"),
                            (4, "4 Doses"),
                        ],
                        verbose_name="Doses missed:",
                    ),
                ),
                (
                    "flucy_missed_reason",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("toxicity", "Toxicity"),
                            ("missed", "Missed"),
                            ("refused", "Refused"),
                            ("not_required", "Not required according to protocol"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        verbose_name="Reason:",
                    ),
                ),
                (
                    "missed_reason_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalFollowUp",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "physical_symptoms",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Physical symptoms",
                    ),
                ),
                (
                    "headache",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Headache",
                    ),
                ),
                (
                    "visual_acuity_left_eye",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=4,
                        null=True,
                        verbose_name="Visual acuity Left Eye",
                    ),
                ),
                (
                    "visual_acuity_right_eye",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=4,
                        null=True,
                        verbose_name="Visual acuity Right Eye",
                    ),
                ),
                (
                    "glasgow_coma_score",
                    models.IntegerField(
                        blank=True,
                        help_text="/15",
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(15),
                            django.core.validators.MinValueValidator(3),
                        ],
                        verbose_name="Glasgow Coma Score",
                    ),
                ),
                (
                    "confusion",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Confusion",
                    ),
                ),
                (
                    "recent_seizure_less_72",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Recent seizure (<72 hrs)",
                    ),
                ),
                (
                    "cn_palsy",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="CN palsy",
                    ),
                ),
                (
                    "behaviour_change",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Behaviour change",
                    ),
                ),
                (
                    "focal_neurology",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Focal neurology",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "fluconazole_dose",
                    models.CharField(
                        choices=[
                            ("800mg_daily", "800mg daily"),
                            ("OTHER", "Other"),
                            ("not_done", "Not done"),
                        ],
                        max_length=25,
                        verbose_name="Fluconazole dose (day prior to visit)",
                    ),
                ),
                (
                    "fluconazole_dose_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name="If other, specify dose:",
                    ),
                ),
                (
                    "rifampicin_started",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("already_on_rifampicin", "Already on Rifampicin"),
                            ("not_done", "Not done"),
                        ],
                        max_length=25,
                        verbose_name="Rifampicin started since last visit?",
                    ),
                ),
                (
                    "rifampicin_start_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Date Rifampicin started",
                    ),
                ),
                (
                    "patient_help",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        help_text="For example eating, drinking, washing, brushing teeth, going to the toilet",
                        max_length=10,
                        verbose_name="Does the patient require help from anybody for everyday activities? ",
                    ),
                ),
                (
                    "patient_problems",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        verbose_name="Has the illness left the patient with any other problems?",
                    ),
                ),
                (
                    "rankin_score",
                    models.CharField(
                        choices=[
                            ("0", "0"),
                            ("1", "1"),
                            ("2", "2"),
                            ("3", "3"),
                            ("4", "4"),
                            ("5", "5"),
                            ("6", "6"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Modified Rankin score",
                    ),
                ),
                (
                    "other_significant_dx",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=5,
                        verbose_name="Other significant diagnosis since last visit?",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalFollowUpDiagnoses",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "possible_diagnoses",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("pulmonary_tb", "Pulmonary TB"),
                            ("extra_pulmonary_tb", "Extra-pulmonary TB"),
                            ("kaposi_sarcoma", "Kaposi-sarcoma"),
                            ("malaria", "Malaria"),
                            ("bacteraemia", "Bacteraemia"),
                            ("pneumonia", "Pneumonia"),
                            ("diarrhoeal_wasting", "Diarrhoeal wasting"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="Significant diagnoses:",
                    ),
                ),
                (
                    "dx_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Date of diagnosis:",
                    ),
                ),
                (
                    "dx_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other, please specify:",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "follow_up",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ambition_subject.FollowUp",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalLumbarPunctureCsf",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "bios_crag",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="Gaborone and Blantyre only",
                        max_length=5,
                        verbose_name="Biosynex Semi-quantitative CrAg performed?",
                    ),
                ),
                (
                    "crag_control_result",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="Gaborone and Blantyre only",
                        max_length=5,
                        verbose_name="Control result",
                    ),
                ),
                (
                    "crag_t1_result",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="Gaborone and Blantyre only",
                        max_length=5,
                        verbose_name="T1 result",
                    ),
                ),
                (
                    "crag_t2_result",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="Gaborone and Blantyre only",
                        max_length=5,
                        verbose_name="T2 result",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "qc_assay_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="QC Result Report Date and Time",
                    ),
                ),
                (
                    "csf_assay_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="CSF Result Report Date and Time",
                    ),
                ),
                (
                    "reason_for_lp",
                    models.CharField(
                        choices=[
                            ("scheduled_per_protocol", "Scheduled per protocol"),
                            ("therapeutic_lp", "Therapeutic LP"),
                            ("clincal_deterioration", "Clinical deterioration"),
                        ],
                        max_length=50,
                        verbose_name="Reason for LP",
                    ),
                ),
                (
                    "opening_pressure",
                    models.IntegerField(
                        help_text="Units cm of H<sub>2</sub>O",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(99),
                        ],
                    ),
                ),
                (
                    "closing_pressure",
                    models.IntegerField(
                        help_text="Units cm of H<sub>2</sub>O",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(99),
                        ],
                    ),
                ),
                (
                    "csf_amount_removed",
                    models.IntegerField(
                        blank=True,
                        help_text="Units ml",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="CSF amount removed ",
                    ),
                ),
                (
                    "quantitative_culture",
                    models.IntegerField(
                        blank=True,
                        help_text="Units CFU/ml",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(9999999),
                        ],
                    ),
                ),
                (
                    "csf_culture",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("awaiting_results", "Awaiting results"),
                            ("not_done", "Not done"),
                        ],
                        default="awaiting_results",
                        help_text="Complete after getting the results.",
                        max_length=18,
                        verbose_name="Other organism (non-Cryptococcus)",
                    ),
                ),
                (
                    "other_csf_culture",
                    models.CharField(
                        blank=True,
                        max_length=75,
                        null=True,
                        verbose_name="If YES, specify organism:",
                    ),
                ),
                (
                    "csf_wbc_cell_count",
                    models.IntegerField(
                        blank=True,
                        help_text="acceptable units are mm<sup>3</sup>",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999),
                        ],
                        verbose_name="Total CSF WBC cell count:",
                    ),
                ),
                (
                    "differential_lymphocyte_count",
                    models.IntegerField(
                        blank=True,
                        help_text="acceptable units are mm<sup>3</sup> or %",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999),
                        ],
                        verbose_name="Differential lymphocyte cell count:",
                    ),
                ),
                (
                    "differential_lymphocyte_unit",
                    models.CharField(
                        blank=True,
                        choices=[("mm3", "mm<sup>3</sup>"), ("%", "%")],
                        max_length=6,
                        null=True,
                    ),
                ),
                (
                    "differential_neutrophil_count",
                    models.IntegerField(
                        blank=True,
                        help_text="acceptable units are mm<sup>3</sup> or %",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999),
                        ],
                        verbose_name="Differential neutrophil cell count:",
                    ),
                ),
                (
                    "differential_neutrophil_unit",
                    models.CharField(
                        blank=True,
                        choices=[("mm3", "mm<sup>3</sup>"), ("%", "%")],
                        max_length=6,
                        null=True,
                    ),
                ),
                (
                    "india_ink",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("IND", "Indeterminate"),
                            ("not_done", "Not done"),
                        ],
                        max_length=15,
                        null=True,
                    ),
                ),
                (
                    "csf_glucose",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Units in mmol/L or mg/dL",
                        max_digits=3,
                        null=True,
                        verbose_name="CSF glucose:",
                    ),
                ),
                (
                    "csf_glucose_units",
                    models.CharField(
                        blank=True,
                        choices=[("mg/dL", "mg/dL"), ("mmol/L", "mmol/L")],
                        max_length=6,
                        null=True,
                        verbose_name="CSF glucose units:",
                    ),
                ),
                (
                    "csf_protein",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Units in g/dL",
                        max_digits=4,
                        null=True,
                        verbose_name="CSF protein:",
                    ),
                ),
                (
                    "csf_cr_ag",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("IND", "Indeterminate"),
                            ("not_done", "Not done"),
                        ],
                        max_length=15,
                        null=True,
                        verbose_name="CSF CrAg:",
                    ),
                ),
                (
                    "csf_cr_ag_lfa",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=5,
                        verbose_name="CSF CrAg done by CSF CrAg LFA:",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalMedicalExpenses",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "info_source",
                    models.CharField(
                        choices=[
                            ("patient", "Patient"),
                            ("next_of_kin", "Next of Kin/Relative"),
                        ],
                        max_length=25,
                        verbose_name="What is the main source of this information?",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("botswana_pula", "Botswana Pula"),
                            ("malawian_kwacha", "Malawian Kwacha"),
                            ("south_african_rand", "South African Rand"),
                            ("ugandan_shilling", "Ugandan Shilling"),
                            ("us_dollar", "US Dollar"),
                            ("zimbabwean_dollar", "Zimbabwean Dollar"),
                        ],
                        max_length=20,
                        verbose_name="Which currency do you use?",
                    ),
                ),
                (
                    "food_spend",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much do you/your family spend on food in a week?",
                    ),
                ),
                (
                    "utilities_spend",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much do you/your family spent on rent and utilities a month?",
                    ),
                ),
                (
                    "item_spend",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much have you spent on large items (e.g. furniture, electrical items, cars) in the last year?",
                    ),
                ),
                (
                    "subject_spent_last_4wks",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Over that last 4 weeks, how much have you spent on activities relating to your health?",
                    ),
                ),
                (
                    "someone_spent_last_4wks",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Over that last 4 weeks, how much has someone else spent on activities relating to your health?",
                    ),
                ),
                (
                    "total_spent_last_4wks",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=16,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much in total has been spent on your healthcare in the last 4 weeks?",
                    ),
                ),
                (
                    "care_before_hospital",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If YES, please complete medical expenses part 2",
                        max_length=5,
                        verbose_name="Have you received any treatment or care for your present condition, before coming to the hospital?",
                    ),
                ),
                (
                    "duration_present_condition",
                    models.IntegerField(
                        help_text="in days",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="How long have you been sick with your current condition?",
                    ),
                ),
                (
                    "activities_missed",
                    models.CharField(
                        choices=[
                            ("working", "Working"),
                            ("studying", "Studying"),
                            ("caring_for_children", "Caring for children"),
                            ("maintaining_house", "Maintaining the house"),
                            ("nothing", "Nothing"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="What would you have been doing if you were not sick with your present condition",
                    ),
                ),
                (
                    "activities_missed_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "time_off_work",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="in days",
                        max_digits=4,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much time did you take off work?",
                    ),
                ),
                (
                    "carer_time_off",
                    models.IntegerField(
                        blank=True,
                        help_text="in days",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much time did a caring family member take to accompany you to the hospital?",
                    ),
                ),
                (
                    "loss_of_earnings",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=5,
                        verbose_name="Did you lose earnings as a result?",
                    ),
                ),
                (
                    "earnings_lost_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much did you lose?",
                    ),
                ),
                (
                    "form_of_transport",
                    models.CharField(
                        choices=[
                            ("bus", "Bus"),
                            ("train", "Train"),
                            ("ambulance", "Ambulance"),
                            ("private_taxi", "Private taxi"),
                            ("hired_motorbike", "Hired motorbike"),
                            ("own_car", "Own car"),
                            ("own_motorbike", "Own motorbike"),
                            ("bicycle", "Bicycle"),
                            ("foot", "Foot"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="Which form of transport did you take to get here today?",
                    ),
                ),
                (
                    "transport_fare",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much did you spend on the transport (in total)?",
                    ),
                ),
                (
                    "travel_time",
                    models.CharField(
                        blank=True,
                        help_text="Specify as hours:minutes (format HH:MM)",
                        max_length=8,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^([0-9]{1,3}:[0-5][0-9])$",
                                message="Enter a valid time in hour:minutes format",
                            )
                        ],
                        verbose_name="How long did it take you to reach there?",
                    ),
                ),
                (
                    "loans",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Did you take out any loans to pay for your healthcare?",
                    ),
                ),
                (
                    "sold_anything",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Did you sell anything to pay for your healthcare?",
                    ),
                ),
                (
                    "private_healthcare",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Do you have private healthcare insurance?",
                    ),
                ),
                (
                    "healthcare_insurance",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=5,
                        verbose_name="Did you use it to help pay for your healthcare?",
                    ),
                ),
                (
                    "welfare",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Do you receive any welfare or social service support?",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalMedicalExpensesTwo",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalMedicalExpensesTwoDetail",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "location_care",
                    models.CharField(
                        choices=[
                            ("government_healthcare", "Government healthcare"),
                            ("private_healthcare", "Private healthcare"),
                            ("ngo_healthcare", "NGO healthcare"),
                            ("pharmacy", "Pharmacy"),
                            ("home", "Home"),
                            ("OTHER", "Other"),
                        ],
                        max_length=35,
                        verbose_name="Where did you receive treatment or care?",
                    ),
                ),
                (
                    "location_care_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "transport_form",
                    models.CharField(
                        choices=[
                            ("bus", "Bus"),
                            ("train", "Train"),
                            ("ambulance", "Ambulance"),
                            ("private_taxi", "Private taxi"),
                            ("hired_motorbike", "Hired motorbike"),
                            ("own_car", "Own car"),
                            ("own_motorbike", "Own motorbike"),
                            ("bicycle", "Bicycle"),
                            ("foot", "Foot"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=20,
                        verbose_name="Which form of transport did you take to reach there?",
                    ),
                ),
                (
                    "transport_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much did you spend on the transport (return)?",
                    ),
                ),
                (
                    "transport_duration",
                    models.CharField(
                        blank=True,
                        help_text="Specify as hours:minutes (format HH:MM)",
                        max_length=8,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^([0-9]{1,3}:[0-5][0-9])$",
                                message="Enter a valid time in hour:minutes format",
                            )
                        ],
                        verbose_name="How long did it take you to reach there?",
                    ),
                ),
                (
                    "care_provider",
                    models.CharField(
                        choices=[
                            ("doctor", "Doctor"),
                            ("clinical_officer", "Clinical Officer"),
                            ("nurse", "Nurse"),
                            ("traditional_healer", "Traditional Healer"),
                            ("spiritual_healer", "Spiritual Healer"),
                            ("family/friend", "Family/Friend"),
                            ("pharmacist", "Pharmacist"),
                            ("OTHER", "Other"),
                        ],
                        max_length=35,
                        verbose_name="Who provided treatment or care during that visit?",
                    ),
                ),
                (
                    "care_provider_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "paid_treatment",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Did you pay for the consultation you received during that visit",
                    ),
                ),
                (
                    "paid_treatment_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much did you pay for this visit?",
                    ),
                ),
                (
                    "medication_bought",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Did you buy other medication for relief?",
                    ),
                ),
                (
                    "medication_payment",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much did you pay?",
                    ),
                ),
                (
                    "other_place_visited",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text='If YES, click "Add another Medical Expenses Part 2: Detail" below.',
                        max_length=15,
                        verbose_name="Before this, did you go to another place for the treatment of the present situation?",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalMicrobiology",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "urine_culture_performed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="only for patients with >50 white cells in urine",
                        max_length=5,
                    ),
                ),
                (
                    "urine_taken_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            edc_protocol.validators.date_not_before_study_start,
                            edc_model.validators.date.date_not_future,
                        ],
                    ),
                ),
                (
                    "urine_culture_results",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("no_growth", "No growth"),
                            ("POS", "Positive"),
                        ],
                        default="N/A",
                        max_length=10,
                        verbose_name="Urine culture results, if completed",
                    ),
                ),
                (
                    "urine_culture_organism",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("e_coli", "E.coli"),
                            ("klebsiella_sp", "Klebsiella spp."),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="If positive, organism",
                    ),
                ),
                (
                    "urine_culture_organism_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "blood_culture_performed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=5
                    ),
                ),
                (
                    "blood_culture_results",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("no_growth", "No growth"),
                            ("POS", "Positive"),
                        ],
                        default="N/A",
                        max_length=10,
                        verbose_name="Blood culture results, if completed",
                    ),
                ),
                (
                    "blood_taken_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            edc_protocol.validators.date_not_before_study_start,
                            edc_model.validators.date.date_not_future,
                        ],
                    ),
                ),
                (
                    "day_blood_taken",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If positive, study day positive culture sample taken",
                    ),
                ),
                (
                    "blood_culture_organism",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("cryptococcus_neoformans", "Cryptococcus neoformans"),
                            ("bacteria", "Bacteria"),
                            ("bacteria_and_cryptococcus", "Bacteria and Cryptococcus"),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=50,
                        verbose_name="If growth positive, organism",
                    ),
                ),
                (
                    "blood_culture_organism_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "bacteria_identified",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("e_coli", "E.coli"),
                            ("klebsiella_sp", "Klebsiella spp."),
                            ("streptococcus_pneumoniae", "Streptococcus pneumoniae"),
                            (
                                "staphylococus_aureus",
                                "(Sensitive) Staphylococus aureus",
                            ),
                            ("mrsa", "MRSA"),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=50,
                        verbose_name="If bacteria, type",
                    ),
                ),
                (
                    "bacteria_identified_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "sputum_afb_performed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="Was sputum AFB done?",
                        max_length=5,
                        verbose_name="AFB microscopy performed?",
                    ),
                ),
                (
                    "sputum_afb_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            edc_protocol.validators.date_not_before_study_start,
                            edc_model.validators.date.date_not_future,
                        ],
                    ),
                ),
                (
                    "sputum_results_afb",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=10,
                        verbose_name="AFB results",
                    ),
                ),
                (
                    "sputum_performed",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=15,
                        verbose_name="Culture performed?",
                    ),
                ),
                (
                    "sputum_taken_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            edc_protocol.validators.date_not_before_study_start,
                            edc_model.validators.date.date_not_future,
                        ],
                    ),
                ),
                (
                    "sputum_results_culture",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=10,
                        verbose_name="Culture results",
                    ),
                ),
                (
                    "sputum_results_positive",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If culture is positive, please specify:",
                    ),
                ),
                (
                    "sputum_genexpert_performed",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=15,
                        verbose_name="Sputum Gene-Xpert performed?",
                    ),
                ),
                (
                    "sputum_genexpert_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            edc_protocol.validators.date_not_before_study_start,
                            edc_model.validators.date.date_not_future,
                        ],
                        verbose_name="Date sputum Gene-Xpert taken",
                    ),
                ),
                (
                    "sputum_result_genexpert",
                    models.CharField(
                        choices=[
                            (
                                "mtb_detected_rif_resistance_detected",
                                "MTB DETECTED & Rif Resistance DETECTED",
                            ),
                            (
                                "mtb_detected_rif_resistance_not_detected",
                                "MTB DETECTED & Rif Resistance NOT detected",
                            ),
                            (
                                "mtb_detected_rif_resistance_indeterminate",
                                "MTB DETECTED & Rif Resistance INDETERMINATE",
                            ),
                            ("mtb_not_detected", "MTB NOT detected"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=45,
                        verbose_name="Gene-Xpert results",
                    ),
                ),
                (
                    "tissue_biopsy_taken",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=5
                    ),
                ),
                (
                    "tissue_biopsy_results",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("no_growth", "No growth"),
                            ("POS", "Positive"),
                        ],
                        default="N/A",
                        max_length=10,
                        verbose_name="If YES, results",
                    ),
                ),
                (
                    "biopsy_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            edc_protocol.validators.date_not_before_study_start,
                            edc_model.validators.date.date_not_future,
                        ],
                    ),
                ),
                (
                    "day_biopsy_taken",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If positive, Study day positive culture sample taken",
                    ),
                ),
                (
                    "tissue_biopsy_organism",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("cryptococcus_neoformans", "Cryptococcus neoformans"),
                            (
                                "mycobacterium_tuberculosis",
                                "Mycobacterium Tuberculosis",
                            ),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=50,
                        verbose_name="If growth positive, organism",
                    ),
                ),
                (
                    "tissue_biopsy_organism_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                ("histopathology_report", models.TextField(blank=True, null=True)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalPatientHistory",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "headache_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If headache, how many days did it last?",
                    ),
                ),
                (
                    "visual_loss_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If visual loss, how many days did it last?",
                    ),
                ),
                (
                    "tb_history",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Previous medical history of Tuberculosis?",
                    ),
                ),
                (
                    "tb_site",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("pulmonary", "Pulmonary"),
                            ("extra_pulmonary", "Extra-pulmonary"),
                            ("both", "Both"),
                        ],
                        default="N/A",
                        max_length=15,
                        verbose_name="If YES, site of TB?",
                    ),
                ),
                (
                    "tb_treatment",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Are you currently taking TB treatment?",
                    ),
                ),
                (
                    "taking_rifampicin",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=5,
                        verbose_name="If YES, are you currently also taking Rifampicin?",
                    ),
                ),
                (
                    "rifampicin_started_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="If YES, when did you first start taking Rifampicin?",
                    ),
                ),
                (
                    "new_hiv_diagnosis",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Is this a new HIV diagnosis?",
                    ),
                ),
                (
                    "taking_arv",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=5,
                        verbose_name="If NO, already taking ARVs?",
                    ),
                ),
                (
                    "arv_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="If YES, date ARVs were started.",
                    ),
                ),
                (
                    "arv_date_estimated",
                    edc_model_fields.fields.date_estimated.IsDateEstimatedFieldNa(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("not_estimated", "No."),
                            ("D", "Yes, estimated the Day"),
                            ("MD", "Yes, estimated Month and Day"),
                            ("YMD", "Yes, estimated Year, Month and Day"),
                        ],
                        default="N/A",
                        help_text="If the exact date is not known, please indicate which part of the date is estimated.",
                        max_length=25,
                        verbose_name="Is the subject's ARV date estimated?",
                    ),
                ),
                (
                    "first_arv_regimen",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            (
                                "TDF_3TC_FTC_with_EFV_or_NVP",
                                "TDF + 3TC/FTC + either EFV or NVP or DTG",
                            ),
                            (
                                "AZT_3TC_with_EFV_NVP_or_DTG",
                                "AZT+3TC+ either EFV or NVP or DTG",
                            ),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=50,
                        verbose_name="Drug used in first line ARV regimen",
                    ),
                ),
                (
                    "first_arv_regimen_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "second_arv_regimen",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            (
                                "TDF_3TC_FTC_with_ATZ_r_or_Lopinavir_r",
                                "TDF + 3TC/FTC + either ATZ/r or Lopinavir/r",
                            ),
                            (
                                "AZT_3TC_with_ATZ_r_or_Lopinavir_r",
                                "AZT +3TC + either ATZ/r or Lopinavir/r",
                            ),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=50,
                        verbose_name="Second line ARV regimen",
                    ),
                ),
                (
                    "second_arv_regimen_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "first_line_choice",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("EFV", "EFV"),
                            ("DTG", "DTG"),
                            ("NVP", "NVP"),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=5,
                        verbose_name="If first line:",
                    ),
                ),
                (
                    "patient_adherence",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=5,
                        verbose_name="Is the patient reportedly adherent?",
                    ),
                ),
                (
                    "tablets_missed",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(31),
                        ],
                        verbose_name="If not adherent, how many tablets missed in the last month?",
                    ),
                ),
                (
                    "last_dose",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="If no tablets taken this month, how many months since the last dose taken?",
                    ),
                ),
                (
                    "last_viral_load",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="copies/mL",
                        max_digits=10,
                        null=True,
                        verbose_name="Last Viral Load, if known?",
                    ),
                ),
                (
                    "viral_load_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Viral Load date",
                    ),
                ),
                (
                    "vl_date_estimated",
                    edc_model_fields.fields.date_estimated.IsDateEstimatedFieldNa(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("not_estimated", "No."),
                            ("D", "Yes, estimated the Day"),
                            ("MD", "Yes, estimated Month and Day"),
                            ("YMD", "Yes, estimated Year, Month and Day"),
                        ],
                        default="N/A",
                        help_text="If the exact date is not known, please indicate which part of the date is estimated.",
                        max_length=25,
                        verbose_name="Is the subject's Viral Load date estimated?",
                    ),
                ),
                (
                    "last_cd4",
                    models.IntegerField(
                        blank=True,
                        help_text="acceptable units are mm<sup>3</sup>",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(2500),
                        ],
                        verbose_name="Last CD4, if known?",
                    ),
                ),
                (
                    "cd4_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="CD4 date",
                    ),
                ),
                (
                    "cd4_date_estimated",
                    edc_model_fields.fields.date_estimated.IsDateEstimatedFieldNa(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("not_estimated", "No."),
                            ("D", "Yes, estimated the Day"),
                            ("MD", "Yes, estimated Month and Day"),
                            ("YMD", "Yes, estimated Year, Month and Day"),
                        ],
                        default="N/A",
                        help_text="If the exact date is not known, please indicate which part of the date is estimated.",
                        max_length=25,
                        verbose_name="Is the subject's CD4 date estimated?",
                    ),
                ),
                (
                    "temp",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="in degrees Celcius",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(30),
                            django.core.validators.MaxValueValidator(45),
                        ],
                        verbose_name="Temperature:",
                    ),
                ),
                (
                    "heart_rate",
                    models.IntegerField(
                        help_text="bpm",
                        validators=[
                            django.core.validators.MinValueValidator(30),
                            django.core.validators.MaxValueValidator(200),
                        ],
                        verbose_name="Heart rate:",
                    ),
                ),
                (
                    "sys_blood_pressure",
                    models.IntegerField(
                        help_text="in mm. format SYS, e.g. 120",
                        validators=[
                            django.core.validators.MinValueValidator(50),
                            django.core.validators.MaxValueValidator(220),
                        ],
                        verbose_name="Blood pressure: systolic",
                    ),
                ),
                (
                    "dia_blood_pressure",
                    models.IntegerField(
                        help_text="in Hg. format DIA, e.g. 80",
                        validators=[
                            django.core.validators.MinValueValidator(20),
                            django.core.validators.MaxValueValidator(150),
                        ],
                        verbose_name="Blood pressure: diastolic",
                    ),
                ),
                (
                    "respiratory_rate",
                    models.IntegerField(
                        help_text="breaths/min",
                        validators=[
                            django.core.validators.MinValueValidator(6),
                            django.core.validators.MaxValueValidator(50),
                        ],
                        verbose_name="Respiratory rate:",
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="kg",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(20),
                            django.core.validators.MaxValueValidator(150),
                        ],
                        verbose_name="Weight:",
                    ),
                ),
                (
                    "weight_determination",
                    models.CharField(
                        choices=[("estimated", "Estimated"), ("measured", "Measured")],
                        max_length=15,
                        verbose_name="Is weight estimated or measured?",
                    ),
                ),
                (
                    "glasgow_coma_score",
                    models.IntegerField(
                        help_text="/15",
                        validators=[
                            django.core.validators.MinValueValidator(3),
                            django.core.validators.MaxValueValidator(15),
                        ],
                        verbose_name="Glasgow Coma Score:",
                    ),
                ),
                (
                    "neurological_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name='If "Other CN palsy", specify',
                    ),
                ),
                (
                    "focal_neurologic_deficit",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name='If "Focal neurologic deficit" chosen, please specify details:',
                    ),
                ),
                (
                    "visual_acuity_day",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Study day visual acuity recorded?",
                    ),
                ),
                (
                    "left_acuity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=4,
                        null=True,
                        verbose_name="Visual acuity left eye:",
                    ),
                ),
                (
                    "right_acuity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=4,
                        null=True,
                        verbose_name="Visual acuity right eye",
                    ),
                ),
                (
                    "ecog_score",
                    models.CharField(
                        choices=[
                            (
                                "0",
                                "Fully active, able to carry on all pre-disease performance without restriction",
                            ),
                            (
                                "1",
                                "Restricted in physically strenuous activity but ambulatory and able to carry out work of a light or sedentary nature, e.g., light house work, office work",
                            ),
                            (
                                "2",
                                "Ambulatory and capable of all self-care but unable to carry out any work activities; up and about more than 50% of waking hours ",
                            ),
                            (
                                "3",
                                "Capable of only limited self-care; confined to bed or chair more than 50% of waking hours",
                            ),
                            (
                                "4",
                                "Completely disabled; cannot carry on any self-care; totally confined to bed or chair",
                            ),
                            ("5", "Deceased"),
                        ],
                        max_length=15,
                        verbose_name="ECOG Disability Score",
                    ),
                ),
                (
                    "ecog_score_value",
                    models.CharField(
                        choices=[
                            (
                                "0",
                                "Fully active, able to carry on all pre-disease performance without restriction",
                            ),
                            (
                                "1",
                                "Restricted in physically strenuous activity but ambulatory and able to carry out work of a light or sedentary nature, e.g., light house work, office work",
                            ),
                            (
                                "2",
                                "Ambulatory and capable of all self-care but unable to carry out any work activities; up and about more than 50% of waking hours ",
                            ),
                            (
                                "3",
                                "Capable of only limited self-care; confined to bed or chair more than 50% of waking hours",
                            ),
                            (
                                "4",
                                "Completely disabled; cannot carry on any self-care; totally confined to bed or chair",
                            ),
                            ("5", "Deceased"),
                        ],
                        max_length=15,
                        verbose_name="ECOG Score",
                    ),
                ),
                (
                    "lung_exam",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Abnormal lung exam:",
                    ),
                ),
                (
                    "cryptococcal_lesions",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Cryptococcal related skin lesions:",
                    ),
                ),
                (
                    "specify_medications_other",
                    models.TextField(blank=True, max_length=150, null=True),
                ),
                (
                    "previous_oi",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Previous opportunistic infection other than TB?",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalPkPdCrf",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "albumin",
                    models.IntegerField(
                        blank=True,
                        help_text="Units in g/L",
                        null=True,
                        verbose_name="Albumin",
                    ),
                ),
                (
                    "ambisome_dose",
                    models.IntegerField(
                        blank=True,
                        help_text="Units in mg",
                        null=True,
                        verbose_name="Ambisome dose given",
                    ),
                ),
                (
                    "ambisome_started_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time Ambisome infusion started?",
                    ),
                ),
                (
                    "ambisome_ended_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time Ambisome infusion stopped",
                    ),
                ),
                (
                    "full_ambisome_dose_given",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        null=True,
                        verbose_name="Was the entire Ambisome dose given?",
                    ),
                ),
                (
                    "flucytosine_dose",
                    models.IntegerField(
                        blank=True,
                        help_text="Units in mg",
                        null=True,
                        verbose_name="What was the dose of Flucytosine given?",
                    ),
                ),
                (
                    "flucytosine_dose_one_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time Flucytosine <u>DOSE&nbsp;1</u> was swallowed?",
                    ),
                ),
                (
                    "flucytosine_dose_two_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time Flucytosine <u>DOSE&nbsp;2</u> was swallowed?",
                    ),
                ),
                (
                    "flucytosine_dose_three_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time Flucytosine <u>DOSE&nbsp;3</u> was swallowed?",
                    ),
                ),
                (
                    "flucytosine_dose_four_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time Flucytosine <u>DOSE&nbsp;4</u> was swallowed?",
                    ),
                ),
                (
                    "flucytosine_missed",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        null=True,
                        verbose_name="Were any Flucytosine doses missed?",
                    ),
                ),
                (
                    "reason_flucytosine_dose_missed",
                    models.CharField(
                        blank=True,
                        max_length=75,
                        null=True,
                        verbose_name="Why was/were the dose(s) missed?",
                    ),
                ),
                (
                    "fluconazole_dose_given",
                    models.IntegerField(
                        blank=True,
                        help_text="Units in mg",
                        null=True,
                        verbose_name="What was the dose of Fluconazole given?",
                    ),
                ),
                (
                    "fluconazole_dose_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time Fluconazole was swallowed?",
                    ),
                ),
                (
                    "fluconazole_dose_missed",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        null=True,
                        verbose_name="Was the Fluconazole dose missed?",
                    ),
                ),
                (
                    "reason_fluconazole_dose_missed",
                    models.CharField(
                        blank=True,
                        max_length=75,
                        null=True,
                        verbose_name="Why was the Fluconazole dose missed?",
                    ),
                ),
                (
                    "blood_sample_one_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time blood <u>SAMPLE&nbsp;1</u> taken?",
                    ),
                ),
                (
                    "blood_sample_two_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time blood <u>SAMPLE&nbsp;2</u> taken?",
                    ),
                ),
                (
                    "blood_sample_three_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time blood <u>SAMPLE&nbsp;3</u> taken?",
                    ),
                ),
                (
                    "blood_sample_four_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time blood <u>SAMPLE&nbsp;4</u> taken?",
                    ),
                ),
                (
                    "blood_sample_five_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time blood <u>SAMPLE&nbsp;5</u> taken?",
                    ),
                ),
                (
                    "blood_sample_six_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time blood <u>SAMPLE&nbsp;6</u> taken?",
                    ),
                ),
                (
                    "blood_sample_missed",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        null=True,
                        verbose_name="Were any blood samples missed?",
                    ),
                ),
                (
                    "reason_blood_sample_missed",
                    models.CharField(
                        blank=True,
                        max_length=75,
                        null=True,
                        verbose_name="Why was/were the blood sample(s) missed??",
                    ),
                ),
                (
                    "pre_dose_lp",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        null=True,
                        verbose_name="Is this a pre-dose LP?",
                    ),
                ),
                (
                    "post_dose_lp",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        null=True,
                        verbose_name="Is this a post-dose LP?",
                    ),
                ),
                (
                    "time_csf_sample_taken",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="What date and time was the CSF sample taken?",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalPkPdExtraSamples",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "extra_csf_samples_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="If any further CSF samples were taken, please add here the exact date and time sample was taken",
                    ),
                ),
                (
                    "extra_blood_samples_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="If any further blood samples were taken, please add here the exact date and time sample was taken",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalPreviousOpportunisticInfection",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "previous_non_tb_oi",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("kaposi_sarcoma", "Kaposi Sarcoma"),
                            ("herpes_zoster_virus", "Herpes-Zoster virus"),
                            ("oesophageal_candidiasis", "Oesophageal Candidiasis"),
                            ("PCP", "PCP"),
                            ("cytomegalovirus", "Cytomegalovirus"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        verbose_name="If other previous opportunistic infection, please specify.",
                    ),
                ),
                (
                    "previous_non_tb_oi_other",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "previous_non_tb_oi_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="If infection, what was the date?",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalRadiology",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "cxr_done",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Is CXR done",
                    ),
                ),
                (
                    "cxr_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="If yes, when was CXR done",
                    ),
                ),
                (
                    "cxr_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Description/Comments"
                    ),
                ),
                (
                    "ct_performed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="CT/MRI brain scan performed?",
                    ),
                ),
                (
                    "ct_performed_date",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Date CT performed",
                    ),
                ),
                (
                    "scanned_with_contrast",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=5,
                        verbose_name="CT/MRI brain scan performed with contrast?",
                    ),
                ),
                (
                    "brain_imaging_reason",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("reduction_in_gcs", "Reduction in GCS"),
                            ("new_neurology", "New neurology"),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=25,
                        null=True,
                        verbose_name="Reason for brain imaging",
                    ),
                ),
                (
                    "brain_imaging_reason_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other, please specify",
                    ),
                ),
                (
                    "are_results_abnormal",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=5,
                    ),
                ),
                (
                    "abnormal_results_reason_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other, please specify reason",
                    ),
                ),
                (
                    "infarcts_location",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If results are abnormal because of Infarcts, what is the location?",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalSignificantDiagnoses",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "possible_diagnoses",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("pulmonary_tb", "Pulmonary TB"),
                            ("extra_pulmonary_tb", "Extra-pulmonary TB"),
                            ("kaposi_sarcoma", "Kaposi-sarcoma"),
                            ("malaria", "Malaria"),
                            ("bacteraemia", "Bacteraemia"),
                            ("pneumonia", "Pneumonia"),
                            ("diarrhoeal_wasting", "Diarrhoeal wasting"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="Significant diagnoses:",
                    ),
                ),
                (
                    "dx_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Date of diagnosis:",
                    ),
                ),
                (
                    "dx_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other, please specify:",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalSubjectConsent",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(max_length=50, verbose_name="Subject Identifier"),
                ),
                (
                    "subject_identifier_as_pk",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "subject_identifier_aka",
                    models.CharField(
                        editable=False,
                        help_text="track a previously allocated identifier.",
                        max_length=50,
                        null=True,
                        verbose_name="Subject Identifier a.k.a",
                    ),
                ),
                (
                    "slug",
                    models.CharField(
                        db_index=True,
                        default="",
                        editable=False,
                        help_text="a field used for quick search",
                        max_length=250,
                        null=True,
                    ),
                ),
                (
                    "citizen",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=3,
                        verbose_name="Is the participant a Botswana citizen? ",
                    ),
                ),
                (
                    "legal_marriage",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="If 'No', participant may not be consented.",
                        max_length=3,
                        null=True,
                        verbose_name="If not a citizen, is the participant legally married to a Botswana citizen?",
                    ),
                ),
                (
                    "marriage_certificate",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="If 'No', participant may not be consented.",
                        max_length=3,
                        null=True,
                        verbose_name="[Interviewer] Has the participant produced the marriage certificate as proof? ",
                    ),
                ),
                (
                    "marriage_certificate_no",
                    models.CharField(
                        blank=True,
                        help_text="e.g. 000/YYYY",
                        max_length=9,
                        null=True,
                        verbose_name="What is the marriage certificate number?",
                    ),
                ),
                (
                    "identity",
                    django_crypto_fields.fields.identity_field.IdentityField(
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        verbose_name="Identity number",
                    ),
                ),
                (
                    "identity_type",
                    models.CharField(
                        max_length=25,
                        verbose_name="What type of identity number is this?",
                    ),
                ),
                (
                    "confirm_identity",
                    django_crypto_fields.fields.identity_field.IdentityField(
                        help_text="Retype the identity number (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                    ),
                ),
                (
                    "first_name",
                    django_crypto_fields.fields.firstname_field.FirstnameField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                    ),
                ),
                (
                    "last_name",
                    django_crypto_fields.fields.lastname_field.LastnameField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                        verbose_name="Last name",
                    ),
                ),
                (
                    "initials",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Ensure initials consist of letters only in upper case, no spaces.",
                                regex="^[A-Z]{2,3}$",
                            )
                        ],
                    ),
                ),
                ("dob", models.DateField(null=True, verbose_name="Date of birth")),
                (
                    "is_dob_estimated",
                    edc_model_fields.fields.date_estimated.IsDateEstimatedField(
                        choices=[
                            ("-", "No"),
                            ("D", "Yes, estimated the Day"),
                            ("MD", "Yes, estimated Month and Day"),
                            ("YMD", "Yes, estimated Year, Month and Day"),
                        ],
                        help_text="If the exact date is not known, please indicate which part of the date is estimated.",
                        max_length=25,
                        null=True,
                        verbose_name="Is date of birth estimated?",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female"), ("U", "Undetermined")],
                        max_length=1,
                        null=True,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "guardian_name",
                    django_crypto_fields.fields.lastname_field.LastnameField(
                        blank=True,
                        help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                        validators=[edc_consent.validators.FullNameValidator()],
                        verbose_name="Guardian's last and first name",
                    ),
                ),
                ("subject_type", models.CharField(max_length=25)),
                (
                    "consent_reviewed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If no, participant is not eligible.",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes],
                        verbose_name="I have reviewed the consent with the participant",
                    ),
                ),
                (
                    "study_questions",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If no, participant is not eligible.",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes],
                        verbose_name="I have answered all questions the participant had about the study",
                    ),
                ),
                (
                    "assessment_score",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If no, participant is not eligible.",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes],
                        verbose_name="I have asked the participant questions about this study and the participant has demonstrated understanding",
                    ),
                ),
                (
                    "consent_signature",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If no, participant is not eligible.",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes],
                        verbose_name="I have verified that the participant has signed the consent form",
                    ),
                ),
                (
                    "consent_copy",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("Declined", "Yes, but subject declined copy"),
                        ],
                        help_text="If declined, return copy with the consent",
                        max_length=20,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes_or_declined],
                        verbose_name="I have provided the participant with a copy of their signed informed consent",
                    ),
                ),
                (
                    "may_store_genetic_samples",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Does the participant agree that a portion of the blood sample that is taken be stored for genetic analysis?",
                    ),
                ),
                (
                    "may_store_samples",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=3,
                        verbose_name="Does the participant agree to have samples stored after the study has ended",
                    ),
                ),
                (
                    "is_incarcerated",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="( if 'Yes' STOP participant cannot be consented )",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_no],
                        verbose_name="Is the participant under involuntary incarceration?",
                    ),
                ),
                (
                    "is_literate",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If 'No' provide witness's name on this form and signature on the paper document.",
                        max_length=3,
                        verbose_name="Is the participant literate?",
                    ),
                ),
                (
                    "witness_name",
                    django_crypto_fields.fields.lastname_field.LastnameField(
                        blank=True,
                        help_text="Required only if participant is illiterate.<br>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                        validators=[edc_consent.validators.FullNameValidator()],
                        verbose_name="Witness's last and first name",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("af", "Afrikaans"),
                            ("ny", "Chichewa"),
                            ("en", "English"),
                            ("xh", "isiXhosa"),
                            ("lg", "Luganda"),
                            ("rny", "Runyankore"),
                            ("tn", "Setswana"),
                            ("sn", "Shona"),
                        ],
                        help_text="The language used for the consent process will also be used during data collection.",
                        max_length=25,
                        verbose_name="Language of consent",
                    ),
                ),
                ("is_verified", models.BooleanField(default=False, editable=False)),
                (
                    "is_verified_datetime",
                    models.DateTimeField(editable=False, null=True),
                ),
                (
                    "verified_by",
                    models.CharField(editable=False, max_length=25, null=True),
                ),
                (
                    "consent_datetime",
                    models.DateTimeField(
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Consent date and time",
                    ),
                ),
                ("report_datetime", models.DateTimeField(editable=False, null=True)),
                (
                    "version",
                    models.CharField(
                        editable=False,
                        help_text="See 'Consent Type' for consent versions by period.",
                        max_length=10,
                        verbose_name="Consent version",
                    ),
                ),
                ("updates_versions", models.BooleanField(default=False)),
                (
                    "sid",
                    models.CharField(
                        blank=True,
                        editable=False,
                        help_text="Used for randomization against a prepared rando-list.",
                        max_length=15,
                        null=True,
                        verbose_name="SID",
                    ),
                ),
                (
                    "comment",
                    django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                        blank=True,
                        help_text=" (Encryption: AES local)",
                        max_length=250,
                        null=True,
                        verbose_name="Comment",
                    ),
                ),
                (
                    "dm_comment",
                    models.CharField(
                        editable=False,
                        help_text="see also edc.data manager.",
                        max_length=150,
                        null=True,
                        verbose_name="Data Management comment",
                    ),
                ),
                (
                    "consent_identifier",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="A unique identifier for this consent instance",
                    ),
                ),
                (
                    "screening_identifier",
                    models.CharField(
                        max_length=50, verbose_name="Screening identifier"
                    ),
                ),
                (
                    "completed_by_next_of_kin",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        editable=False,
                        max_length=10,
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalSubjectReconsent",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(
                        db_index=True, max_length=50, verbose_name="Subject Identifier"
                    ),
                ),
                (
                    "subject_identifier_as_pk",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "subject_identifier_aka",
                    models.CharField(
                        editable=False,
                        help_text="track a previously allocated identifier.",
                        max_length=50,
                        null=True,
                        verbose_name="Subject Identifier a.k.a",
                    ),
                ),
                ("tracking_identifier", models.CharField(db_index=True, max_length=30)),
                (
                    "slug",
                    models.CharField(
                        db_index=True,
                        default="",
                        editable=False,
                        help_text="a field used for quick search",
                        max_length=250,
                        null=True,
                    ),
                ),
                ("action_identifier", models.CharField(max_length=25, null=True)),
                (
                    "consent_reviewed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If no, participant is not eligible.",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes],
                        verbose_name="I have reviewed the consent with the participant",
                    ),
                ),
                (
                    "study_questions",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If no, participant is not eligible.",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes],
                        verbose_name="I have answered all questions the participant had about the study",
                    ),
                ),
                (
                    "assessment_score",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If no, participant is not eligible.",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes],
                        verbose_name="I have asked the participant questions about this study and the participant has demonstrated understanding",
                    ),
                ),
                (
                    "consent_signature",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If no, participant is not eligible.",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes],
                        verbose_name="I have verified that the participant has signed the consent form",
                    ),
                ),
                (
                    "consent_copy",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("Declined", "Yes, but subject declined copy"),
                        ],
                        help_text="If declined, return copy with the consent",
                        max_length=20,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes_or_declined],
                        verbose_name="I have provided the participant with a copy of their signed informed consent",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(default=edc_utils.date.get_utcnow),
                ),
                (
                    "identity",
                    django_crypto_fields.fields.identity_field.IdentityField(
                        help_text="Provide the same identity number provided on the original consent complete by the next of kin. (Encryption: RSA local)",
                        max_length=71,
                        verbose_name="Identity number",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalSubjectRequisition",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(max_length=50, verbose_name="Subject Identifier"),
                ),
                (
                    "slug",
                    models.CharField(
                        db_index=True,
                        default="",
                        editable=False,
                        help_text="a field used for quick search",
                        max_length=250,
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "requisition_identifier",
                    models.CharField(
                        db_index=True,
                        editable=False,
                        max_length=50,
                        verbose_name="Requisition Id",
                    ),
                ),
                (
                    "identifier_prefix",
                    models.CharField(
                        db_index=True, editable=False, max_length=50, null=True
                    ),
                ),
                (
                    "primary_aliquot_identifier",
                    models.CharField(
                        db_index=True, editable=False, max_length=18, null=True
                    ),
                ),
                (
                    "requisition_datetime",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="Requisition Date",
                    ),
                ),
                (
                    "drawn_datetime",
                    models.DateTimeField(
                        blank=True,
                        help_text="If not drawn, leave blank. Same as date and time of finger prick in case on DBS.",
                        null=True,
                        verbose_name="Date / Time Specimen Drawn",
                    ),
                ),
                (
                    "is_drawn",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="Yes",
                        help_text="If No, provide a reason below",
                        max_length=3,
                        verbose_name="Was a specimen drawn?",
                    ),
                ),
                (
                    "reason_not_drawn_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "protocol_number",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "clinician_initials",
                    edc_model_fields.fields.InitialsField(
                        blank=True,
                        help_text="Type 2-3 letters, all in uppercase and no spaces",
                        max_length=3,
                        null=True,
                        verbose_name="Initials",
                    ),
                ),
                (
                    "specimen_type",
                    models.CharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name="Specimen type",
                    ),
                ),
                (
                    "item_type",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("tube", "Tube"),
                            ("swab", "Swab"),
                            ("dbs", "DBS Card"),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="Item collection type",
                    ),
                ),
                (
                    "item_count",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of tubes, samples, cards, etc being sent for this test/order only. Determines number of labels to print",
                        null=True,
                        verbose_name="Number of items",
                    ),
                ),
                (
                    "estimated_volume",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text='If applicable, estimated volume of sample for this test/order. This is the total volume if number of "tubes" above is greater than 1',
                        max_digits=7,
                        null=True,
                        verbose_name="Estimated volume in mL",
                    ),
                ),
                ("comments", models.TextField(blank=True, max_length=25, null=True)),
                ("received", models.BooleanField(default=False)),
                ("received_datetime", models.DateTimeField(blank=True, null=True)),
                ("processed", models.BooleanField(default=False)),
                ("processed_datetime", models.DateTimeField(blank=True, null=True)),
                ("packed", models.BooleanField(default=False)),
                ("packed_datetime", models.DateTimeField(blank=True, null=True)),
                ("shipped", models.BooleanField(default=False)),
                ("shipped_datetime", models.DateTimeField(blank=True, null=True)),
                (
                    "reason_not_drawn",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            (
                                "collection_failed",
                                "Tried, but unable to obtain sample from patient",
                            ),
                            ("absent", "Patient did not attend visit"),
                            ("refused", "Patient refused"),
                            ("no_supplies", "No supplies"),
                            ("NOT_REQUIRED", "No longer required for this visit"),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="If not drawn, please explain",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "panel",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edc_lab.Panel",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalSubjectVisit",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(max_length=50, verbose_name="Subject Identifier"),
                ),
                (
                    "visit_schedule_name",
                    models.CharField(
                        editable=False,
                        help_text='the name of the visit schedule used to find the "schedule"',
                        max_length=25,
                    ),
                ),
                ("schedule_name", models.CharField(editable=False, max_length=25)),
                (
                    "visit_code",
                    models.CharField(editable=False, max_length=25, null=True),
                ),
                (
                    "visit_code_sequence",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        help_text="An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)",
                        null=True,
                        verbose_name="Sequence",
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="Date and time of this report",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Visit Date and Time",
                    ),
                ),
                (
                    "reason_unscheduled_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name='If "Other" reason for unscheduled visit, specify',
                    ),
                ),
                (
                    "reason_missed",
                    models.CharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If 'Missed' above, provide the reason the scheduled visit was missed",
                    ),
                ),
                (
                    "reason_missed_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name='If "Other" reason for missed visit, specify',
                    ),
                ),
                (
                    "study_status",
                    models.CharField(
                        max_length=50,
                        null=True,
                        verbose_name="What is the participant's current study status",
                    ),
                ),
                (
                    "require_crfs",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="Yes",
                        max_length=10,
                        verbose_name="Are scheduled data being submitted with this visit?",
                    ),
                ),
                (
                    "info_source_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name='If "Other" source of information, specify',
                    ),
                ),
                (
                    "survival_status",
                    models.CharField(
                        choices=[
                            ("alive", "Alive"),
                            ("dead", "Deceased"),
                            ("unknown", "Unknown"),
                        ],
                        default="alive",
                        max_length=10,
                        null=True,
                        verbose_name="Participant's survival status",
                    ),
                ),
                (
                    "last_alive_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            edc_protocol.validators.date_not_before_study_start,
                            edc_model.validators.date.date_not_future,
                        ],
                        verbose_name="Date participant last known alive",
                    ),
                ),
                (
                    "comments",
                    models.TextField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name="Comment if any additional pertinent information about the participant",
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("unscheduled", "Not scheduled"),
                            ("missed", "Missed"),
                        ],
                        max_length=25,
                        verbose_name="What is the reason for this visit report?",
                    ),
                ),
                (
                    "reason_unscheduled",
                    models.CharField(
                        choices=[
                            (
                                "patient_unwell_outpatient",
                                "Patient unwell (outpatient)",
                            ),
                            ("recurrence_symptoms", "Recurrence of symptoms"),
                            ("raised_icp_management", "Raised ICP management"),
                            ("art_initiation", "ART initiation"),
                            ("patient_hospitalised", "Patient hospitalised"),
                            ("OTHER", "Other"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit",
                    ),
                ),
                (
                    "info_source",
                    models.CharField(
                        choices=[
                            ("hospital_notes", "Hospital notes"),
                            ("outpatient_cards", "Outpatient cards"),
                            ("patient", "Patient"),
                            (
                                "collateral_history",
                                "Collateral History from relative/guardian",
                            ),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        verbose_name="What is the main source of this information?",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "appointment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edc_appointment.Appointment",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalWeek16",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "patient_alive",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Is the patient alive?",
                    ),
                ),
                (
                    "death_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="If dead, date and time of death",
                    ),
                ),
                (
                    "activities_help",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        help_text="For example eating, drinking, washing, brushing teeth, going to the toilet.",
                        max_length=5,
                        verbose_name="Does the patient require help from anybody for everyday activities?",
                    ),
                ),
                (
                    "illness_problems",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=5,
                        verbose_name="Has the illness left the patient with any other problems?",
                    ),
                ),
                (
                    "rankin_score",
                    models.CharField(
                        choices=[
                            ("0", "0"),
                            ("1", "1"),
                            ("2", "2"),
                            ("3", "3"),
                            ("4", "4"),
                            ("5", "5"),
                            ("6", "6"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        verbose_name="Modified Rankin score",
                    ),
                ),
                (
                    "week16_narrative",
                    models.TextField(
                        blank=True, max_length=1000, null=True, verbose_name="Narrative"
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalWeek2",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "physical_symptoms",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Physical symptoms",
                    ),
                ),
                (
                    "headache",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Headache",
                    ),
                ),
                (
                    "visual_acuity_left_eye",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=4,
                        null=True,
                        verbose_name="Visual acuity Left Eye",
                    ),
                ),
                (
                    "visual_acuity_right_eye",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=4,
                        null=True,
                        verbose_name="Visual acuity Right Eye",
                    ),
                ),
                (
                    "glasgow_coma_score",
                    models.IntegerField(
                        blank=True,
                        help_text="/15",
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(15),
                            django.core.validators.MinValueValidator(3),
                        ],
                        verbose_name="Glasgow Coma Score",
                    ),
                ),
                (
                    "confusion",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Confusion",
                    ),
                ),
                (
                    "recent_seizure_less_72",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Recent seizure (<72 hrs)",
                    ),
                ),
                (
                    "cn_palsy",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="CN palsy",
                    ),
                ),
                (
                    "behaviour_change",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Behaviour change",
                    ),
                ),
                (
                    "focal_neurology",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Focal neurology",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "discharged",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Discharged?",
                    ),
                ),
                (
                    "discharge_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                    ),
                ),
                (
                    "died",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Died?",
                    ),
                ),
                (
                    "death_date_time",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                    ),
                ),
                (
                    "ampho_start_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Amphotericin B start date: ",
                    ),
                ),
                (
                    "ampho_end_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Amphotericin B end date: ",
                    ),
                ),
                (
                    "ampho_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Amphotericin B treatment duration",
                    ),
                ),
                (
                    "flucon_start_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Fluconazole start date:",
                    ),
                ),
                (
                    "flucon_stop_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Fluconazole end date:",
                    ),
                ),
                (
                    "flucon_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Fluconazole treatment duration:",
                    ),
                ),
                (
                    "flucy_start_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Flucytosine start date:",
                    ),
                ),
                (
                    "flucy_stop_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Flucytosine end date:",
                    ),
                ),
                (
                    "flucy_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Flucytosine treatment duration:",
                    ),
                ),
                (
                    "ambi_start_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Ambisome start date:",
                    ),
                ),
                (
                    "ambi_stop_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Ambisome end date:",
                    ),
                ),
                (
                    "ambi_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Ambisome treatment duration:",
                    ),
                ),
                (
                    "drug_intervention_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other, please specify:",
                    ),
                ),
                (
                    "antibiotic_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other antibiotics, please specify:",
                    ),
                ),
                (
                    "blood_received",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Blood transfusion received?",
                    ),
                ),
                (
                    "units",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, no. of units",
                    ),
                ),
                (
                    "temperature",
                    models.FloatField(
                        blank=True, default=None, null=True, verbose_name="Temperature"
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="kg",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(20),
                            django.core.validators.MaxValueValidator(150),
                        ],
                        verbose_name="Weight:",
                    ),
                ),
                (
                    "medicine_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other, please specify:",
                    ),
                ),
                (
                    "significant_dx",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Other significant diagnoses since enrolment?",
                    ),
                ),
                (
                    "significant_dx_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                    ),
                ),
                (
                    "flucon_missed_doses",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Were any Fluconazole drug doses missed?",
                    ),
                ),
                (
                    "amphotericin_missed_doses",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Were any Amphotericin B drug doses missed?",
                    ),
                ),
                (
                    "other_significant_dx",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Other significant diagnosis since enrollment?",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalWeek4",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "physical_symptoms",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Physical symptoms",
                    ),
                ),
                (
                    "headache",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Headache",
                    ),
                ),
                (
                    "visual_acuity_left_eye",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=4,
                        null=True,
                        verbose_name="Visual acuity Left Eye",
                    ),
                ),
                (
                    "visual_acuity_right_eye",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=4,
                        null=True,
                        verbose_name="Visual acuity Right Eye",
                    ),
                ),
                (
                    "glasgow_coma_score",
                    models.IntegerField(
                        blank=True,
                        help_text="/15",
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(15),
                            django.core.validators.MinValueValidator(3),
                        ],
                        verbose_name="Glasgow Coma Score",
                    ),
                ),
                (
                    "confusion",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Confusion",
                    ),
                ),
                (
                    "recent_seizure_less_72",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Recent seizure (<72 hrs)",
                    ),
                ),
                (
                    "cn_palsy",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="CN palsy",
                    ),
                ),
                (
                    "behaviour_change",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Behaviour change",
                    ),
                ),
                (
                    "focal_neurology",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Focal neurology",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "fluconazole_dose",
                    models.CharField(
                        choices=[
                            ("800mg_daily", "800mg daily"),
                            ("OTHER", "Other"),
                            ("not_done", "Not done"),
                        ],
                        max_length=25,
                        verbose_name="Fluconazole dose (day prior to visit)",
                    ),
                ),
                (
                    "fluconazole_dose_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "rifampicin_started",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("already_on_rifampicin", "Already on Rifampicin"),
                            ("not_done", "Not done"),
                        ],
                        max_length=25,
                        verbose_name="Rifampicin started since last visit?",
                    ),
                ),
                (
                    "rifampicin_start_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Date Rifampicin started",
                    ),
                ),
                (
                    "lp_done",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If yes, ensure LP CRF completed.",
                        max_length=5,
                        verbose_name="LP done?",
                    ),
                ),
                (
                    "other_significant_dx",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=5,
                        verbose_name="Other significant diagnosis since last visit?",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="HistoricalWeek4Diagnoses",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "possible_diagnoses",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("pulmonary_tb", "Pulmonary TB"),
                            ("extra_pulmonary_tb", "Extra-pulmonary TB"),
                            ("kaposi_sarcoma", "Kaposi-sarcoma"),
                            ("malaria", "Malaria"),
                            ("bacteraemia", "Bacteraemia"),
                            ("pneumonia", "Pneumonia"),
                            ("diarrhoeal_wasting", "Diarrhoeal wasting"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="Significant diagnoses:",
                    ),
                ),
                (
                    "dx_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Date of diagnosis:",
                    ),
                ),
                (
                    "dx_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other, please specify:",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
        ),
        migrations.CreateModel(
            name="LumbarPunctureCsf",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "bios_crag",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="Gaborone and Blantyre only",
                        max_length=5,
                        verbose_name="Biosynex Semi-quantitative CrAg performed?",
                    ),
                ),
                (
                    "crag_control_result",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="Gaborone and Blantyre only",
                        max_length=5,
                        verbose_name="Control result",
                    ),
                ),
                (
                    "crag_t1_result",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="Gaborone and Blantyre only",
                        max_length=5,
                        verbose_name="T1 result",
                    ),
                ),
                (
                    "crag_t2_result",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="Gaborone and Blantyre only",
                        max_length=5,
                        verbose_name="T2 result",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "qc_assay_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="QC Result Report Date and Time",
                    ),
                ),
                (
                    "csf_assay_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="CSF Result Report Date and Time",
                    ),
                ),
                (
                    "reason_for_lp",
                    models.CharField(
                        choices=[
                            ("scheduled_per_protocol", "Scheduled per protocol"),
                            ("therapeutic_lp", "Therapeutic LP"),
                            ("clincal_deterioration", "Clinical deterioration"),
                        ],
                        max_length=50,
                        verbose_name="Reason for LP",
                    ),
                ),
                (
                    "opening_pressure",
                    models.IntegerField(
                        help_text="Units cm of H<sub>2</sub>O",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(99),
                        ],
                    ),
                ),
                (
                    "closing_pressure",
                    models.IntegerField(
                        help_text="Units cm of H<sub>2</sub>O",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(99),
                        ],
                    ),
                ),
                (
                    "csf_amount_removed",
                    models.IntegerField(
                        blank=True,
                        help_text="Units ml",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="CSF amount removed ",
                    ),
                ),
                (
                    "quantitative_culture",
                    models.IntegerField(
                        blank=True,
                        help_text="Units CFU/ml",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(9999999),
                        ],
                    ),
                ),
                (
                    "csf_culture",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("awaiting_results", "Awaiting results"),
                            ("not_done", "Not done"),
                        ],
                        default="awaiting_results",
                        help_text="Complete after getting the results.",
                        max_length=18,
                        verbose_name="Other organism (non-Cryptococcus)",
                    ),
                ),
                (
                    "other_csf_culture",
                    models.CharField(
                        blank=True,
                        max_length=75,
                        null=True,
                        verbose_name="If YES, specify organism:",
                    ),
                ),
                (
                    "csf_wbc_cell_count",
                    models.IntegerField(
                        blank=True,
                        help_text="acceptable units are mm<sup>3</sup>",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999),
                        ],
                        verbose_name="Total CSF WBC cell count:",
                    ),
                ),
                (
                    "differential_lymphocyte_count",
                    models.IntegerField(
                        blank=True,
                        help_text="acceptable units are mm<sup>3</sup> or %",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999),
                        ],
                        verbose_name="Differential lymphocyte cell count:",
                    ),
                ),
                (
                    "differential_lymphocyte_unit",
                    models.CharField(
                        blank=True,
                        choices=[("mm3", "mm<sup>3</sup>"), ("%", "%")],
                        max_length=6,
                        null=True,
                    ),
                ),
                (
                    "differential_neutrophil_count",
                    models.IntegerField(
                        blank=True,
                        help_text="acceptable units are mm<sup>3</sup> or %",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999),
                        ],
                        verbose_name="Differential neutrophil cell count:",
                    ),
                ),
                (
                    "differential_neutrophil_unit",
                    models.CharField(
                        blank=True,
                        choices=[("mm3", "mm<sup>3</sup>"), ("%", "%")],
                        max_length=6,
                        null=True,
                    ),
                ),
                (
                    "india_ink",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("IND", "Indeterminate"),
                            ("not_done", "Not done"),
                        ],
                        max_length=15,
                        null=True,
                    ),
                ),
                (
                    "csf_glucose",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Units in mmol/L or mg/dL",
                        max_digits=3,
                        null=True,
                        verbose_name="CSF glucose:",
                    ),
                ),
                (
                    "csf_glucose_units",
                    models.CharField(
                        blank=True,
                        choices=[("mg/dL", "mg/dL"), ("mmol/L", "mmol/L")],
                        max_length=6,
                        null=True,
                        verbose_name="CSF glucose units:",
                    ),
                ),
                (
                    "csf_protein",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Units in g/dL",
                        max_digits=4,
                        null=True,
                        verbose_name="CSF protein:",
                    ),
                ),
                (
                    "csf_cr_ag",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("IND", "Indeterminate"),
                            ("not_done", "Not done"),
                        ],
                        max_length=15,
                        null=True,
                        verbose_name="CSF CrAg:",
                    ),
                ),
                (
                    "csf_cr_ag_lfa",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=5,
                        verbose_name="CSF CrAg done by CSF CrAg LFA:",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lumbar Puncture/Cerebrospinal Fluid",
                "verbose_name_plural": "Lumbar Puncture/Cerebrospinal Fluid",
                "abstract": False,
            },
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="MedicalExpenses",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "info_source",
                    models.CharField(
                        choices=[
                            ("patient", "Patient"),
                            ("next_of_kin", "Next of Kin/Relative"),
                        ],
                        max_length=25,
                        verbose_name="What is the main source of this information?",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("botswana_pula", "Botswana Pula"),
                            ("malawian_kwacha", "Malawian Kwacha"),
                            ("south_african_rand", "South African Rand"),
                            ("ugandan_shilling", "Ugandan Shilling"),
                            ("us_dollar", "US Dollar"),
                            ("zimbabwean_dollar", "Zimbabwean Dollar"),
                        ],
                        max_length=20,
                        verbose_name="Which currency do you use?",
                    ),
                ),
                (
                    "food_spend",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much do you/your family spend on food in a week?",
                    ),
                ),
                (
                    "utilities_spend",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much do you/your family spent on rent and utilities a month?",
                    ),
                ),
                (
                    "item_spend",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much have you spent on large items (e.g. furniture, electrical items, cars) in the last year?",
                    ),
                ),
                (
                    "subject_spent_last_4wks",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Over that last 4 weeks, how much have you spent on activities relating to your health?",
                    ),
                ),
                (
                    "someone_spent_last_4wks",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Over that last 4 weeks, how much has someone else spent on activities relating to your health?",
                    ),
                ),
                (
                    "total_spent_last_4wks",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=16,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much in total has been spent on your healthcare in the last 4 weeks?",
                    ),
                ),
                (
                    "care_before_hospital",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If YES, please complete medical expenses part 2",
                        max_length=5,
                        verbose_name="Have you received any treatment or care for your present condition, before coming to the hospital?",
                    ),
                ),
                (
                    "duration_present_condition",
                    models.IntegerField(
                        help_text="in days",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="How long have you been sick with your current condition?",
                    ),
                ),
                (
                    "activities_missed",
                    models.CharField(
                        choices=[
                            ("working", "Working"),
                            ("studying", "Studying"),
                            ("caring_for_children", "Caring for children"),
                            ("maintaining_house", "Maintaining the house"),
                            ("nothing", "Nothing"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="What would you have been doing if you were not sick with your present condition",
                    ),
                ),
                (
                    "activities_missed_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "time_off_work",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="in days",
                        max_digits=4,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much time did you take off work?",
                    ),
                ),
                (
                    "carer_time_off",
                    models.IntegerField(
                        blank=True,
                        help_text="in days",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much time did a caring family member take to accompany you to the hospital?",
                    ),
                ),
                (
                    "loss_of_earnings",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=5,
                        verbose_name="Did you lose earnings as a result?",
                    ),
                ),
                (
                    "earnings_lost_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much did you lose?",
                    ),
                ),
                (
                    "form_of_transport",
                    models.CharField(
                        choices=[
                            ("bus", "Bus"),
                            ("train", "Train"),
                            ("ambulance", "Ambulance"),
                            ("private_taxi", "Private taxi"),
                            ("hired_motorbike", "Hired motorbike"),
                            ("own_car", "Own car"),
                            ("own_motorbike", "Own motorbike"),
                            ("bicycle", "Bicycle"),
                            ("foot", "Foot"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="Which form of transport did you take to get here today?",
                    ),
                ),
                (
                    "transport_fare",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much did you spend on the transport (in total)?",
                    ),
                ),
                (
                    "travel_time",
                    models.CharField(
                        blank=True,
                        help_text="Specify as hours:minutes (format HH:MM)",
                        max_length=8,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^([0-9]{1,3}:[0-5][0-9])$",
                                message="Enter a valid time in hour:minutes format",
                            )
                        ],
                        verbose_name="How long did it take you to reach there?",
                    ),
                ),
                (
                    "loans",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Did you take out any loans to pay for your healthcare?",
                    ),
                ),
                (
                    "sold_anything",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Did you sell anything to pay for your healthcare?",
                    ),
                ),
                (
                    "private_healthcare",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Do you have private healthcare insurance?",
                    ),
                ),
                (
                    "healthcare_insurance",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=5,
                        verbose_name="Did you use it to help pay for your healthcare?",
                    ),
                ),
                (
                    "welfare",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Do you receive any welfare or social service support?",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "Health Economics: Medical Expenses",
                "verbose_name_plural": "Health Economics: Medical Expenses",
                "abstract": False,
            },
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="MedicalExpensesTwo",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "Health Economics: Medical Expenses Part 2",
                "verbose_name_plural": "Health Economics: Medical Expenses Part 2",
                "abstract": False,
            },
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="MedicalExpensesTwoDetail",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "location_care",
                    models.CharField(
                        choices=[
                            ("government_healthcare", "Government healthcare"),
                            ("private_healthcare", "Private healthcare"),
                            ("ngo_healthcare", "NGO healthcare"),
                            ("pharmacy", "Pharmacy"),
                            ("home", "Home"),
                            ("OTHER", "Other"),
                        ],
                        max_length=35,
                        verbose_name="Where did you receive treatment or care?",
                    ),
                ),
                (
                    "location_care_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "transport_form",
                    models.CharField(
                        choices=[
                            ("bus", "Bus"),
                            ("train", "Train"),
                            ("ambulance", "Ambulance"),
                            ("private_taxi", "Private taxi"),
                            ("hired_motorbike", "Hired motorbike"),
                            ("own_car", "Own car"),
                            ("own_motorbike", "Own motorbike"),
                            ("bicycle", "Bicycle"),
                            ("foot", "Foot"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=20,
                        verbose_name="Which form of transport did you take to reach there?",
                    ),
                ),
                (
                    "transport_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much did you spend on the transport (return)?",
                    ),
                ),
                (
                    "transport_duration",
                    models.CharField(
                        blank=True,
                        help_text="Specify as hours:minutes (format HH:MM)",
                        max_length=8,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^([0-9]{1,3}:[0-5][0-9])$",
                                message="Enter a valid time in hour:minutes format",
                            )
                        ],
                        verbose_name="How long did it take you to reach there?",
                    ),
                ),
                (
                    "care_provider",
                    models.CharField(
                        choices=[
                            ("doctor", "Doctor"),
                            ("clinical_officer", "Clinical Officer"),
                            ("nurse", "Nurse"),
                            ("traditional_healer", "Traditional Healer"),
                            ("spiritual_healer", "Spiritual Healer"),
                            ("family/friend", "Family/Friend"),
                            ("pharmacist", "Pharmacist"),
                            ("OTHER", "Other"),
                        ],
                        max_length=35,
                        verbose_name="Who provided treatment or care during that visit?",
                    ),
                ),
                (
                    "care_provider_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "paid_treatment",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Did you pay for the consultation you received during that visit",
                    ),
                ),
                (
                    "paid_treatment_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much did you pay for this visit?",
                    ),
                ),
                (
                    "medication_bought",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Did you buy other medication for relief?",
                    ),
                ),
                (
                    "medication_payment",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="How much did you pay?",
                    ),
                ),
                (
                    "other_place_visited",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text='If YES, click "Add another Medical Expenses Part 2: Detail" below.',
                        max_length=15,
                        verbose_name="Before this, did you go to another place for the treatment of the present situation?",
                    ),
                ),
                (
                    "medical_expenses_two",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ambition_subject.MedicalExpensesTwo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Medical Expenses Part 2: Detail",
                "verbose_name_plural": "Medical Expenses Part 2: Detail",
            },
        ),
        migrations.CreateModel(
            name="Microbiology",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "urine_culture_performed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="only for patients with >50 white cells in urine",
                        max_length=5,
                    ),
                ),
                (
                    "urine_taken_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            edc_protocol.validators.date_not_before_study_start,
                            edc_model.validators.date.date_not_future,
                        ],
                    ),
                ),
                (
                    "urine_culture_results",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("no_growth", "No growth"),
                            ("POS", "Positive"),
                        ],
                        default="N/A",
                        max_length=10,
                        verbose_name="Urine culture results, if completed",
                    ),
                ),
                (
                    "urine_culture_organism",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("e_coli", "E.coli"),
                            ("klebsiella_sp", "Klebsiella spp."),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="If positive, organism",
                    ),
                ),
                (
                    "urine_culture_organism_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "blood_culture_performed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=5
                    ),
                ),
                (
                    "blood_culture_results",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("no_growth", "No growth"),
                            ("POS", "Positive"),
                        ],
                        default="N/A",
                        max_length=10,
                        verbose_name="Blood culture results, if completed",
                    ),
                ),
                (
                    "blood_taken_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            edc_protocol.validators.date_not_before_study_start,
                            edc_model.validators.date.date_not_future,
                        ],
                    ),
                ),
                (
                    "day_blood_taken",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If positive, study day positive culture sample taken",
                    ),
                ),
                (
                    "blood_culture_organism",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("cryptococcus_neoformans", "Cryptococcus neoformans"),
                            ("bacteria", "Bacteria"),
                            ("bacteria_and_cryptococcus", "Bacteria and Cryptococcus"),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=50,
                        verbose_name="If growth positive, organism",
                    ),
                ),
                (
                    "blood_culture_organism_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "bacteria_identified",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("e_coli", "E.coli"),
                            ("klebsiella_sp", "Klebsiella spp."),
                            ("streptococcus_pneumoniae", "Streptococcus pneumoniae"),
                            (
                                "staphylococus_aureus",
                                "(Sensitive) Staphylococus aureus",
                            ),
                            ("mrsa", "MRSA"),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=50,
                        verbose_name="If bacteria, type",
                    ),
                ),
                (
                    "bacteria_identified_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "sputum_afb_performed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="Was sputum AFB done?",
                        max_length=5,
                        verbose_name="AFB microscopy performed?",
                    ),
                ),
                (
                    "sputum_afb_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            edc_protocol.validators.date_not_before_study_start,
                            edc_model.validators.date.date_not_future,
                        ],
                    ),
                ),
                (
                    "sputum_results_afb",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=10,
                        verbose_name="AFB results",
                    ),
                ),
                (
                    "sputum_performed",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=15,
                        verbose_name="Culture performed?",
                    ),
                ),
                (
                    "sputum_taken_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            edc_protocol.validators.date_not_before_study_start,
                            edc_model.validators.date.date_not_future,
                        ],
                    ),
                ),
                (
                    "sputum_results_culture",
                    models.CharField(
                        choices=[
                            ("POS", "Positive"),
                            ("NEG", "Negative"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=10,
                        verbose_name="Culture results",
                    ),
                ),
                (
                    "sputum_results_positive",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If culture is positive, please specify:",
                    ),
                ),
                (
                    "sputum_genexpert_performed",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=15,
                        verbose_name="Sputum Gene-Xpert performed?",
                    ),
                ),
                (
                    "sputum_genexpert_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            edc_protocol.validators.date_not_before_study_start,
                            edc_model.validators.date.date_not_future,
                        ],
                        verbose_name="Date sputum Gene-Xpert taken",
                    ),
                ),
                (
                    "sputum_result_genexpert",
                    models.CharField(
                        choices=[
                            (
                                "mtb_detected_rif_resistance_detected",
                                "MTB DETECTED & Rif Resistance DETECTED",
                            ),
                            (
                                "mtb_detected_rif_resistance_not_detected",
                                "MTB DETECTED & Rif Resistance NOT detected",
                            ),
                            (
                                "mtb_detected_rif_resistance_indeterminate",
                                "MTB DETECTED & Rif Resistance INDETERMINATE",
                            ),
                            ("mtb_not_detected", "MTB NOT detected"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=45,
                        verbose_name="Gene-Xpert results",
                    ),
                ),
                (
                    "tissue_biopsy_taken",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=5
                    ),
                ),
                (
                    "tissue_biopsy_results",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("no_growth", "No growth"),
                            ("POS", "Positive"),
                        ],
                        default="N/A",
                        max_length=10,
                        verbose_name="If YES, results",
                    ),
                ),
                (
                    "biopsy_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            edc_protocol.validators.date_not_before_study_start,
                            edc_model.validators.date.date_not_future,
                        ],
                    ),
                ),
                (
                    "day_biopsy_taken",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If positive, Study day positive culture sample taken",
                    ),
                ),
                (
                    "tissue_biopsy_organism",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("cryptococcus_neoformans", "Cryptococcus neoformans"),
                            (
                                "mycobacterium_tuberculosis",
                                "Mycobacterium Tuberculosis",
                            ),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=50,
                        verbose_name="If growth positive, organism",
                    ),
                ),
                (
                    "tissue_biopsy_organism_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                ("histopathology_report", models.TextField(blank=True, null=True)),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "Microbiology",
                "verbose_name_plural": "Microbiology",
                "abstract": False,
            },
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="PatientHistory",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "headache_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If headache, how many days did it last?",
                    ),
                ),
                (
                    "visual_loss_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If visual loss, how many days did it last?",
                    ),
                ),
                (
                    "tb_history",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Previous medical history of Tuberculosis?",
                    ),
                ),
                (
                    "tb_site",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("pulmonary", "Pulmonary"),
                            ("extra_pulmonary", "Extra-pulmonary"),
                            ("both", "Both"),
                        ],
                        default="N/A",
                        max_length=15,
                        verbose_name="If YES, site of TB?",
                    ),
                ),
                (
                    "tb_treatment",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Are you currently taking TB treatment?",
                    ),
                ),
                (
                    "taking_rifampicin",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=5,
                        verbose_name="If YES, are you currently also taking Rifampicin?",
                    ),
                ),
                (
                    "rifampicin_started_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="If YES, when did you first start taking Rifampicin?",
                    ),
                ),
                (
                    "new_hiv_diagnosis",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Is this a new HIV diagnosis?",
                    ),
                ),
                (
                    "taking_arv",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=5,
                        verbose_name="If NO, already taking ARVs?",
                    ),
                ),
                (
                    "arv_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="If YES, date ARVs were started.",
                    ),
                ),
                (
                    "arv_date_estimated",
                    edc_model_fields.fields.date_estimated.IsDateEstimatedFieldNa(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("not_estimated", "No."),
                            ("D", "Yes, estimated the Day"),
                            ("MD", "Yes, estimated Month and Day"),
                            ("YMD", "Yes, estimated Year, Month and Day"),
                        ],
                        default="N/A",
                        help_text="If the exact date is not known, please indicate which part of the date is estimated.",
                        max_length=25,
                        verbose_name="Is the subject's ARV date estimated?",
                    ),
                ),
                (
                    "first_arv_regimen",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            (
                                "TDF_3TC_FTC_with_EFV_or_NVP",
                                "TDF + 3TC/FTC + either EFV or NVP or DTG",
                            ),
                            (
                                "AZT_3TC_with_EFV_NVP_or_DTG",
                                "AZT+3TC+ either EFV or NVP or DTG",
                            ),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=50,
                        verbose_name="Drug used in first line ARV regimen",
                    ),
                ),
                (
                    "first_arv_regimen_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "second_arv_regimen",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            (
                                "TDF_3TC_FTC_with_ATZ_r_or_Lopinavir_r",
                                "TDF + 3TC/FTC + either ATZ/r or Lopinavir/r",
                            ),
                            (
                                "AZT_3TC_with_ATZ_r_or_Lopinavir_r",
                                "AZT +3TC + either ATZ/r or Lopinavir/r",
                            ),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=50,
                        verbose_name="Second line ARV regimen",
                    ),
                ),
                (
                    "second_arv_regimen_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "first_line_choice",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("EFV", "EFV"),
                            ("DTG", "DTG"),
                            ("NVP", "NVP"),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=5,
                        verbose_name="If first line:",
                    ),
                ),
                (
                    "patient_adherence",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=5,
                        verbose_name="Is the patient reportedly adherent?",
                    ),
                ),
                (
                    "tablets_missed",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(31),
                        ],
                        verbose_name="If not adherent, how many tablets missed in the last month?",
                    ),
                ),
                (
                    "last_dose",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="If no tablets taken this month, how many months since the last dose taken?",
                    ),
                ),
                (
                    "last_viral_load",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="copies/mL",
                        max_digits=10,
                        null=True,
                        verbose_name="Last Viral Load, if known?",
                    ),
                ),
                (
                    "viral_load_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Viral Load date",
                    ),
                ),
                (
                    "vl_date_estimated",
                    edc_model_fields.fields.date_estimated.IsDateEstimatedFieldNa(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("not_estimated", "No."),
                            ("D", "Yes, estimated the Day"),
                            ("MD", "Yes, estimated Month and Day"),
                            ("YMD", "Yes, estimated Year, Month and Day"),
                        ],
                        default="N/A",
                        help_text="If the exact date is not known, please indicate which part of the date is estimated.",
                        max_length=25,
                        verbose_name="Is the subject's Viral Load date estimated?",
                    ),
                ),
                (
                    "last_cd4",
                    models.IntegerField(
                        blank=True,
                        help_text="acceptable units are mm<sup>3</sup>",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(2500),
                        ],
                        verbose_name="Last CD4, if known?",
                    ),
                ),
                (
                    "cd4_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="CD4 date",
                    ),
                ),
                (
                    "cd4_date_estimated",
                    edc_model_fields.fields.date_estimated.IsDateEstimatedFieldNa(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("not_estimated", "No."),
                            ("D", "Yes, estimated the Day"),
                            ("MD", "Yes, estimated Month and Day"),
                            ("YMD", "Yes, estimated Year, Month and Day"),
                        ],
                        default="N/A",
                        help_text="If the exact date is not known, please indicate which part of the date is estimated.",
                        max_length=25,
                        verbose_name="Is the subject's CD4 date estimated?",
                    ),
                ),
                (
                    "temp",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="in degrees Celcius",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(30),
                            django.core.validators.MaxValueValidator(45),
                        ],
                        verbose_name="Temperature:",
                    ),
                ),
                (
                    "heart_rate",
                    models.IntegerField(
                        help_text="bpm",
                        validators=[
                            django.core.validators.MinValueValidator(30),
                            django.core.validators.MaxValueValidator(200),
                        ],
                        verbose_name="Heart rate:",
                    ),
                ),
                (
                    "sys_blood_pressure",
                    models.IntegerField(
                        help_text="in mm. format SYS, e.g. 120",
                        validators=[
                            django.core.validators.MinValueValidator(50),
                            django.core.validators.MaxValueValidator(220),
                        ],
                        verbose_name="Blood pressure: systolic",
                    ),
                ),
                (
                    "dia_blood_pressure",
                    models.IntegerField(
                        help_text="in Hg. format DIA, e.g. 80",
                        validators=[
                            django.core.validators.MinValueValidator(20),
                            django.core.validators.MaxValueValidator(150),
                        ],
                        verbose_name="Blood pressure: diastolic",
                    ),
                ),
                (
                    "respiratory_rate",
                    models.IntegerField(
                        help_text="breaths/min",
                        validators=[
                            django.core.validators.MinValueValidator(6),
                            django.core.validators.MaxValueValidator(50),
                        ],
                        verbose_name="Respiratory rate:",
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="kg",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(20),
                            django.core.validators.MaxValueValidator(150),
                        ],
                        verbose_name="Weight:",
                    ),
                ),
                (
                    "weight_determination",
                    models.CharField(
                        choices=[("estimated", "Estimated"), ("measured", "Measured")],
                        max_length=15,
                        verbose_name="Is weight estimated or measured?",
                    ),
                ),
                (
                    "glasgow_coma_score",
                    models.IntegerField(
                        help_text="/15",
                        validators=[
                            django.core.validators.MinValueValidator(3),
                            django.core.validators.MaxValueValidator(15),
                        ],
                        verbose_name="Glasgow Coma Score:",
                    ),
                ),
                (
                    "neurological_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name='If "Other CN palsy", specify',
                    ),
                ),
                (
                    "focal_neurologic_deficit",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name='If "Focal neurologic deficit" chosen, please specify details:',
                    ),
                ),
                (
                    "visual_acuity_day",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Study day visual acuity recorded?",
                    ),
                ),
                (
                    "left_acuity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=4,
                        null=True,
                        verbose_name="Visual acuity left eye:",
                    ),
                ),
                (
                    "right_acuity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=4,
                        null=True,
                        verbose_name="Visual acuity right eye",
                    ),
                ),
                (
                    "ecog_score",
                    models.CharField(
                        choices=[
                            (
                                "0",
                                "Fully active, able to carry on all pre-disease performance without restriction",
                            ),
                            (
                                "1",
                                "Restricted in physically strenuous activity but ambulatory and able to carry out work of a light or sedentary nature, e.g., light house work, office work",
                            ),
                            (
                                "2",
                                "Ambulatory and capable of all self-care but unable to carry out any work activities; up and about more than 50% of waking hours ",
                            ),
                            (
                                "3",
                                "Capable of only limited self-care; confined to bed or chair more than 50% of waking hours",
                            ),
                            (
                                "4",
                                "Completely disabled; cannot carry on any self-care; totally confined to bed or chair",
                            ),
                            ("5", "Deceased"),
                        ],
                        max_length=15,
                        verbose_name="ECOG Disability Score",
                    ),
                ),
                (
                    "ecog_score_value",
                    models.CharField(
                        choices=[
                            (
                                "0",
                                "Fully active, able to carry on all pre-disease performance without restriction",
                            ),
                            (
                                "1",
                                "Restricted in physically strenuous activity but ambulatory and able to carry out work of a light or sedentary nature, e.g., light house work, office work",
                            ),
                            (
                                "2",
                                "Ambulatory and capable of all self-care but unable to carry out any work activities; up and about more than 50% of waking hours ",
                            ),
                            (
                                "3",
                                "Capable of only limited self-care; confined to bed or chair more than 50% of waking hours",
                            ),
                            (
                                "4",
                                "Completely disabled; cannot carry on any self-care; totally confined to bed or chair",
                            ),
                            ("5", "Deceased"),
                        ],
                        max_length=15,
                        verbose_name="ECOG Score",
                    ),
                ),
                (
                    "lung_exam",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Abnormal lung exam:",
                    ),
                ),
                (
                    "cryptococcal_lesions",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Cryptococcal related skin lesions:",
                    ),
                ),
                (
                    "specify_medications_other",
                    models.TextField(blank=True, max_length=150, null=True),
                ),
                (
                    "previous_oi",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Previous opportunistic infection other than TB?",
                    ),
                ),
                (
                    "neurological",
                    models.ManyToManyField(
                        blank=True, to="ambition_lists.Neurological"
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
                (
                    "specify_medications",
                    models.ManyToManyField(blank=True, to="ambition_lists.Medication"),
                ),
            ],
            options={
                "verbose_name": "Patient's History",
                "verbose_name_plural": "Patient's History",
                "abstract": False,
            },
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="PkPdCrf",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "albumin",
                    models.IntegerField(
                        blank=True,
                        help_text="Units in g/L",
                        null=True,
                        verbose_name="Albumin",
                    ),
                ),
                (
                    "ambisome_dose",
                    models.IntegerField(
                        blank=True,
                        help_text="Units in mg",
                        null=True,
                        verbose_name="Ambisome dose given",
                    ),
                ),
                (
                    "ambisome_started_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time Ambisome infusion started?",
                    ),
                ),
                (
                    "ambisome_ended_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time Ambisome infusion stopped",
                    ),
                ),
                (
                    "full_ambisome_dose_given",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        null=True,
                        verbose_name="Was the entire Ambisome dose given?",
                    ),
                ),
                (
                    "flucytosine_dose",
                    models.IntegerField(
                        blank=True,
                        help_text="Units in mg",
                        null=True,
                        verbose_name="What was the dose of Flucytosine given?",
                    ),
                ),
                (
                    "flucytosine_dose_one_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time Flucytosine <u>DOSE&nbsp;1</u> was swallowed?",
                    ),
                ),
                (
                    "flucytosine_dose_two_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time Flucytosine <u>DOSE&nbsp;2</u> was swallowed?",
                    ),
                ),
                (
                    "flucytosine_dose_three_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time Flucytosine <u>DOSE&nbsp;3</u> was swallowed?",
                    ),
                ),
                (
                    "flucytosine_dose_four_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time Flucytosine <u>DOSE&nbsp;4</u> was swallowed?",
                    ),
                ),
                (
                    "flucytosine_missed",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        null=True,
                        verbose_name="Were any Flucytosine doses missed?",
                    ),
                ),
                (
                    "reason_flucytosine_dose_missed",
                    models.CharField(
                        blank=True,
                        max_length=75,
                        null=True,
                        verbose_name="Why was/were the dose(s) missed?",
                    ),
                ),
                (
                    "fluconazole_dose_given",
                    models.IntegerField(
                        blank=True,
                        help_text="Units in mg",
                        null=True,
                        verbose_name="What was the dose of Fluconazole given?",
                    ),
                ),
                (
                    "fluconazole_dose_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time Fluconazole was swallowed?",
                    ),
                ),
                (
                    "fluconazole_dose_missed",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        null=True,
                        verbose_name="Was the Fluconazole dose missed?",
                    ),
                ),
                (
                    "reason_fluconazole_dose_missed",
                    models.CharField(
                        blank=True,
                        max_length=75,
                        null=True,
                        verbose_name="Why was the Fluconazole dose missed?",
                    ),
                ),
                (
                    "blood_sample_one_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time blood <u>SAMPLE&nbsp;1</u> taken?",
                    ),
                ),
                (
                    "blood_sample_two_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time blood <u>SAMPLE&nbsp;2</u> taken?",
                    ),
                ),
                (
                    "blood_sample_three_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time blood <u>SAMPLE&nbsp;3</u> taken?",
                    ),
                ),
                (
                    "blood_sample_four_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time blood <u>SAMPLE&nbsp;4</u> taken?",
                    ),
                ),
                (
                    "blood_sample_five_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time blood <u>SAMPLE&nbsp;5</u> taken?",
                    ),
                ),
                (
                    "blood_sample_six_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time blood <u>SAMPLE&nbsp;6</u> taken?",
                    ),
                ),
                (
                    "blood_sample_missed",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        null=True,
                        verbose_name="Were any blood samples missed?",
                    ),
                ),
                (
                    "reason_blood_sample_missed",
                    models.CharField(
                        blank=True,
                        max_length=75,
                        null=True,
                        verbose_name="Why was/were the blood sample(s) missed??",
                    ),
                ),
                (
                    "pre_dose_lp",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        null=True,
                        verbose_name="Is this a pre-dose LP?",
                    ),
                ),
                (
                    "post_dose_lp",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        null=True,
                        verbose_name="Is this a post-dose LP?",
                    ),
                ),
                (
                    "time_csf_sample_taken",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="What date and time was the CSF sample taken?",
                    ),
                ),
                (
                    "flucytosine_dose_missed",
                    models.ManyToManyField(
                        blank=True,
                        to="ambition_lists.MissedDoses",
                        verbose_name="Which dose(s) was/were missed?",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "PK/PD",
                "verbose_name_plural": "PK/PD",
                "abstract": False,
            },
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="PkPdExtraSamples",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "extra_csf_samples_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="If any further CSF samples were taken, please add here the exact date and time sample was taken",
                    ),
                ),
                (
                    "extra_blood_samples_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="If any further blood samples were taken, please add here the exact date and time sample was taken",
                    ),
                ),
                (
                    "pk_pd_crf",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ambition_subject.PkPdCrf",
                    ),
                ),
            ],
            options={
                "verbose_name": "PK/PD Extra Samples",
                "verbose_name_plural": "PK/PD Extra Samples",
            },
        ),
        migrations.CreateModel(
            name="PreviousOpportunisticInfection",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "previous_non_tb_oi",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("kaposi_sarcoma", "Kaposi Sarcoma"),
                            ("herpes_zoster_virus", "Herpes-Zoster virus"),
                            ("oesophageal_candidiasis", "Oesophageal Candidiasis"),
                            ("PCP", "PCP"),
                            ("cytomegalovirus", "Cytomegalovirus"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        verbose_name="If other previous opportunistic infection, please specify.",
                    ),
                ),
                (
                    "previous_non_tb_oi_other",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "previous_non_tb_oi_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="If infection, what was the date?",
                    ),
                ),
                (
                    "patient_history",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ambition_subject.PatientHistory",
                    ),
                ),
            ],
            options={"verbose_name_plural": "Previous Opportunistic Infection"},
        ),
        migrations.CreateModel(
            name="Radiology",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "cxr_done",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Is CXR done",
                    ),
                ),
                (
                    "cxr_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="If yes, when was CXR done",
                    ),
                ),
                (
                    "cxr_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Description/Comments"
                    ),
                ),
                (
                    "ct_performed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="CT/MRI brain scan performed?",
                    ),
                ),
                (
                    "ct_performed_date",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Date CT performed",
                    ),
                ),
                (
                    "scanned_with_contrast",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=5,
                        verbose_name="CT/MRI brain scan performed with contrast?",
                    ),
                ),
                (
                    "brain_imaging_reason",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("reduction_in_gcs", "Reduction in GCS"),
                            ("new_neurology", "New neurology"),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=25,
                        null=True,
                        verbose_name="Reason for brain imaging",
                    ),
                ),
                (
                    "brain_imaging_reason_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other, please specify",
                    ),
                ),
                (
                    "are_results_abnormal",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=5,
                    ),
                ),
                (
                    "abnormal_results_reason_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other, please specify reason",
                    ),
                ),
                (
                    "infarcts_location",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If results are abnormal because of Infarcts, what is the location?",
                    ),
                ),
                (
                    "abnormal_results_reason",
                    models.ManyToManyField(
                        blank=True,
                        to="ambition_lists.AbnormalResultsReason",
                        verbose_name="If results are abnormal, what is the reason?",
                    ),
                ),
                (
                    "cxr_type",
                    models.ManyToManyField(
                        blank=True,
                        to="ambition_lists.CXRType",
                        verbose_name="If YES, result",
                    ),
                ),
                (
                    "infiltrate_location",
                    models.ManyToManyField(
                        blank=True,
                        to="ambition_lists.InfiltrateLocation",
                        verbose_name="If infiltrates, specify location",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "Radiology",
                "verbose_name_plural": "Radiology",
                "abstract": False,
            },
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="SignificantDiagnoses",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "possible_diagnoses",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("pulmonary_tb", "Pulmonary TB"),
                            ("extra_pulmonary_tb", "Extra-pulmonary TB"),
                            ("kaposi_sarcoma", "Kaposi-sarcoma"),
                            ("malaria", "Malaria"),
                            ("bacteraemia", "Bacteraemia"),
                            ("pneumonia", "Pneumonia"),
                            ("diarrhoeal_wasting", "Diarrhoeal wasting"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="Significant diagnoses:",
                    ),
                ),
                (
                    "dx_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Date of diagnosis:",
                    ),
                ),
                (
                    "dx_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other, please specify:",
                    ),
                ),
            ],
            options={
                "verbose_name": "Significant Diagnosis",
                "verbose_name_plural": "Significant Diagnoses",
            },
        ),
        migrations.CreateModel(
            name="SubjectConsent",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(max_length=50, verbose_name="Subject Identifier"),
                ),
                (
                    "subject_identifier_as_pk",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "subject_identifier_aka",
                    models.CharField(
                        editable=False,
                        help_text="track a previously allocated identifier.",
                        max_length=50,
                        null=True,
                        verbose_name="Subject Identifier a.k.a",
                    ),
                ),
                (
                    "slug",
                    models.CharField(
                        db_index=True,
                        default="",
                        editable=False,
                        help_text="a field used for quick search",
                        max_length=250,
                        null=True,
                    ),
                ),
                (
                    "citizen",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=3,
                        verbose_name="Is the participant a Botswana citizen? ",
                    ),
                ),
                (
                    "legal_marriage",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="If 'No', participant may not be consented.",
                        max_length=3,
                        null=True,
                        verbose_name="If not a citizen, is the participant legally married to a Botswana citizen?",
                    ),
                ),
                (
                    "marriage_certificate",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        help_text="If 'No', participant may not be consented.",
                        max_length=3,
                        null=True,
                        verbose_name="[Interviewer] Has the participant produced the marriage certificate as proof? ",
                    ),
                ),
                (
                    "marriage_certificate_no",
                    models.CharField(
                        blank=True,
                        help_text="e.g. 000/YYYY",
                        max_length=9,
                        null=True,
                        verbose_name="What is the marriage certificate number?",
                    ),
                ),
                (
                    "identity",
                    django_crypto_fields.fields.identity_field.IdentityField(
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        verbose_name="Identity number",
                    ),
                ),
                (
                    "identity_type",
                    models.CharField(
                        max_length=25,
                        verbose_name="What type of identity number is this?",
                    ),
                ),
                (
                    "confirm_identity",
                    django_crypto_fields.fields.identity_field.IdentityField(
                        help_text="Retype the identity number (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                    ),
                ),
                (
                    "first_name",
                    django_crypto_fields.fields.firstname_field.FirstnameField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                    ),
                ),
                (
                    "last_name",
                    django_crypto_fields.fields.lastname_field.LastnameField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                        verbose_name="Last name",
                    ),
                ),
                (
                    "initials",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Ensure initials consist of letters only in upper case, no spaces.",
                                regex="^[A-Z]{2,3}$",
                            )
                        ],
                    ),
                ),
                ("dob", models.DateField(null=True, verbose_name="Date of birth")),
                (
                    "is_dob_estimated",
                    edc_model_fields.fields.date_estimated.IsDateEstimatedField(
                        choices=[
                            ("-", "No"),
                            ("D", "Yes, estimated the Day"),
                            ("MD", "Yes, estimated Month and Day"),
                            ("YMD", "Yes, estimated Year, Month and Day"),
                        ],
                        help_text="If the exact date is not known, please indicate which part of the date is estimated.",
                        max_length=25,
                        null=True,
                        verbose_name="Is date of birth estimated?",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female"), ("U", "Undetermined")],
                        max_length=1,
                        null=True,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "guardian_name",
                    django_crypto_fields.fields.lastname_field.LastnameField(
                        blank=True,
                        help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                        validators=[edc_consent.validators.FullNameValidator()],
                        verbose_name="Guardian's last and first name",
                    ),
                ),
                ("subject_type", models.CharField(max_length=25)),
                (
                    "consent_reviewed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If no, participant is not eligible.",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes],
                        verbose_name="I have reviewed the consent with the participant",
                    ),
                ),
                (
                    "study_questions",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If no, participant is not eligible.",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes],
                        verbose_name="I have answered all questions the participant had about the study",
                    ),
                ),
                (
                    "assessment_score",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If no, participant is not eligible.",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes],
                        verbose_name="I have asked the participant questions about this study and the participant has demonstrated understanding",
                    ),
                ),
                (
                    "consent_signature",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If no, participant is not eligible.",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes],
                        verbose_name="I have verified that the participant has signed the consent form",
                    ),
                ),
                (
                    "consent_copy",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("Declined", "Yes, but subject declined copy"),
                        ],
                        help_text="If declined, return copy with the consent",
                        max_length=20,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes_or_declined],
                        verbose_name="I have provided the participant with a copy of their signed informed consent",
                    ),
                ),
                (
                    "may_store_genetic_samples",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Does the participant agree that a portion of the blood sample that is taken be stored for genetic analysis?",
                    ),
                ),
                (
                    "may_store_samples",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=3,
                        verbose_name="Does the participant agree to have samples stored after the study has ended",
                    ),
                ),
                (
                    "is_incarcerated",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="( if 'Yes' STOP participant cannot be consented )",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_no],
                        verbose_name="Is the participant under involuntary incarceration?",
                    ),
                ),
                (
                    "is_literate",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If 'No' provide witness's name on this form and signature on the paper document.",
                        max_length=3,
                        verbose_name="Is the participant literate?",
                    ),
                ),
                (
                    "witness_name",
                    django_crypto_fields.fields.lastname_field.LastnameField(
                        blank=True,
                        help_text="Required only if participant is illiterate.<br>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                        validators=[edc_consent.validators.FullNameValidator()],
                        verbose_name="Witness's last and first name",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("af", "Afrikaans"),
                            ("ny", "Chichewa"),
                            ("en", "English"),
                            ("xh", "isiXhosa"),
                            ("lg", "Luganda"),
                            ("rny", "Runyankore"),
                            ("tn", "Setswana"),
                            ("sn", "Shona"),
                        ],
                        help_text="The language used for the consent process will also be used during data collection.",
                        max_length=25,
                        verbose_name="Language of consent",
                    ),
                ),
                ("is_verified", models.BooleanField(default=False, editable=False)),
                (
                    "is_verified_datetime",
                    models.DateTimeField(editable=False, null=True),
                ),
                (
                    "verified_by",
                    models.CharField(editable=False, max_length=25, null=True),
                ),
                (
                    "consent_datetime",
                    models.DateTimeField(
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Consent date and time",
                    ),
                ),
                ("report_datetime", models.DateTimeField(editable=False, null=True)),
                (
                    "version",
                    models.CharField(
                        editable=False,
                        help_text="See 'Consent Type' for consent versions by period.",
                        max_length=10,
                        verbose_name="Consent version",
                    ),
                ),
                ("updates_versions", models.BooleanField(default=False)),
                (
                    "sid",
                    models.CharField(
                        blank=True,
                        editable=False,
                        help_text="Used for randomization against a prepared rando-list.",
                        max_length=15,
                        null=True,
                        verbose_name="SID",
                    ),
                ),
                (
                    "comment",
                    django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                        blank=True,
                        help_text=" (Encryption: AES local)",
                        max_length=250,
                        null=True,
                        verbose_name="Comment",
                    ),
                ),
                (
                    "dm_comment",
                    models.CharField(
                        editable=False,
                        help_text="see also edc.data manager.",
                        max_length=150,
                        null=True,
                        verbose_name="Data Management comment",
                    ),
                ),
                (
                    "consent_identifier",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="A unique identifier for this consent instance",
                    ),
                ),
                (
                    "screening_identifier",
                    models.CharField(
                        max_length=50, verbose_name="Screening identifier"
                    ),
                ),
                (
                    "completed_by_next_of_kin",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        editable=False,
                        max_length=10,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "ordering": ("created",),
                "get_latest_by": "consent_datetime",
                "abstract": False,
            },
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="SubjectReconsent",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="Subject Identifier"
                    ),
                ),
                (
                    "subject_identifier_as_pk",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "subject_identifier_aka",
                    models.CharField(
                        editable=False,
                        help_text="track a previously allocated identifier.",
                        max_length=50,
                        null=True,
                        verbose_name="Subject Identifier a.k.a",
                    ),
                ),
                ("tracking_identifier", models.CharField(max_length=30, unique=True)),
                (
                    "slug",
                    models.CharField(
                        db_index=True,
                        default="",
                        editable=False,
                        help_text="a field used for quick search",
                        max_length=250,
                        null=True,
                    ),
                ),
                ("action_identifier", models.CharField(max_length=25, null=True)),
                (
                    "consent_reviewed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If no, participant is not eligible.",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes],
                        verbose_name="I have reviewed the consent with the participant",
                    ),
                ),
                (
                    "study_questions",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If no, participant is not eligible.",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes],
                        verbose_name="I have answered all questions the participant had about the study",
                    ),
                ),
                (
                    "assessment_score",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If no, participant is not eligible.",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes],
                        verbose_name="I have asked the participant questions about this study and the participant has demonstrated understanding",
                    ),
                ),
                (
                    "consent_signature",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If no, participant is not eligible.",
                        max_length=3,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes],
                        verbose_name="I have verified that the participant has signed the consent form",
                    ),
                ),
                (
                    "consent_copy",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("Declined", "Yes, but subject declined copy"),
                        ],
                        help_text="If declined, return copy with the consent",
                        max_length=20,
                        null=True,
                        validators=[edc_consent.validators.eligible_if_yes_or_declined],
                        verbose_name="I have provided the participant with a copy of their signed informed consent",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(default=edc_utils.date.get_utcnow),
                ),
                (
                    "identity",
                    django_crypto_fields.fields.identity_field.IdentityField(
                        help_text="Provide the same identity number provided on the original consent complete by the next of kin. (Encryption: RSA local)",
                        max_length=71,
                        verbose_name="Identity number",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={"verbose_name": "Subject re-consent"},
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="SubjectRequisition",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(max_length=50, verbose_name="Subject Identifier"),
                ),
                (
                    "slug",
                    models.CharField(
                        db_index=True,
                        default="",
                        editable=False,
                        help_text="a field used for quick search",
                        max_length=250,
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "requisition_identifier",
                    models.CharField(
                        editable=False,
                        max_length=50,
                        unique=True,
                        verbose_name="Requisition Id",
                    ),
                ),
                (
                    "identifier_prefix",
                    models.CharField(
                        editable=False, max_length=50, null=True, unique=True
                    ),
                ),
                (
                    "primary_aliquot_identifier",
                    models.CharField(
                        editable=False, max_length=18, null=True, unique=True
                    ),
                ),
                (
                    "requisition_datetime",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="Requisition Date",
                    ),
                ),
                (
                    "drawn_datetime",
                    models.DateTimeField(
                        blank=True,
                        help_text="If not drawn, leave blank. Same as date and time of finger prick in case on DBS.",
                        null=True,
                        verbose_name="Date / Time Specimen Drawn",
                    ),
                ),
                (
                    "is_drawn",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="Yes",
                        help_text="If No, provide a reason below",
                        max_length=3,
                        verbose_name="Was a specimen drawn?",
                    ),
                ),
                (
                    "reason_not_drawn_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "protocol_number",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "clinician_initials",
                    edc_model_fields.fields.InitialsField(
                        blank=True,
                        help_text="Type 2-3 letters, all in uppercase and no spaces",
                        max_length=3,
                        null=True,
                        verbose_name="Initials",
                    ),
                ),
                (
                    "specimen_type",
                    models.CharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name="Specimen type",
                    ),
                ),
                (
                    "item_type",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("tube", "Tube"),
                            ("swab", "Swab"),
                            ("dbs", "DBS Card"),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="Item collection type",
                    ),
                ),
                (
                    "item_count",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of tubes, samples, cards, etc being sent for this test/order only. Determines number of labels to print",
                        null=True,
                        verbose_name="Number of items",
                    ),
                ),
                (
                    "estimated_volume",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text='If applicable, estimated volume of sample for this test/order. This is the total volume if number of "tubes" above is greater than 1',
                        max_digits=7,
                        null=True,
                        verbose_name="Estimated volume in mL",
                    ),
                ),
                ("comments", models.TextField(blank=True, max_length=25, null=True)),
                ("received", models.BooleanField(default=False)),
                ("received_datetime", models.DateTimeField(blank=True, null=True)),
                ("processed", models.BooleanField(default=False)),
                ("processed_datetime", models.DateTimeField(blank=True, null=True)),
                ("packed", models.BooleanField(default=False)),
                ("packed_datetime", models.DateTimeField(blank=True, null=True)),
                ("shipped", models.BooleanField(default=False)),
                ("shipped_datetime", models.DateTimeField(blank=True, null=True)),
                (
                    "reason_not_drawn",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            (
                                "collection_failed",
                                "Tried, but unable to obtain sample from patient",
                            ),
                            ("absent", "Patient did not attend visit"),
                            ("refused", "Patient refused"),
                            ("no_supplies", "No supplies"),
                            ("NOT_REQUIRED", "No longer required for this visit"),
                            ("OTHER", "Other"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="If not drawn, please explain",
                    ),
                ),
                (
                    "panel",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="edc_lab.Panel",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="SubjectVisit",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(max_length=50, verbose_name="Subject Identifier"),
                ),
                (
                    "visit_schedule_name",
                    models.CharField(
                        editable=False,
                        help_text='the name of the visit schedule used to find the "schedule"',
                        max_length=25,
                    ),
                ),
                ("schedule_name", models.CharField(editable=False, max_length=25)),
                (
                    "visit_code",
                    models.CharField(editable=False, max_length=25, null=True),
                ),
                (
                    "visit_code_sequence",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        help_text="An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)",
                        null=True,
                        verbose_name="Sequence",
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="Date and time of this report",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Visit Date and Time",
                    ),
                ),
                (
                    "reason_unscheduled_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name='If "Other" reason for unscheduled visit, specify',
                    ),
                ),
                (
                    "reason_missed",
                    models.CharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If 'Missed' above, provide the reason the scheduled visit was missed",
                    ),
                ),
                (
                    "reason_missed_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name='If "Other" reason for missed visit, specify',
                    ),
                ),
                (
                    "study_status",
                    models.CharField(
                        max_length=50,
                        null=True,
                        verbose_name="What is the participant's current study status",
                    ),
                ),
                (
                    "require_crfs",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="Yes",
                        max_length=10,
                        verbose_name="Are scheduled data being submitted with this visit?",
                    ),
                ),
                (
                    "info_source_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name='If "Other" source of information, specify',
                    ),
                ),
                (
                    "survival_status",
                    models.CharField(
                        choices=[
                            ("alive", "Alive"),
                            ("dead", "Deceased"),
                            ("unknown", "Unknown"),
                        ],
                        default="alive",
                        max_length=10,
                        null=True,
                        verbose_name="Participant's survival status",
                    ),
                ),
                (
                    "last_alive_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            edc_protocol.validators.date_not_before_study_start,
                            edc_model.validators.date.date_not_future,
                        ],
                        verbose_name="Date participant last known alive",
                    ),
                ),
                (
                    "comments",
                    models.TextField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name="Comment if any additional pertinent information about the participant",
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("unscheduled", "Not scheduled"),
                            ("missed", "Missed"),
                        ],
                        max_length=25,
                        verbose_name="What is the reason for this visit report?",
                    ),
                ),
                (
                    "reason_unscheduled",
                    models.CharField(
                        choices=[
                            (
                                "patient_unwell_outpatient",
                                "Patient unwell (outpatient)",
                            ),
                            ("recurrence_symptoms", "Recurrence of symptoms"),
                            ("raised_icp_management", "Raised ICP management"),
                            ("art_initiation", "ART initiation"),
                            ("patient_hospitalised", "Patient hospitalised"),
                            ("OTHER", "Other"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit",
                    ),
                ),
                (
                    "info_source",
                    models.CharField(
                        choices=[
                            ("hospital_notes", "Hospital notes"),
                            ("outpatient_cards", "Outpatient cards"),
                            ("patient", "Patient"),
                            (
                                "collateral_history",
                                "Collateral History from relative/guardian",
                            ),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        verbose_name="What is the main source of this information?",
                    ),
                ),
                (
                    "appointment",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="edc_appointment.Appointment",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "ordering": (
                    "subject_identifier",
                    "visit_schedule_name",
                    "schedule_name",
                    "visit_code",
                    "visit_code_sequence",
                    "report_datetime",
                ),
                "abstract": False,
            },
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="Week16",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "patient_alive",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Is the patient alive?",
                    ),
                ),
                (
                    "death_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="If dead, date and time of death",
                    ),
                ),
                (
                    "activities_help",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        help_text="For example eating, drinking, washing, brushing teeth, going to the toilet.",
                        max_length=5,
                        verbose_name="Does the patient require help from anybody for everyday activities?",
                    ),
                ),
                (
                    "illness_problems",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=5,
                        verbose_name="Has the illness left the patient with any other problems?",
                    ),
                ),
                (
                    "rankin_score",
                    models.CharField(
                        choices=[
                            ("0", "0"),
                            ("1", "1"),
                            ("2", "2"),
                            ("3", "3"),
                            ("4", "4"),
                            ("5", "5"),
                            ("6", "6"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        verbose_name="Modified Rankin score",
                    ),
                ),
                (
                    "week16_narrative",
                    models.TextField(
                        blank=True, max_length=1000, null=True, verbose_name="Narrative"
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
                (
                    "subject_visit",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ambition_subject.SubjectVisit",
                    ),
                ),
            ],
            options={"verbose_name_plural": "Week16", "abstract": False},
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="Week2",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "physical_symptoms",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Physical symptoms",
                    ),
                ),
                (
                    "headache",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Headache",
                    ),
                ),
                (
                    "visual_acuity_left_eye",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=4,
                        null=True,
                        verbose_name="Visual acuity Left Eye",
                    ),
                ),
                (
                    "visual_acuity_right_eye",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=4,
                        null=True,
                        verbose_name="Visual acuity Right Eye",
                    ),
                ),
                (
                    "glasgow_coma_score",
                    models.IntegerField(
                        blank=True,
                        help_text="/15",
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(15),
                            django.core.validators.MinValueValidator(3),
                        ],
                        verbose_name="Glasgow Coma Score",
                    ),
                ),
                (
                    "confusion",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Confusion",
                    ),
                ),
                (
                    "recent_seizure_less_72",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Recent seizure (<72 hrs)",
                    ),
                ),
                (
                    "cn_palsy",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="CN palsy",
                    ),
                ),
                (
                    "behaviour_change",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Behaviour change",
                    ),
                ),
                (
                    "focal_neurology",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Focal neurology",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "discharged",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Discharged?",
                    ),
                ),
                (
                    "discharge_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                    ),
                ),
                (
                    "died",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Died?",
                    ),
                ),
                (
                    "death_date_time",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                    ),
                ),
                (
                    "ampho_start_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Amphotericin B start date: ",
                    ),
                ),
                (
                    "ampho_end_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Amphotericin B end date: ",
                    ),
                ),
                (
                    "ampho_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Amphotericin B treatment duration",
                    ),
                ),
                (
                    "flucon_start_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Fluconazole start date:",
                    ),
                ),
                (
                    "flucon_stop_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Fluconazole end date:",
                    ),
                ),
                (
                    "flucon_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Fluconazole treatment duration:",
                    ),
                ),
                (
                    "flucy_start_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Flucytosine start date:",
                    ),
                ),
                (
                    "flucy_stop_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Flucytosine end date:",
                    ),
                ),
                (
                    "flucy_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Flucytosine treatment duration:",
                    ),
                ),
                (
                    "ambi_start_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Ambisome start date:",
                    ),
                ),
                (
                    "ambi_stop_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Ambisome end date:",
                    ),
                ),
                (
                    "ambi_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Ambisome treatment duration:",
                    ),
                ),
                (
                    "drug_intervention_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other, please specify:",
                    ),
                ),
                (
                    "antibiotic_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other antibiotics, please specify:",
                    ),
                ),
                (
                    "blood_received",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Blood transfusion received?",
                    ),
                ),
                (
                    "units",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="If YES, no. of units",
                    ),
                ),
                (
                    "temperature",
                    models.FloatField(
                        blank=True, default=None, null=True, verbose_name="Temperature"
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="kg",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(20),
                            django.core.validators.MaxValueValidator(150),
                        ],
                        verbose_name="Weight:",
                    ),
                ),
                (
                    "medicine_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other, please specify:",
                    ),
                ),
                (
                    "significant_dx",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Other significant diagnoses since enrolment?",
                    ),
                ),
                (
                    "significant_dx_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                    ),
                ),
                (
                    "flucon_missed_doses",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Were any Fluconazole drug doses missed?",
                    ),
                ),
                (
                    "amphotericin_missed_doses",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Were any Amphotericin B drug doses missed?",
                    ),
                ),
                (
                    "other_significant_dx",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Other significant diagnosis since enrollment?",
                    ),
                ),
                (
                    "antibiotic",
                    models.ManyToManyField(
                        blank=True,
                        to="ambition_lists.Antibiotic",
                        verbose_name="Were any of the following antibiotics given?",
                    ),
                ),
                (
                    "drug_intervention",
                    models.ManyToManyField(
                        to="ambition_lists.OtherDrug",
                        verbose_name="Other drugs/interventions given during first 14 days",
                    ),
                ),
                (
                    "medicines",
                    models.ManyToManyField(
                        to="ambition_lists.Day14Medication",
                        verbose_name="Medicine day 14:",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
                (
                    "subject_visit",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ambition_subject.SubjectVisit",
                    ),
                ),
            ],
            options={
                "verbose_name": "Week 2",
                "verbose_name_plural": "Week 2",
                "abstract": False,
            },
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="Week4",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "form_as_json",
                    models.TextField(
                        editable=False,
                        help_text="System field to save form.as_json. form.as_json should be called in modeladmin.save_model",
                        null=True,
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "physical_symptoms",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Physical symptoms",
                    ),
                ),
                (
                    "headache",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Headache",
                    ),
                ),
                (
                    "visual_acuity_left_eye",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=4,
                        null=True,
                        verbose_name="Visual acuity Left Eye",
                    ),
                ),
                (
                    "visual_acuity_right_eye",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=4,
                        null=True,
                        verbose_name="Visual acuity Right Eye",
                    ),
                ),
                (
                    "glasgow_coma_score",
                    models.IntegerField(
                        blank=True,
                        help_text="/15",
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(15),
                            django.core.validators.MinValueValidator(3),
                        ],
                        verbose_name="Glasgow Coma Score",
                    ),
                ),
                (
                    "confusion",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Confusion",
                    ),
                ),
                (
                    "recent_seizure_less_72",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Recent seizure (<72 hrs)",
                    ),
                ),
                (
                    "cn_palsy",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="CN palsy",
                    ),
                ),
                (
                    "behaviour_change",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Behaviour change",
                    ),
                ),
                (
                    "focal_neurology",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_done", "Not done"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Focal neurology",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "fluconazole_dose",
                    models.CharField(
                        choices=[
                            ("800mg_daily", "800mg daily"),
                            ("OTHER", "Other"),
                            ("not_done", "Not done"),
                        ],
                        max_length=25,
                        verbose_name="Fluconazole dose (day prior to visit)",
                    ),
                ),
                (
                    "fluconazole_dose_other",
                    edc_model_fields.fields.OtherCharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "rifampicin_started",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("already_on_rifampicin", "Already on Rifampicin"),
                            ("not_done", "Not done"),
                        ],
                        max_length=25,
                        verbose_name="Rifampicin started since last visit?",
                    ),
                ),
                (
                    "rifampicin_start_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Date Rifampicin started",
                    ),
                ),
                (
                    "lp_done",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If yes, ensure LP CRF completed.",
                        max_length=5,
                        verbose_name="LP done?",
                    ),
                ),
                (
                    "other_significant_dx",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        max_length=5,
                        verbose_name="Other significant diagnosis since last visit?",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
                (
                    "subject_visit",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ambition_subject.SubjectVisit",
                    ),
                ),
            ],
            options={
                "verbose_name": "Week 4",
                "verbose_name_plural": "Week 4",
                "abstract": False,
            },
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="Week4Diagnoses",
            fields=[
                (
                    "created",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "modified",
                    models.DateTimeField(blank=True, default=edc_utils.date.get_utcnow),
                ),
                (
                    "user_created",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    edc_model_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    edc_model_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    edc_model_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "possible_diagnoses",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("pulmonary_tb", "Pulmonary TB"),
                            ("extra_pulmonary_tb", "Extra-pulmonary TB"),
                            ("kaposi_sarcoma", "Kaposi-sarcoma"),
                            ("malaria", "Malaria"),
                            ("bacteraemia", "Bacteraemia"),
                            ("pneumonia", "Pneumonia"),
                            ("diarrhoeal_wasting", "Diarrhoeal wasting"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="Significant diagnoses:",
                    ),
                ),
                (
                    "dx_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Date of diagnosis:",
                    ),
                ),
                (
                    "dx_other",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="If other, please specify:",
                    ),
                ),
                (
                    "week4",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ambition_subject.Week4",
                    ),
                ),
            ],
            options={
                "verbose_name": "Week 4 Diagnoses",
                "verbose_name_plural": "Week 4 Diagnoses",
            },
        ),
        migrations.AddField(
            model_name="subjectrequisition",
            name="subject_visit",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="significantdiagnoses",
            name="week2",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="ambition_subject.Week2"
            ),
        ),
        migrations.AddField(
            model_name="radiology",
            name="subject_visit",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="pkpdcrf",
            name="subject_visit",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="patienthistory",
            name="subject_visit",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="patienthistory",
            name="symptom",
            field=models.ManyToManyField(
                blank=True,
                related_name="symptoms",
                to="ambition_lists.Symptom",
                verbose_name="What are your current symptoms?",
            ),
        ),
        migrations.AddField(
            model_name="microbiology",
            name="subject_visit",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="medicalexpensestwo",
            name="subject_visit",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="medicalexpenses",
            name="subject_visit",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="lumbarpuncturecsf",
            name="csf_requisition",
            field=models.ForeignKey(
                blank=True,
                help_text="Start typing the requisition identifier or select one from this visit",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="csfrequisition",
                to="ambition_subject.SubjectRequisition",
                verbose_name="CSF Requisition",
            ),
        ),
        migrations.AddField(
            model_name="lumbarpuncturecsf",
            name="qc_requisition",
            field=models.ForeignKey(
                blank=True,
                help_text="Start typing the requisition identifier or select one from this visit",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="qcrequisition",
                to="ambition_subject.SubjectRequisition",
                verbose_name="QC Requisition",
            ),
        ),
        migrations.AddField(
            model_name="lumbarpuncturecsf",
            name="site",
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="sites.Site",
            ),
        ),
        migrations.AddField(
            model_name="lumbarpuncturecsf",
            name="subject_visit",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="historicalweek4diagnoses",
            name="week4",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.Week4",
            ),
        ),
        migrations.AddField(
            model_name="historicalweek4",
            name="subject_visit",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="historicalweek2",
            name="subject_visit",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="historicalweek16",
            name="subject_visit",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="historicalsubjectrequisition",
            name="subject_visit",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="historicalsignificantdiagnoses",
            name="week2",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.Week2",
            ),
        ),
        migrations.AddField(
            model_name="historicalradiology",
            name="subject_visit",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="historicalpreviousopportunisticinfection",
            name="patient_history",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.PatientHistory",
            ),
        ),
        migrations.AddField(
            model_name="historicalpkpdextrasamples",
            name="pk_pd_crf",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.PkPdCrf",
            ),
        ),
        migrations.AddField(
            model_name="historicalpkpdcrf",
            name="subject_visit",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="historicalpatienthistory",
            name="subject_visit",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="historicalmicrobiology",
            name="subject_visit",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="historicalmedicalexpensestwodetail",
            name="medical_expenses_two",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.MedicalExpensesTwo",
            ),
        ),
        migrations.AddField(
            model_name="historicalmedicalexpensestwo",
            name="subject_visit",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="historicalmedicalexpenses",
            name="subject_visit",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="historicallumbarpuncturecsf",
            name="csf_requisition",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectRequisition",
            ),
        ),
        migrations.AddField(
            model_name="historicallumbarpuncturecsf",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicallumbarpuncturecsf",
            name="qc_requisition",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectRequisition",
            ),
        ),
        migrations.AddField(
            model_name="historicallumbarpuncturecsf",
            name="site",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="sites.Site",
            ),
        ),
        migrations.AddField(
            model_name="historicallumbarpuncturecsf",
            name="subject_visit",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="historicalfollowup",
            name="subject_visit",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="historicalflucytosinemisseddoses",
            name="week2",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.Week2",
            ),
        ),
        migrations.AddField(
            model_name="historicalfluconazolemisseddoses",
            name="week2",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.Week2",
            ),
        ),
        migrations.AddField(
            model_name="historicaleducationhoh",
            name="subject_visit",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="historicaleducation",
            name="subject_visit",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="historicalbloodresult",
            name="cbc_requisition",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectRequisition",
            ),
        ),
        migrations.AddField(
            model_name="historicalbloodresult",
            name="cd4_requisition",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectRequisition",
            ),
        ),
        migrations.AddField(
            model_name="historicalbloodresult",
            name="ft_requisition",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectRequisition",
            ),
        ),
        migrations.AddField(
            model_name="historicalbloodresult",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalbloodresult",
            name="site",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="sites.Site",
            ),
        ),
        migrations.AddField(
            model_name="historicalbloodresult",
            name="subject_visit",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="historicalbloodresult",
            name="vl_requisition",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.SubjectRequisition",
            ),
        ),
        migrations.AddField(
            model_name="historicalamphotericinmisseddoses",
            name="week2",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ambition_subject.Week2",
            ),
        ),
        migrations.AddField(
            model_name="followup",
            name="subject_visit",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="flucytosinemisseddoses",
            name="week2",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="ambition_subject.Week2"
            ),
        ),
        migrations.AddField(
            model_name="fluconazolemisseddoses",
            name="week2",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="ambition_subject.Week2"
            ),
        ),
        migrations.AddField(
            model_name="educationhoh",
            name="subject_visit",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="education",
            name="subject_visit",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="bloodresult",
            name="cbc_requisition",
            field=models.ForeignKey(
                blank=True,
                help_text="Start typing the requisition identifier or select one from this visit",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="cbc",
                to="ambition_subject.SubjectRequisition",
                verbose_name="Requisition",
            ),
        ),
        migrations.AddField(
            model_name="bloodresult",
            name="cd4_requisition",
            field=models.ForeignKey(
                blank=True,
                help_text="Start typing the requisition identifier or select one from this visit",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="cd4",
                to="ambition_subject.SubjectRequisition",
                verbose_name="Requisition",
            ),
        ),
        migrations.AddField(
            model_name="bloodresult",
            name="ft_requisition",
            field=models.ForeignKey(
                blank=True,
                help_text="Start typing the requisition identifier or select one from this visit",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="ft",
                to="ambition_subject.SubjectRequisition",
                verbose_name="Requisition",
            ),
        ),
        migrations.AddField(
            model_name="bloodresult",
            name="site",
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="sites.Site",
            ),
        ),
        migrations.AddField(
            model_name="bloodresult",
            name="subject_visit",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                to="ambition_subject.SubjectVisit",
            ),
        ),
        migrations.AddField(
            model_name="bloodresult",
            name="vl_requisition",
            field=models.ForeignKey(
                blank=True,
                help_text="Start typing the requisition identifier or select one from this visit",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="vl",
                to="ambition_subject.SubjectRequisition",
                verbose_name="Requisition",
            ),
        ),
        migrations.AddField(
            model_name="amphotericinmisseddoses",
            name="week2",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="ambition_subject.Week2"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="week4diagnoses",
            unique_together={("week4", "possible_diagnoses", "dx_date")},
        ),
        migrations.AlterUniqueTogether(
            name="subjectvisit",
            unique_together={
                (
                    "subject_identifier",
                    "visit_schedule_name",
                    "schedule_name",
                    "visit_code",
                    "visit_code_sequence",
                ),
                (
                    "subject_identifier",
                    "visit_schedule_name",
                    "schedule_name",
                    "report_datetime",
                ),
            },
        ),
        migrations.AlterUniqueTogether(
            name="subjectrequisition", unique_together={("panel", "subject_visit")}
        ),
        migrations.AlterUniqueTogether(
            name="subjectconsent",
            unique_together={
                ("first_name", "dob", "initials", "version"),
                ("subject_identifier", "version"),
                ("subject_identifier", "screening_identifier"),
            },
        ),
        migrations.AlterUniqueTogether(
            name="significantdiagnoses",
            unique_together={("week2", "possible_diagnoses", "dx_date", "dx_other")},
        ),
        migrations.AlterUniqueTogether(
            name="previousopportunisticinfection",
            unique_together={
                ("patient_history", "previous_non_tb_oi", "previous_non_tb_oi_date")
            },
        ),
        migrations.AlterUniqueTogether(
            name="pkpdextrasamples",
            unique_together={
                (
                    "pk_pd_crf",
                    "extra_csf_samples_datetime",
                    "extra_blood_samples_datetime",
                )
            },
        ),
        migrations.AlterUniqueTogether(
            name="medicalexpensestwodetail",
            unique_together={("medical_expenses_two", "location_care")},
        ),
        migrations.AlterUniqueTogether(
            name="followupdiagnoses",
            unique_together={("follow_up", "possible_diagnoses", "dx_date")},
        ),
        migrations.AlterUniqueTogether(
            name="flucytosinemisseddoses",
            unique_together={
                (
                    "week2",
                    "flucy_day_missed",
                    "flucy_doses_missed",
                    "flucy_missed_reason",
                )
            },
        ),
        migrations.AlterUniqueTogether(
            name="fluconazolemisseddoses",
            unique_together={("week2", "flucon_day_missed", "flucon_missed_reason")},
        ),
        migrations.AlterUniqueTogether(
            name="amphotericinmisseddoses",
            unique_together={("week2", "ampho_day_missed", "ampho_missed_reason")},
        ),
    ]
