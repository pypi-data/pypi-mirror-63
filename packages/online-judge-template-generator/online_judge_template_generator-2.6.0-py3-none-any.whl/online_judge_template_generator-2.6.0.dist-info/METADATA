Metadata-Version: 2.1
Name: online-judge-template-generator
Version: 2.6.0
Summary: A simple template generator for competitive programming
Home-page: https://github.com/kmyk/online-judge-template-generator
Author: Kimiyuki Onaka
Author-email: kimiyuki95@gmail.com
License: MIT License
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.6
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Software Development :: Code Generators
Classifier: Topic :: Utilities
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: appdirs (>=1.4)
Requires-Dist: beautifulsoup4 (>=4.8)
Requires-Dist: Mako (>=1.1)
Requires-Dist: online-judge-tools (>=9)
Requires-Dist: ply (>=3)
Requires-Dist: pyyaml (>=5)
Requires-Dist: requests (>=2.23)
Requires-Dist: sympy (>=1.5)
Requires-Dist: toml (>=0.10)
Provides-Extra: dev
Requires-Dist: isort (==4.3.21) ; extra == 'dev'
Requires-Dist: mypy (==0.740) ; extra == 'dev'
Requires-Dist: pylint (==2.4.3) ; extra == 'dev'
Requires-Dist: yapf (==0.28.0) ; extra == 'dev'

# Online Judge Template Generator

[![test](https://github.com/kmyk/online-judge-template-generator/workflows/test/badge.svg)](https://github.com/kmyk/online-judge-template-generator/actions)
[![PyPI](https://img.shields.io/pypi/v/online-judge-template-generator)](https://pypi.org/project/online-judge-template-generator/)
[![LICENSE](https://img.shields.io/pypi/l/online-judge-template-generator.svg)](https://github.com/kmyk/online-judge-template-generator/blob/master/LICENSE)

**CAUTION: now developping. it's unstable yet**

まだ不安定版なので嘘が出力されてても怒らないでね。
そのうち実装することのリストは [TODO](https://github.com/kmyk/online-judge-template-generator/issues/2) にあります


## これはなに

競技プログラミングテンプレートを作ってくれるやつです。
[kyuridenamida/atcoder-tools](https://github.com/kyuridenamida/atcoder-tools) を参考に、その本質部分だけを抜き出して再実装しました。

主目的は以下のふたつです:

-   不適切な入出力方法を用いたことによる TLE を回避すること。たとえば「Codeforces で `std::endl` を使って TLE する」みたいなのをなくしたい
-   ランダムケースを生成してのテストを気軽に行えるようにすること。たとえば、サンプル AC して提出してみたら謎の WA が出たとき「これランダムケース生成して愚直解と比較すれば原因分かるだろうけど、面倒なんだよな」ってなりがちですが、この面倒を半減させ高速にデバッグできるようにしたい


## How to Install

``` console
$ pip3 install online-judge-template-generator
```


## Usage

`oj-template` コマンドは、指定された問題に対し、入出力パートを自動生成します。
入出力解析は AtCoder と yukicoder と [Library Checker](https://judge.yosupo.jp/) にのみ対応していますが、それら以外でも一応は動きます。

``` console
$ oj-template [-t template] URL
```

`oj-contest` コマンドは、指定された問題やコンテストに対し、テンプレート生成やサンプルのダウンロードを一括で行います。
[oj](https://github.com/kmyk/online-judge-tools) が動くやつなら何に対してでも動きます。

``` console
$ oj-contest URL
```


## Example

``` console
$ oj-template https://codeforces.com/contest/1300/problem/D
INFO:onlinejudge._implementation.logging:[x] problem recognized: CodeforcesProblem.from_url('https://codeforces.com/contest/1300/problem/D'): https://codeforces.com/contest/1300/problem/D
INFO:onlinejudge._implementation.logging:[x] GET: https://codeforces.com/contest/1300/problem/D
INFO:onlinejudge._implementation.logging:[x] 200 OK
ERROR:onlinejudge_template.analyzer.combined:input analyzer failed:
ERROR:onlinejudge_template.analyzer.combined:output analyzer failed:
#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++ (i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++ (i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; -- (i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); -- (i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

const string YES = "YES";
const string NO = "nO";
bool solve(int vam, const vector<int64_t> & kfi, const vector<int64_t> & vkw) {
    // TODO: edit here
}

// generated by online-judge-template-generator (https://github.com/kmyk/online-judge-template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    constexpr char endl = '\n';
    int vam;
    cin >> vam;
    vector<int64_t> kfi(vam), vkw(vam);
    REP (i, vam) {
        cin >> kfi[i] >> vkw[i];
    }
    bool ans = solve(vam, kfi, vkw);
    cout << (ans ? YES : NO) << endl;
    return 0;
}
```

``` console
$ oj-contest https://atcoder.jp/contests/abc158
...

$ tree ~/atcoder.jp
/home/ubuntu/atcoder.jp
└── abc158
    ├── abc158_a
    │   ├── generate.py
    │   ├── main.cpp
    │   └── test
    │       ├── sample-1.in
    │       ├── sample-1.in
    │       ├── sample-1.out
    │       ├── sample-2.in
    │       ├── sample-2.out
    │       ├── sample-3.in
    │       └── sample-3.out
    ├── ...
    ├── ...
    ├── ...
    ├── ...
    └── abc158_f
        ├── generate.py
        ├── main.cpp
        └── test
            ├── sample-1.in
            ├── sample-1.out
            ├── sample-2.in
            ├── sample-2.out
            ├── sample-3.in
            ├── sample-3.out
            ├── sample-4.in
            └── sample-4.out

13 directories, 50 files
```


## Settings

`oj-template` のためのテンプレートは `~/.config/online-judge-tools/template/` の下に `~/.config/online-judge-tools/template/customized.py` のように作って `oj-template -t customized.py https://...` のように指定する。
テンプレート記法は [Mako](https://www.makotemplates.org/) のものを使う。
[fastio.cpp](https://github.com/kmyk/online-judge-template-generator/blob/master/onlinejudge_template_resources/template/fastio.cpp) とか [customize_sample.cpp](https://github.com/kmyk/online-judge-template-generator/blob/master/onlinejudge_template_resources/template/customize_sample.cpp) とかを見てそれっぽく書けば動く。

`oj-contest` の設定は `~/.config/online-judge-tools/oj2.config.toml` に次のように設定する。

``` toml
problem_directory = "~/{service_domain}/{contest_id}/{problem_id}"

[templates]
"main.cpp" = "template.cpp"
"generate.py" = "generate.py"
```

(まだ不安定版であり、設定等の後方互換性は保証されません)


## Architecture

1.  download and recognize HTML with [requests](https://requests.readthedocs.io/en/master/) + [beautifulsoup4](https://www.crummy.com/software/BeautifulSoup/)
1.  parse the `<pre>` format in old style Lex + Yacc ([ply](http://www.dabeaz.com/ply/))
1.  generate codes with a template engine ([Mako](https://www.makotemplates.org/))


## How it works

たとえば Library Checker の問題 [Static RQM](https://judge.yosupo.jp/problem/staticrmq) について考えてみましょう。
この問題の入力フォーマットは次のようになっています。

```
n m
a₀ a₁ … aₙ₋₁
l₁ r₁
⋮
lₘ rₘ
```

これをまず以下のようなトークン列に分解します。
愚直に貪欲をするだけで、やばい規則もないのでほぼ O(n) です。正規表現で便利に書ける既存のツールがあるのでこれを利用しています。

``` json
[
    "ident(n)", "ident(m)", "newline()",
    "ident(a)", "subscript()", "number(0)", "ident(a)", "subscript()", "number(1)", "dots()", "ident(a)", "subscript()", "ident(n)", "binop(-)", "number(1)", "newline()",
    "ident(l)", "subscript()", "number(1)", "ident(r)", "subscript()", "number(1)", "newline()",
    "vdots(1)", "newline()",
    "ident(l)", "subscript()", "ident(m)", "ident(r)", "subscript()", "ident(m)", "newline()"
]
```

このトークン列を解析して次のような木へ変形します。
まず文脈自由文法で解析できる範囲を処理して木を作った後に、文脈依存ぽい部分を ad-hoc に処理してより整理された木に組み換えています。
文脈自由部分は O(n^3) の愚直な区間 DP (CYK法) でもよいですが、規則を列挙すれば残りをいい感じにやってくれる既存のツール (Yacc) に任せてほぼ線形 (LALR法) で実装されています。

``` json
[
    {"type": "var", "name": "n"},
    {"type": "var", "name": "m"},
    {"type": "newline"},
    {"type": "loop", "counter": "i", "size": "n", "body": [
        {"type": "var", "name": "a", "subscript": "i"}
    ]},
    {"type": "newline"},
    {"type": "loop", "counter": "j", "size": "m", "body": [
        {"type": "var", "name": "l", "subscript": "j + 1"},
        {"type": "var", "name": "r", "subscript": "j + 1"},
        {"type": "newline"}
    ]}
]
```

この木を変換してソースコードにします。
木の畳み込みとか木 DP とか言われる O(n) か O(n²) ぐらいの愚直をします。
何をやっても変換はできますが、(1.) まずフォーマット木を C++ の構文木に写し、(2.) それを最適化し、(3.) これを行の列に直列化し、(4.) インデントを整えて出力する、という 4 段階に分けると実装が楽かつ出力がきれいです。

``` c++
    int n, m;
    scanf("%d%d", &n, &m);
    std::vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        scanf("%d", &a[i]);
    }
    std::vector<int> l(m), r(m);
    for (int j = 0; j < m; ++j) {
        scanf("%d%d", &l[j], &r[j]);
    }
```

この一連の作業をよろしくやってくれるのがこのツールです。


## License

MIT License


