# coding: utf-8

"""
    Kibernetika project, backend component

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from kclient.api_client import ApiClient


class MLModelApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def ml_model_create_version(self, body, workspace, mlmodel, **kwargs):  # noqa: E501
        """ML Model: create version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ml_model_create_version(body, workspace, mlmodel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationApplicationModelVersionRequest body: (required)
        :param str workspace: Workspace's name (required)
        :param str mlmodel: Item's name (ML Model) (required)
        :return: ApplicationApplicationModelVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ml_model_create_version_with_http_info(body, workspace, mlmodel, **kwargs)  # noqa: E501
        else:
            (data) = self.ml_model_create_version_with_http_info(body, workspace, mlmodel, **kwargs)  # noqa: E501
            return data

    def ml_model_create_version_with_http_info(self, body, workspace, mlmodel, **kwargs):  # noqa: E501
        """ML Model: create version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ml_model_create_version_with_http_info(body, workspace, mlmodel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationApplicationModelVersionRequest body: (required)
        :param str workspace: Workspace's name (required)
        :param str mlmodel: Item's name (ML Model) (required)
        :return: ApplicationApplicationModelVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace', 'mlmodel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ml_model_create_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `ml_model_create_version`")  # noqa: E501
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `ml_model_create_version`")  # noqa: E501
        # verify the required parameter 'mlmodel' is set
        if ('mlmodel' not in params or
                params['mlmodel'] is None):
            raise ValueError("Missing the required parameter `mlmodel` when calling `ml_model_create_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'mlmodel' in params:
            path_params['mlmodel'] = params['mlmodel']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.2/workspace/{workspace}/mlmodel/{mlmodel}/versions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationApplicationModelVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ml_model_version_file_delete(self, workspace, mlmodel, version, **kwargs):  # noqa: E501
        """ML Model version delete with files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ml_model_version_file_delete(workspace, mlmodel, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Workspace's name (required)
        :param str mlmodel: Item's name (ML Model) (required)
        :param str version: Item's version (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ml_model_version_file_delete_with_http_info(workspace, mlmodel, version, **kwargs)  # noqa: E501
        else:
            (data) = self.ml_model_version_file_delete_with_http_info(workspace, mlmodel, version, **kwargs)  # noqa: E501
            return data

    def ml_model_version_file_delete_with_http_info(self, workspace, mlmodel, version, **kwargs):  # noqa: E501
        """ML Model version delete with files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ml_model_version_file_delete_with_http_info(workspace, mlmodel, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Workspace's name (required)
        :param str mlmodel: Item's name (ML Model) (required)
        :param str version: Item's version (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'mlmodel', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ml_model_version_file_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `ml_model_version_file_delete`")  # noqa: E501
        # verify the required parameter 'mlmodel' is set
        if ('mlmodel' not in params or
                params['mlmodel'] is None):
            raise ValueError("Missing the required parameter `mlmodel` when calling `ml_model_version_file_delete`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `ml_model_version_file_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'mlmodel' in params:
            path_params['mlmodel'] = params['mlmodel']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.2/workspace/{workspace}/mlmodel/{mlmodel}/versions/{version}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ml_model_version_info(self, workspace, mlmodel, version, **kwargs):  # noqa: E501
        """ML Model version info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ml_model_version_info(workspace, mlmodel, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Workspace's name (required)
        :param str mlmodel: Item's name (ML Model) (required)
        :param str version: Item's version (required)
        :return: ApplicationApplicationModelVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ml_model_version_info_with_http_info(workspace, mlmodel, version, **kwargs)  # noqa: E501
        else:
            (data) = self.ml_model_version_info_with_http_info(workspace, mlmodel, version, **kwargs)  # noqa: E501
            return data

    def ml_model_version_info_with_http_info(self, workspace, mlmodel, version, **kwargs):  # noqa: E501
        """ML Model version info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ml_model_version_info_with_http_info(workspace, mlmodel, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Workspace's name (required)
        :param str mlmodel: Item's name (ML Model) (required)
        :param str version: Item's version (required)
        :return: ApplicationApplicationModelVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'mlmodel', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ml_model_version_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `ml_model_version_info`")  # noqa: E501
        # verify the required parameter 'mlmodel' is set
        if ('mlmodel' not in params or
                params['mlmodel'] is None):
            raise ValueError("Missing the required parameter `mlmodel` when calling `ml_model_version_info`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `ml_model_version_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'mlmodel' in params:
            path_params['mlmodel'] = params['mlmodel']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.2/workspace/{workspace}/mlmodel/{mlmodel}/versions/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationApplicationModelVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ml_model_version_update(self, body, workspace, mlmodel, version, **kwargs):  # noqa: E501
        """Update ml model version's config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ml_model_version_update(body, workspace, mlmodel, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelsApplicationModelConfig body: (required)
        :param str workspace: Workspace's name (required)
        :param str mlmodel: Item's name (ML Model) (required)
        :param str version: Version (required)
        :return: ModelsApplicationModelVersionStoredData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ml_model_version_update_with_http_info(body, workspace, mlmodel, version, **kwargs)  # noqa: E501
        else:
            (data) = self.ml_model_version_update_with_http_info(body, workspace, mlmodel, version, **kwargs)  # noqa: E501
            return data

    def ml_model_version_update_with_http_info(self, body, workspace, mlmodel, version, **kwargs):  # noqa: E501
        """Update ml model version's config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ml_model_version_update_with_http_info(body, workspace, mlmodel, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelsApplicationModelConfig body: (required)
        :param str workspace: Workspace's name (required)
        :param str mlmodel: Item's name (ML Model) (required)
        :param str version: Version (required)
        :return: ModelsApplicationModelVersionStoredData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace', 'mlmodel', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ml_model_version_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `ml_model_version_update`")  # noqa: E501
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `ml_model_version_update`")  # noqa: E501
        # verify the required parameter 'mlmodel' is set
        if ('mlmodel' not in params or
                params['mlmodel'] is None):
            raise ValueError("Missing the required parameter `mlmodel` when calling `ml_model_version_update`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `ml_model_version_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'mlmodel' in params:
            path_params['mlmodel'] = params['mlmodel']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.2/workspace/{workspace}/mlmodel/{mlmodel}/versions/{version}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelsApplicationModelVersionStoredData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ml_model_versions(self, workspace, mlmodel, **kwargs):  # noqa: E501
        """ML Model: versions list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ml_model_versions(workspace, mlmodel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Workspace's name (required)
        :param str mlmodel: Item's name (ML Model) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ml_model_versions_with_http_info(workspace, mlmodel, **kwargs)  # noqa: E501
        else:
            (data) = self.ml_model_versions_with_http_info(workspace, mlmodel, **kwargs)  # noqa: E501
            return data

    def ml_model_versions_with_http_info(self, workspace, mlmodel, **kwargs):  # noqa: E501
        """ML Model: versions list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ml_model_versions_with_http_info(workspace, mlmodel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Workspace's name (required)
        :param str mlmodel: Item's name (ML Model) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'mlmodel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ml_model_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `ml_model_versions`")  # noqa: E501
        # verify the required parameter 'mlmodel' is set
        if ('mlmodel' not in params or
                params['mlmodel'] is None):
            raise ValueError("Missing the required parameter `mlmodel` when calling `ml_model_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'mlmodel' in params:
            path_params['mlmodel'] = params['mlmodel']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.2/workspace/{workspace}/mlmodel/{mlmodel}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApplicationApplicationModelVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mlmodel_add(self, body, workspace, **kwargs):  # noqa: E501
        """Create ML Model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mlmodel_add(body, workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelsApplicationModel body: (required)
        :param str workspace: Workspace's name (required)
        :param bool skip_pluk: Skip pluk call (for case if method calls from pluk)
        :return: ModelsApplicationModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mlmodel_add_with_http_info(body, workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.mlmodel_add_with_http_info(body, workspace, **kwargs)  # noqa: E501
            return data

    def mlmodel_add_with_http_info(self, body, workspace, **kwargs):  # noqa: E501
        """Create ML Model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mlmodel_add_with_http_info(body, workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelsApplicationModel body: (required)
        :param str workspace: Workspace's name (required)
        :param bool skip_pluk: Skip pluk call (for case if method calls from pluk)
        :return: ModelsApplicationModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace', 'skip_pluk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mlmodel_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `mlmodel_add`")  # noqa: E501
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `mlmodel_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []
        if 'skip_pluk' in params:
            query_params.append(('skip_pluk', params['skip_pluk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.2/workspace/{workspace}/mlmodel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelsApplicationModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mlmodel_info(self, workspace, mlmodel, **kwargs):  # noqa: E501
        """Return ML Model's info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mlmodel_info(workspace, mlmodel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Workspace's name (required)
        :param str mlmodel: Item's name (ML Model) (required)
        :return: ModelsApplicationModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mlmodel_info_with_http_info(workspace, mlmodel, **kwargs)  # noqa: E501
        else:
            (data) = self.mlmodel_info_with_http_info(workspace, mlmodel, **kwargs)  # noqa: E501
            return data

    def mlmodel_info_with_http_info(self, workspace, mlmodel, **kwargs):  # noqa: E501
        """Return ML Model's info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mlmodel_info_with_http_info(workspace, mlmodel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Workspace's name (required)
        :param str mlmodel: Item's name (ML Model) (required)
        :return: ModelsApplicationModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'mlmodel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mlmodel_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `mlmodel_info`")  # noqa: E501
        # verify the required parameter 'mlmodel' is set
        if ('mlmodel' not in params or
                params['mlmodel'] is None):
            raise ValueError("Missing the required parameter `mlmodel` when calling `mlmodel_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'mlmodel' in params:
            path_params['mlmodel'] = params['mlmodel']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.2/workspace/{workspace}/mlmodel/{mlmodel}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelsApplicationModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mlmodel_registry_delete(self, workspace, mlmodel, **kwargs):  # noqa: E501
        """Delete ML Model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mlmodel_registry_delete(workspace, mlmodel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Workspace's name (required)
        :param str mlmodel: Item's name (ML Model) (required)
        :param bool dependencies: Get only dependencies
        :param str confirm: String for confirmation
        :param bool force: Force deletion
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mlmodel_registry_delete_with_http_info(workspace, mlmodel, **kwargs)  # noqa: E501
        else:
            (data) = self.mlmodel_registry_delete_with_http_info(workspace, mlmodel, **kwargs)  # noqa: E501
            return data

    def mlmodel_registry_delete_with_http_info(self, workspace, mlmodel, **kwargs):  # noqa: E501
        """Delete ML Model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mlmodel_registry_delete_with_http_info(workspace, mlmodel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Workspace's name (required)
        :param str mlmodel: Item's name (ML Model) (required)
        :param bool dependencies: Get only dependencies
        :param str confirm: String for confirmation
        :param bool force: Force deletion
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'mlmodel', 'dependencies', 'confirm', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mlmodel_registry_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `mlmodel_registry_delete`")  # noqa: E501
        # verify the required parameter 'mlmodel' is set
        if ('mlmodel' not in params or
                params['mlmodel'] is None):
            raise ValueError("Missing the required parameter `mlmodel` when calling `mlmodel_registry_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'mlmodel' in params:
            path_params['mlmodel'] = params['mlmodel']  # noqa: E501

        query_params = []
        if 'dependencies' in params:
            query_params.append(('dependencies', params['dependencies']))  # noqa: E501
        if 'confirm' in params:
            query_params.append(('confirm', params['confirm']))  # noqa: E501
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.2/workspace/{workspace}/mlmodel/{mlmodel}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mlmodel_update(self, body, workspace, mlmodel, **kwargs):  # noqa: E501
        """Update ML Model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mlmodel_update(body, workspace, mlmodel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelsApplicationModel body: (required)
        :param str workspace: Workspace's name (required)
        :param str mlmodel: Item's name (ML Model) (required)
        :return: ModelsApplicationModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mlmodel_update_with_http_info(body, workspace, mlmodel, **kwargs)  # noqa: E501
        else:
            (data) = self.mlmodel_update_with_http_info(body, workspace, mlmodel, **kwargs)  # noqa: E501
            return data

    def mlmodel_update_with_http_info(self, body, workspace, mlmodel, **kwargs):  # noqa: E501
        """Update ML Model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mlmodel_update_with_http_info(body, workspace, mlmodel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelsApplicationModel body: (required)
        :param str workspace: Workspace's name (required)
        :param str mlmodel: Item's name (ML Model) (required)
        :return: ModelsApplicationModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace', 'mlmodel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mlmodel_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `mlmodel_update`")  # noqa: E501
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `mlmodel_update`")  # noqa: E501
        # verify the required parameter 'mlmodel' is set
        if ('mlmodel' not in params or
                params['mlmodel'] is None):
            raise ValueError("Missing the required parameter `mlmodel` when calling `mlmodel_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'mlmodel' in params:
            path_params['mlmodel'] = params['mlmodel']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.2/workspace/{workspace}/mlmodel/{mlmodel}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelsApplicationModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mlmodel_workspace_list(self, workspace, **kwargs):  # noqa: E501
        """Return list of ML Model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mlmodel_workspace_list(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Workspace's name (required)
        :param bool with_global: List with all global
        :param int page: Page of charts list (default 1)
        :param int limit: Items per page (default 12, max 100)
        :param bool all: List w/o pagination (get all items)
        :param str search: Search query string
        :param str keyword: Keyword
        :param str types: Only types (comma separated)
        :param str order: Order by
        :param bool desc: Order desc
        :return: list[ModelsCatalogItemObj]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mlmodel_workspace_list_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.mlmodel_workspace_list_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def mlmodel_workspace_list_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """Return list of ML Model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mlmodel_workspace_list_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Workspace's name (required)
        :param bool with_global: List with all global
        :param int page: Page of charts list (default 1)
        :param int limit: Items per page (default 12, max 100)
        :param bool all: List w/o pagination (get all items)
        :param str search: Search query string
        :param str keyword: Keyword
        :param str types: Only types (comma separated)
        :param str order: Order by
        :param bool desc: Order desc
        :return: list[ModelsCatalogItemObj]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'with_global', 'page', 'limit', 'all', 'search', 'keyword', 'types', 'order', 'desc']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mlmodel_workspace_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `mlmodel_workspace_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []
        if 'with_global' in params:
            query_params.append(('with_global', params['with_global']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'all' in params:
            query_params.append(('all', params['all']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'keyword' in params:
            query_params.append(('keyword', params['keyword']))  # noqa: E501
        if 'types' in params:
            query_params.append(('types', params['types']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'desc' in params:
            query_params.append(('desc', params['desc']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.2/workspace/{workspace}/mlmodel', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ModelsCatalogItemObj]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
