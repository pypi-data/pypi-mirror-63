# coding: utf-8

"""
    Kibernetika project, backend component

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsApplicationModelVersionStoredData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'ModelsApplicationModelConfig',
        'source': 'ModelsApplicationModelSource',
        'status_error': 'str',
        'uploading': 'bool',
        'user_id': 'str',
        'version': 'str'
    }

    attribute_map = {
        'config': 'Config',
        'source': 'Source',
        'status_error': 'StatusError',
        'uploading': 'Uploading',
        'user_id': 'UserID',
        'version': 'Version'
    }

    def __init__(self, config=None, source=None, status_error=None, uploading=None, user_id=None, version=None):  # noqa: E501
        """ModelsApplicationModelVersionStoredData - a model defined in Swagger"""  # noqa: E501

        self._config = None
        self._source = None
        self._status_error = None
        self._uploading = None
        self._user_id = None
        self._version = None
        self.discriminator = None

        if config is not None:
            self.config = config
        if source is not None:
            self.source = source
        if status_error is not None:
            self.status_error = status_error
        if uploading is not None:
            self.uploading = uploading
        if user_id is not None:
            self.user_id = user_id
        self.version = version

    @property
    def config(self):
        """Gets the config of this ModelsApplicationModelVersionStoredData.  # noqa: E501


        :return: The config of this ModelsApplicationModelVersionStoredData.  # noqa: E501
        :rtype: ModelsApplicationModelConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ModelsApplicationModelVersionStoredData.


        :param config: The config of this ModelsApplicationModelVersionStoredData.  # noqa: E501
        :type: ModelsApplicationModelConfig
        """

        self._config = config

    @property
    def source(self):
        """Gets the source of this ModelsApplicationModelVersionStoredData.  # noqa: E501


        :return: The source of this ModelsApplicationModelVersionStoredData.  # noqa: E501
        :rtype: ModelsApplicationModelSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ModelsApplicationModelVersionStoredData.


        :param source: The source of this ModelsApplicationModelVersionStoredData.  # noqa: E501
        :type: ModelsApplicationModelSource
        """

        self._source = source

    @property
    def status_error(self):
        """Gets the status_error of this ModelsApplicationModelVersionStoredData.  # noqa: E501


        :return: The status_error of this ModelsApplicationModelVersionStoredData.  # noqa: E501
        :rtype: str
        """
        return self._status_error

    @status_error.setter
    def status_error(self, status_error):
        """Sets the status_error of this ModelsApplicationModelVersionStoredData.


        :param status_error: The status_error of this ModelsApplicationModelVersionStoredData.  # noqa: E501
        :type: str
        """

        self._status_error = status_error

    @property
    def uploading(self):
        """Gets the uploading of this ModelsApplicationModelVersionStoredData.  # noqa: E501


        :return: The uploading of this ModelsApplicationModelVersionStoredData.  # noqa: E501
        :rtype: bool
        """
        return self._uploading

    @uploading.setter
    def uploading(self, uploading):
        """Sets the uploading of this ModelsApplicationModelVersionStoredData.


        :param uploading: The uploading of this ModelsApplicationModelVersionStoredData.  # noqa: E501
        :type: bool
        """

        self._uploading = uploading

    @property
    def user_id(self):
        """Gets the user_id of this ModelsApplicationModelVersionStoredData.  # noqa: E501


        :return: The user_id of this ModelsApplicationModelVersionStoredData.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ModelsApplicationModelVersionStoredData.


        :param user_id: The user_id of this ModelsApplicationModelVersionStoredData.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def version(self):
        """Gets the version of this ModelsApplicationModelVersionStoredData.  # noqa: E501


        :return: The version of this ModelsApplicationModelVersionStoredData.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ModelsApplicationModelVersionStoredData.


        :param version: The version of this ModelsApplicationModelVersionStoredData.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsApplicationModelVersionStoredData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsApplicationModelVersionStoredData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
