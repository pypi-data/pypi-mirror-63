# coding: utf-8

"""
    Kibernetika project, backend component

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DealerclientResourceLimit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu': 'str',
        'cpu_mi': 'int',
        'execution_time': 'int',
        'gpu': 'int',
        'memory': 'str',
        'memory_mb': 'int',
        'parallel_runs': 'int',
        'replicas': 'int'
    }

    attribute_map = {
        'cpu': 'cpu',
        'cpu_mi': 'cpu_mi',
        'execution_time': 'execution_time',
        'gpu': 'gpu',
        'memory': 'memory',
        'memory_mb': 'memory_mb',
        'parallel_runs': 'parallel_runs',
        'replicas': 'replicas'
    }

    def __init__(self, cpu=None, cpu_mi=None, execution_time=None, gpu=None, memory=None, memory_mb=None, parallel_runs=None, replicas=None):  # noqa: E501
        """DealerclientResourceLimit - a model defined in Swagger"""  # noqa: E501

        self._cpu = None
        self._cpu_mi = None
        self._execution_time = None
        self._gpu = None
        self._memory = None
        self._memory_mb = None
        self._parallel_runs = None
        self._replicas = None
        self.discriminator = None

        if cpu is not None:
            self.cpu = cpu
        if cpu_mi is not None:
            self.cpu_mi = cpu_mi
        if execution_time is not None:
            self.execution_time = execution_time
        if gpu is not None:
            self.gpu = gpu
        if memory is not None:
            self.memory = memory
        if memory_mb is not None:
            self.memory_mb = memory_mb
        if parallel_runs is not None:
            self.parallel_runs = parallel_runs
        if replicas is not None:
            self.replicas = replicas

    @property
    def cpu(self):
        """Gets the cpu of this DealerclientResourceLimit.  # noqa: E501


        :return: The cpu of this DealerclientResourceLimit.  # noqa: E501
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this DealerclientResourceLimit.


        :param cpu: The cpu of this DealerclientResourceLimit.  # noqa: E501
        :type: str
        """

        self._cpu = cpu

    @property
    def cpu_mi(self):
        """Gets the cpu_mi of this DealerclientResourceLimit.  # noqa: E501


        :return: The cpu_mi of this DealerclientResourceLimit.  # noqa: E501
        :rtype: int
        """
        return self._cpu_mi

    @cpu_mi.setter
    def cpu_mi(self, cpu_mi):
        """Sets the cpu_mi of this DealerclientResourceLimit.


        :param cpu_mi: The cpu_mi of this DealerclientResourceLimit.  # noqa: E501
        :type: int
        """

        self._cpu_mi = cpu_mi

    @property
    def execution_time(self):
        """Gets the execution_time of this DealerclientResourceLimit.  # noqa: E501


        :return: The execution_time of this DealerclientResourceLimit.  # noqa: E501
        :rtype: int
        """
        return self._execution_time

    @execution_time.setter
    def execution_time(self, execution_time):
        """Sets the execution_time of this DealerclientResourceLimit.


        :param execution_time: The execution_time of this DealerclientResourceLimit.  # noqa: E501
        :type: int
        """

        self._execution_time = execution_time

    @property
    def gpu(self):
        """Gets the gpu of this DealerclientResourceLimit.  # noqa: E501


        :return: The gpu of this DealerclientResourceLimit.  # noqa: E501
        :rtype: int
        """
        return self._gpu

    @gpu.setter
    def gpu(self, gpu):
        """Sets the gpu of this DealerclientResourceLimit.


        :param gpu: The gpu of this DealerclientResourceLimit.  # noqa: E501
        :type: int
        """

        self._gpu = gpu

    @property
    def memory(self):
        """Gets the memory of this DealerclientResourceLimit.  # noqa: E501


        :return: The memory of this DealerclientResourceLimit.  # noqa: E501
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this DealerclientResourceLimit.


        :param memory: The memory of this DealerclientResourceLimit.  # noqa: E501
        :type: str
        """

        self._memory = memory

    @property
    def memory_mb(self):
        """Gets the memory_mb of this DealerclientResourceLimit.  # noqa: E501


        :return: The memory_mb of this DealerclientResourceLimit.  # noqa: E501
        :rtype: int
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb):
        """Sets the memory_mb of this DealerclientResourceLimit.


        :param memory_mb: The memory_mb of this DealerclientResourceLimit.  # noqa: E501
        :type: int
        """

        self._memory_mb = memory_mb

    @property
    def parallel_runs(self):
        """Gets the parallel_runs of this DealerclientResourceLimit.  # noqa: E501


        :return: The parallel_runs of this DealerclientResourceLimit.  # noqa: E501
        :rtype: int
        """
        return self._parallel_runs

    @parallel_runs.setter
    def parallel_runs(self, parallel_runs):
        """Sets the parallel_runs of this DealerclientResourceLimit.


        :param parallel_runs: The parallel_runs of this DealerclientResourceLimit.  # noqa: E501
        :type: int
        """

        self._parallel_runs = parallel_runs

    @property
    def replicas(self):
        """Gets the replicas of this DealerclientResourceLimit.  # noqa: E501


        :return: The replicas of this DealerclientResourceLimit.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this DealerclientResourceLimit.


        :param replicas: The replicas of this DealerclientResourceLimit.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DealerclientResourceLimit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DealerclientResourceLimit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
