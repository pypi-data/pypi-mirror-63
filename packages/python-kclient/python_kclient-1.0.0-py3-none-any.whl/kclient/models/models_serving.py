# coding: utf-8

"""
    Kibernetika project, backend component

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsServing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_display_name': 'str',
        'application_name': 'str',
        'application_source': 'str',
        'application_source_sub_path': 'str',
        'build': 'str',
        'cluster_id': 'str',
        'config': 'MlappUniversalServing',
        'containers_count': 'int',
        'description': 'str',
        'disabled': 'bool',
        'display_name': 'str',
        'gpu_used': 'int',
        'gallery': 'bool',
        'gallery_tags': 'list[str]',
        'health': 'str',
        'health_error': 'str',
        'id': 'str',
        'inference_form': 'list[ModelsTaskFormElement]',
        'inference_name': 'str',
        'inference_streams': 'list[ModelsTaskFormElementStreamExtended]',
        'inference_values': 'object',
        'inference_version': 'str',
        'inference_workspace_display_name': 'str',
        'inference_workspace_name': 'str',
        'inner_address': 'str',
        'name': 'str',
        'picture': 'str',
        'status': 'str',
        'status_message': 'str',
        'task': 'str',
        'type': 'str',
        'user_display_name': 'str',
        'user_id': 'str',
        'user_login': 'str',
        'workspace_display_name': 'str',
        'workspace_name': 'str'
    }

    attribute_map = {
        'application_display_name': 'ApplicationDisplayName',
        'application_name': 'ApplicationName',
        'application_source': 'ApplicationSource',
        'application_source_sub_path': 'ApplicationSourceSubPath',
        'build': 'Build',
        'cluster_id': 'ClusterID',
        'config': 'Config',
        'containers_count': 'ContainersCount',
        'description': 'Description',
        'disabled': 'Disabled',
        'display_name': 'DisplayName',
        'gpu_used': 'GPUUsed',
        'gallery': 'Gallery',
        'gallery_tags': 'GalleryTags',
        'health': 'Health',
        'health_error': 'HealthError',
        'id': 'ID',
        'inference_form': 'InferenceForm',
        'inference_name': 'InferenceName',
        'inference_streams': 'InferenceStreams',
        'inference_values': 'InferenceValues',
        'inference_version': 'InferenceVersion',
        'inference_workspace_display_name': 'InferenceWorkspaceDisplayName',
        'inference_workspace_name': 'InferenceWorkspaceName',
        'inner_address': 'InnerAddress',
        'name': 'Name',
        'picture': 'Picture',
        'status': 'Status',
        'status_message': 'StatusMessage',
        'task': 'Task',
        'type': 'Type',
        'user_display_name': 'UserDisplayName',
        'user_id': 'UserID',
        'user_login': 'UserLogin',
        'workspace_display_name': 'WorkspaceDisplayName',
        'workspace_name': 'WorkspaceName'
    }

    def __init__(self, application_display_name=None, application_name=None, application_source=None, application_source_sub_path=None, build=None, cluster_id=None, config=None, containers_count=None, description=None, disabled=None, display_name=None, gpu_used=None, gallery=None, gallery_tags=None, health=None, health_error=None, id=None, inference_form=None, inference_name=None, inference_streams=None, inference_values=None, inference_version=None, inference_workspace_display_name=None, inference_workspace_name=None, inner_address=None, name=None, picture=None, status=None, status_message=None, task=None, type=None, user_display_name=None, user_id=None, user_login=None, workspace_display_name=None, workspace_name=None):  # noqa: E501
        """ModelsServing - a model defined in Swagger"""  # noqa: E501

        self._application_display_name = None
        self._application_name = None
        self._application_source = None
        self._application_source_sub_path = None
        self._build = None
        self._cluster_id = None
        self._config = None
        self._containers_count = None
        self._description = None
        self._disabled = None
        self._display_name = None
        self._gpu_used = None
        self._gallery = None
        self._gallery_tags = None
        self._health = None
        self._health_error = None
        self._id = None
        self._inference_form = None
        self._inference_name = None
        self._inference_streams = None
        self._inference_values = None
        self._inference_version = None
        self._inference_workspace_display_name = None
        self._inference_workspace_name = None
        self._inner_address = None
        self._name = None
        self._picture = None
        self._status = None
        self._status_message = None
        self._task = None
        self._type = None
        self._user_display_name = None
        self._user_id = None
        self._user_login = None
        self._workspace_display_name = None
        self._workspace_name = None
        self.discriminator = None

        if application_display_name is not None:
            self.application_display_name = application_display_name
        if application_name is not None:
            self.application_name = application_name
        if application_source is not None:
            self.application_source = application_source
        if application_source_sub_path is not None:
            self.application_source_sub_path = application_source_sub_path
        if build is not None:
            self.build = build
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if config is not None:
            self.config = config
        if containers_count is not None:
            self.containers_count = containers_count
        if description is not None:
            self.description = description
        if disabled is not None:
            self.disabled = disabled
        if display_name is not None:
            self.display_name = display_name
        if gpu_used is not None:
            self.gpu_used = gpu_used
        if gallery is not None:
            self.gallery = gallery
        if gallery_tags is not None:
            self.gallery_tags = gallery_tags
        if health is not None:
            self.health = health
        if health_error is not None:
            self.health_error = health_error
        if id is not None:
            self.id = id
        if inference_form is not None:
            self.inference_form = inference_form
        if inference_name is not None:
            self.inference_name = inference_name
        if inference_streams is not None:
            self.inference_streams = inference_streams
        if inference_values is not None:
            self.inference_values = inference_values
        if inference_version is not None:
            self.inference_version = inference_version
        if inference_workspace_display_name is not None:
            self.inference_workspace_display_name = inference_workspace_display_name
        if inference_workspace_name is not None:
            self.inference_workspace_name = inference_workspace_name
        if inner_address is not None:
            self.inner_address = inner_address
        if name is not None:
            self.name = name
        if picture is not None:
            self.picture = picture
        if status is not None:
            self.status = status
        if status_message is not None:
            self.status_message = status_message
        if task is not None:
            self.task = task
        if type is not None:
            self.type = type
        if user_display_name is not None:
            self.user_display_name = user_display_name
        if user_id is not None:
            self.user_id = user_id
        if user_login is not None:
            self.user_login = user_login
        if workspace_display_name is not None:
            self.workspace_display_name = workspace_display_name
        if workspace_name is not None:
            self.workspace_name = workspace_name

    @property
    def application_display_name(self):
        """Gets the application_display_name of this ModelsServing.  # noqa: E501


        :return: The application_display_name of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._application_display_name

    @application_display_name.setter
    def application_display_name(self, application_display_name):
        """Sets the application_display_name of this ModelsServing.


        :param application_display_name: The application_display_name of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._application_display_name = application_display_name

    @property
    def application_name(self):
        """Gets the application_name of this ModelsServing.  # noqa: E501


        :return: The application_name of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ModelsServing.


        :param application_name: The application_name of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def application_source(self):
        """Gets the application_source of this ModelsServing.  # noqa: E501


        :return: The application_source of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._application_source

    @application_source.setter
    def application_source(self, application_source):
        """Sets the application_source of this ModelsServing.


        :param application_source: The application_source of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._application_source = application_source

    @property
    def application_source_sub_path(self):
        """Gets the application_source_sub_path of this ModelsServing.  # noqa: E501


        :return: The application_source_sub_path of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._application_source_sub_path

    @application_source_sub_path.setter
    def application_source_sub_path(self, application_source_sub_path):
        """Sets the application_source_sub_path of this ModelsServing.


        :param application_source_sub_path: The application_source_sub_path of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._application_source_sub_path = application_source_sub_path

    @property
    def build(self):
        """Gets the build of this ModelsServing.  # noqa: E501


        :return: The build of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this ModelsServing.


        :param build: The build of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._build = build

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ModelsServing.  # noqa: E501


        :return: The cluster_id of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ModelsServing.


        :param cluster_id: The cluster_id of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def config(self):
        """Gets the config of this ModelsServing.  # noqa: E501


        :return: The config of this ModelsServing.  # noqa: E501
        :rtype: MlappUniversalServing
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ModelsServing.


        :param config: The config of this ModelsServing.  # noqa: E501
        :type: MlappUniversalServing
        """

        self._config = config

    @property
    def containers_count(self):
        """Gets the containers_count of this ModelsServing.  # noqa: E501


        :return: The containers_count of this ModelsServing.  # noqa: E501
        :rtype: int
        """
        return self._containers_count

    @containers_count.setter
    def containers_count(self, containers_count):
        """Sets the containers_count of this ModelsServing.


        :param containers_count: The containers_count of this ModelsServing.  # noqa: E501
        :type: int
        """

        self._containers_count = containers_count

    @property
    def description(self):
        """Gets the description of this ModelsServing.  # noqa: E501


        :return: The description of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelsServing.


        :param description: The description of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disabled(self):
        """Gets the disabled of this ModelsServing.  # noqa: E501


        :return: The disabled of this ModelsServing.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this ModelsServing.


        :param disabled: The disabled of this ModelsServing.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def display_name(self):
        """Gets the display_name of this ModelsServing.  # noqa: E501


        :return: The display_name of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ModelsServing.


        :param display_name: The display_name of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def gpu_used(self):
        """Gets the gpu_used of this ModelsServing.  # noqa: E501


        :return: The gpu_used of this ModelsServing.  # noqa: E501
        :rtype: int
        """
        return self._gpu_used

    @gpu_used.setter
    def gpu_used(self, gpu_used):
        """Sets the gpu_used of this ModelsServing.


        :param gpu_used: The gpu_used of this ModelsServing.  # noqa: E501
        :type: int
        """

        self._gpu_used = gpu_used

    @property
    def gallery(self):
        """Gets the gallery of this ModelsServing.  # noqa: E501


        :return: The gallery of this ModelsServing.  # noqa: E501
        :rtype: bool
        """
        return self._gallery

    @gallery.setter
    def gallery(self, gallery):
        """Sets the gallery of this ModelsServing.


        :param gallery: The gallery of this ModelsServing.  # noqa: E501
        :type: bool
        """

        self._gallery = gallery

    @property
    def gallery_tags(self):
        """Gets the gallery_tags of this ModelsServing.  # noqa: E501


        :return: The gallery_tags of this ModelsServing.  # noqa: E501
        :rtype: list[str]
        """
        return self._gallery_tags

    @gallery_tags.setter
    def gallery_tags(self, gallery_tags):
        """Sets the gallery_tags of this ModelsServing.


        :param gallery_tags: The gallery_tags of this ModelsServing.  # noqa: E501
        :type: list[str]
        """

        self._gallery_tags = gallery_tags

    @property
    def health(self):
        """Gets the health of this ModelsServing.  # noqa: E501


        :return: The health of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this ModelsServing.


        :param health: The health of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._health = health

    @property
    def health_error(self):
        """Gets the health_error of this ModelsServing.  # noqa: E501


        :return: The health_error of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._health_error

    @health_error.setter
    def health_error(self, health_error):
        """Sets the health_error of this ModelsServing.


        :param health_error: The health_error of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._health_error = health_error

    @property
    def id(self):
        """Gets the id of this ModelsServing.  # noqa: E501


        :return: The id of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsServing.


        :param id: The id of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def inference_form(self):
        """Gets the inference_form of this ModelsServing.  # noqa: E501


        :return: The inference_form of this ModelsServing.  # noqa: E501
        :rtype: list[ModelsTaskFormElement]
        """
        return self._inference_form

    @inference_form.setter
    def inference_form(self, inference_form):
        """Sets the inference_form of this ModelsServing.


        :param inference_form: The inference_form of this ModelsServing.  # noqa: E501
        :type: list[ModelsTaskFormElement]
        """

        self._inference_form = inference_form

    @property
    def inference_name(self):
        """Gets the inference_name of this ModelsServing.  # noqa: E501


        :return: The inference_name of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._inference_name

    @inference_name.setter
    def inference_name(self, inference_name):
        """Sets the inference_name of this ModelsServing.


        :param inference_name: The inference_name of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._inference_name = inference_name

    @property
    def inference_streams(self):
        """Gets the inference_streams of this ModelsServing.  # noqa: E501


        :return: The inference_streams of this ModelsServing.  # noqa: E501
        :rtype: list[ModelsTaskFormElementStreamExtended]
        """
        return self._inference_streams

    @inference_streams.setter
    def inference_streams(self, inference_streams):
        """Sets the inference_streams of this ModelsServing.


        :param inference_streams: The inference_streams of this ModelsServing.  # noqa: E501
        :type: list[ModelsTaskFormElementStreamExtended]
        """

        self._inference_streams = inference_streams

    @property
    def inference_values(self):
        """Gets the inference_values of this ModelsServing.  # noqa: E501


        :return: The inference_values of this ModelsServing.  # noqa: E501
        :rtype: object
        """
        return self._inference_values

    @inference_values.setter
    def inference_values(self, inference_values):
        """Sets the inference_values of this ModelsServing.


        :param inference_values: The inference_values of this ModelsServing.  # noqa: E501
        :type: object
        """

        self._inference_values = inference_values

    @property
    def inference_version(self):
        """Gets the inference_version of this ModelsServing.  # noqa: E501


        :return: The inference_version of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._inference_version

    @inference_version.setter
    def inference_version(self, inference_version):
        """Sets the inference_version of this ModelsServing.


        :param inference_version: The inference_version of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._inference_version = inference_version

    @property
    def inference_workspace_display_name(self):
        """Gets the inference_workspace_display_name of this ModelsServing.  # noqa: E501


        :return: The inference_workspace_display_name of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._inference_workspace_display_name

    @inference_workspace_display_name.setter
    def inference_workspace_display_name(self, inference_workspace_display_name):
        """Sets the inference_workspace_display_name of this ModelsServing.


        :param inference_workspace_display_name: The inference_workspace_display_name of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._inference_workspace_display_name = inference_workspace_display_name

    @property
    def inference_workspace_name(self):
        """Gets the inference_workspace_name of this ModelsServing.  # noqa: E501


        :return: The inference_workspace_name of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._inference_workspace_name

    @inference_workspace_name.setter
    def inference_workspace_name(self, inference_workspace_name):
        """Sets the inference_workspace_name of this ModelsServing.


        :param inference_workspace_name: The inference_workspace_name of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._inference_workspace_name = inference_workspace_name

    @property
    def inner_address(self):
        """Gets the inner_address of this ModelsServing.  # noqa: E501


        :return: The inner_address of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._inner_address

    @inner_address.setter
    def inner_address(self, inner_address):
        """Sets the inner_address of this ModelsServing.


        :param inner_address: The inner_address of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._inner_address = inner_address

    @property
    def name(self):
        """Gets the name of this ModelsServing.  # noqa: E501


        :return: The name of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsServing.


        :param name: The name of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def picture(self):
        """Gets the picture of this ModelsServing.  # noqa: E501


        :return: The picture of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this ModelsServing.


        :param picture: The picture of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._picture = picture

    @property
    def status(self):
        """Gets the status of this ModelsServing.  # noqa: E501


        :return: The status of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelsServing.


        :param status: The status of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this ModelsServing.  # noqa: E501


        :return: The status_message of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ModelsServing.


        :param status_message: The status_message of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    @property
    def task(self):
        """Gets the task of this ModelsServing.  # noqa: E501


        :return: The task of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this ModelsServing.


        :param task: The task of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._task = task

    @property
    def type(self):
        """Gets the type of this ModelsServing.  # noqa: E501


        :return: The type of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelsServing.


        :param type: The type of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user_display_name(self):
        """Gets the user_display_name of this ModelsServing.  # noqa: E501


        :return: The user_display_name of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._user_display_name

    @user_display_name.setter
    def user_display_name(self, user_display_name):
        """Sets the user_display_name of this ModelsServing.


        :param user_display_name: The user_display_name of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._user_display_name = user_display_name

    @property
    def user_id(self):
        """Gets the user_id of this ModelsServing.  # noqa: E501


        :return: The user_id of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ModelsServing.


        :param user_id: The user_id of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_login(self):
        """Gets the user_login of this ModelsServing.  # noqa: E501


        :return: The user_login of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._user_login

    @user_login.setter
    def user_login(self, user_login):
        """Sets the user_login of this ModelsServing.


        :param user_login: The user_login of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._user_login = user_login

    @property
    def workspace_display_name(self):
        """Gets the workspace_display_name of this ModelsServing.  # noqa: E501


        :return: The workspace_display_name of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._workspace_display_name

    @workspace_display_name.setter
    def workspace_display_name(self, workspace_display_name):
        """Sets the workspace_display_name of this ModelsServing.


        :param workspace_display_name: The workspace_display_name of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._workspace_display_name = workspace_display_name

    @property
    def workspace_name(self):
        """Gets the workspace_name of this ModelsServing.  # noqa: E501


        :return: The workspace_name of this ModelsServing.  # noqa: E501
        :rtype: str
        """
        return self._workspace_name

    @workspace_name.setter
    def workspace_name(self, workspace_name):
        """Sets the workspace_name of this ModelsServing.


        :param workspace_name: The workspace_name of this ModelsServing.  # noqa: E501
        :type: str
        """

        self._workspace_name = workspace_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsServing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsServing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
