# coding: utf-8

"""
    Kibernetika project, backend component

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MlappVolumeMount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'git_revision': 'str',
        'mount_path': 'str',
        'name': 'str',
        'read_only': 'bool',
        'sub_path': 'str'
    }

    attribute_map = {
        'git_revision': 'gitRevision',
        'mount_path': 'mountPath',
        'name': 'name',
        'read_only': 'readOnly',
        'sub_path': 'subPath'
    }

    def __init__(self, git_revision=None, mount_path=None, name=None, read_only=None, sub_path=None):  # noqa: E501
        """MlappVolumeMount - a model defined in Swagger"""  # noqa: E501

        self._git_revision = None
        self._mount_path = None
        self._name = None
        self._read_only = None
        self._sub_path = None
        self.discriminator = None

        if git_revision is not None:
            self.git_revision = git_revision
        if mount_path is not None:
            self.mount_path = mount_path
        self.name = name
        if read_only is not None:
            self.read_only = read_only
        if sub_path is not None:
            self.sub_path = sub_path

    @property
    def git_revision(self):
        """Gets the git_revision of this MlappVolumeMount.  # noqa: E501


        :return: The git_revision of this MlappVolumeMount.  # noqa: E501
        :rtype: str
        """
        return self._git_revision

    @git_revision.setter
    def git_revision(self, git_revision):
        """Sets the git_revision of this MlappVolumeMount.


        :param git_revision: The git_revision of this MlappVolumeMount.  # noqa: E501
        :type: str
        """

        self._git_revision = git_revision

    @property
    def mount_path(self):
        """Gets the mount_path of this MlappVolumeMount.  # noqa: E501


        :return: The mount_path of this MlappVolumeMount.  # noqa: E501
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """Sets the mount_path of this MlappVolumeMount.


        :param mount_path: The mount_path of this MlappVolumeMount.  # noqa: E501
        :type: str
        """

        self._mount_path = mount_path

    @property
    def name(self):
        """Gets the name of this MlappVolumeMount.  # noqa: E501


        :return: The name of this MlappVolumeMount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MlappVolumeMount.


        :param name: The name of this MlappVolumeMount.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def read_only(self):
        """Gets the read_only of this MlappVolumeMount.  # noqa: E501


        :return: The read_only of this MlappVolumeMount.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this MlappVolumeMount.


        :param read_only: The read_only of this MlappVolumeMount.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def sub_path(self):
        """Gets the sub_path of this MlappVolumeMount.  # noqa: E501


        :return: The sub_path of this MlappVolumeMount.  # noqa: E501
        :rtype: str
        """
        return self._sub_path

    @sub_path.setter
    def sub_path(self, sub_path):
        """Sets the sub_path of this MlappVolumeMount.


        :param sub_path: The sub_path of this MlappVolumeMount.  # noqa: E501
        :type: str
        """

        self._sub_path = sub_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MlappVolumeMount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MlappVolumeMount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
