# coding: utf-8

"""
    Kibernetika project, backend component

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsTaskFormElementStreamExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'input': 'str',
        'key': 'str',
        'output': 'str',
        'params': 'dict(str, str)',
        'stream_url': 'str'
    }

    attribute_map = {
        'description': 'description',
        'input': 'input',
        'key': 'key',
        'output': 'output',
        'params': 'params',
        'stream_url': 'stream_url'
    }

    def __init__(self, description=None, input=None, key=None, output=None, params=None, stream_url=None):  # noqa: E501
        """ModelsTaskFormElementStreamExtended - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._input = None
        self._key = None
        self._output = None
        self._params = None
        self._stream_url = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if input is not None:
            self.input = input
        if key is not None:
            self.key = key
        if output is not None:
            self.output = output
        if params is not None:
            self.params = params
        if stream_url is not None:
            self.stream_url = stream_url

    @property
    def description(self):
        """Gets the description of this ModelsTaskFormElementStreamExtended.  # noqa: E501


        :return: The description of this ModelsTaskFormElementStreamExtended.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelsTaskFormElementStreamExtended.


        :param description: The description of this ModelsTaskFormElementStreamExtended.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def input(self):
        """Gets the input of this ModelsTaskFormElementStreamExtended.  # noqa: E501


        :return: The input of this ModelsTaskFormElementStreamExtended.  # noqa: E501
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this ModelsTaskFormElementStreamExtended.


        :param input: The input of this ModelsTaskFormElementStreamExtended.  # noqa: E501
        :type: str
        """

        self._input = input

    @property
    def key(self):
        """Gets the key of this ModelsTaskFormElementStreamExtended.  # noqa: E501


        :return: The key of this ModelsTaskFormElementStreamExtended.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ModelsTaskFormElementStreamExtended.


        :param key: The key of this ModelsTaskFormElementStreamExtended.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def output(self):
        """Gets the output of this ModelsTaskFormElementStreamExtended.  # noqa: E501


        :return: The output of this ModelsTaskFormElementStreamExtended.  # noqa: E501
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this ModelsTaskFormElementStreamExtended.


        :param output: The output of this ModelsTaskFormElementStreamExtended.  # noqa: E501
        :type: str
        """

        self._output = output

    @property
    def params(self):
        """Gets the params of this ModelsTaskFormElementStreamExtended.  # noqa: E501


        :return: The params of this ModelsTaskFormElementStreamExtended.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ModelsTaskFormElementStreamExtended.


        :param params: The params of this ModelsTaskFormElementStreamExtended.  # noqa: E501
        :type: dict(str, str)
        """

        self._params = params

    @property
    def stream_url(self):
        """Gets the stream_url of this ModelsTaskFormElementStreamExtended.  # noqa: E501


        :return: The stream_url of this ModelsTaskFormElementStreamExtended.  # noqa: E501
        :rtype: str
        """
        return self._stream_url

    @stream_url.setter
    def stream_url(self, stream_url):
        """Sets the stream_url of this ModelsTaskFormElementStreamExtended.


        :param stream_url: The stream_url of this ModelsTaskFormElementStreamExtended.  # noqa: E501
        :type: str
        """

        self._stream_url = stream_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsTaskFormElementStreamExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsTaskFormElementStreamExtended):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
