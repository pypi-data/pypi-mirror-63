# coding: utf-8

"""
    Kibernetika project, backend component

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'email': 'str',
        'has_password': 'bool',
        'id': 'str',
        'login': 'str',
        'organization': 'str',
        'phone': 'str',
        'picture': 'str',
        'workspace': 'str',
        'workspace_name': 'str'
    }

    attribute_map = {
        'display_name': 'DisplayName',
        'email': 'Email',
        'has_password': 'HasPassword',
        'id': 'ID',
        'login': 'Login',
        'organization': 'Organization',
        'phone': 'Phone',
        'picture': 'Picture',
        'workspace': 'Workspace',
        'workspace_name': 'WorkspaceName'
    }

    def __init__(self, display_name=None, email=None, has_password=None, id=None, login=None, organization=None, phone=None, picture=None, workspace=None, workspace_name=None):  # noqa: E501
        """ModelsUser - a model defined in Swagger"""  # noqa: E501

        self._display_name = None
        self._email = None
        self._has_password = None
        self._id = None
        self._login = None
        self._organization = None
        self._phone = None
        self._picture = None
        self._workspace = None
        self._workspace_name = None
        self.discriminator = None

        self.display_name = display_name
        if email is not None:
            self.email = email
        self.has_password = has_password
        self.id = id
        self.login = login
        self.organization = organization
        self.phone = phone
        if picture is not None:
            self.picture = picture
        self.workspace = workspace
        self.workspace_name = workspace_name

    @property
    def display_name(self):
        """Gets the display_name of this ModelsUser.  # noqa: E501


        :return: The display_name of this ModelsUser.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ModelsUser.


        :param display_name: The display_name of this ModelsUser.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this ModelsUser.  # noqa: E501


        :return: The email of this ModelsUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ModelsUser.


        :param email: The email of this ModelsUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def has_password(self):
        """Gets the has_password of this ModelsUser.  # noqa: E501


        :return: The has_password of this ModelsUser.  # noqa: E501
        :rtype: bool
        """
        return self._has_password

    @has_password.setter
    def has_password(self, has_password):
        """Sets the has_password of this ModelsUser.


        :param has_password: The has_password of this ModelsUser.  # noqa: E501
        :type: bool
        """
        if has_password is None:
            raise ValueError("Invalid value for `has_password`, must not be `None`")  # noqa: E501

        self._has_password = has_password

    @property
    def id(self):
        """Gets the id of this ModelsUser.  # noqa: E501


        :return: The id of this ModelsUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsUser.


        :param id: The id of this ModelsUser.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def login(self):
        """Gets the login of this ModelsUser.  # noqa: E501


        :return: The login of this ModelsUser.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this ModelsUser.


        :param login: The login of this ModelsUser.  # noqa: E501
        :type: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")  # noqa: E501

        self._login = login

    @property
    def organization(self):
        """Gets the organization of this ModelsUser.  # noqa: E501


        :return: The organization of this ModelsUser.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ModelsUser.


        :param organization: The organization of this ModelsUser.  # noqa: E501
        :type: str
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def phone(self):
        """Gets the phone of this ModelsUser.  # noqa: E501


        :return: The phone of this ModelsUser.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ModelsUser.


        :param phone: The phone of this ModelsUser.  # noqa: E501
        :type: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def picture(self):
        """Gets the picture of this ModelsUser.  # noqa: E501


        :return: The picture of this ModelsUser.  # noqa: E501
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this ModelsUser.


        :param picture: The picture of this ModelsUser.  # noqa: E501
        :type: str
        """

        self._picture = picture

    @property
    def workspace(self):
        """Gets the workspace of this ModelsUser.  # noqa: E501


        :return: The workspace of this ModelsUser.  # noqa: E501
        :rtype: str
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this ModelsUser.


        :param workspace: The workspace of this ModelsUser.  # noqa: E501
        :type: str
        """
        if workspace is None:
            raise ValueError("Invalid value for `workspace`, must not be `None`")  # noqa: E501

        self._workspace = workspace

    @property
    def workspace_name(self):
        """Gets the workspace_name of this ModelsUser.  # noqa: E501


        :return: The workspace_name of this ModelsUser.  # noqa: E501
        :rtype: str
        """
        return self._workspace_name

    @workspace_name.setter
    def workspace_name(self, workspace_name):
        """Sets the workspace_name of this ModelsUser.


        :param workspace_name: The workspace_name of this ModelsUser.  # noqa: E501
        :type: str
        """
        if workspace_name is None:
            raise ValueError("Invalid value for `workspace_name`, must not be `None`")  # noqa: E501

        self._workspace_name = workspace_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
