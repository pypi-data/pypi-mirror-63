# coding: utf-8

"""
    Kibernetika project, backend component

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MlappServingSpecParam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label': 'str',
        'name': 'str',
        'options': 'list[str]',
        'type': 'str',
        'value': 'MlappServingSpecParamValue'
    }

    attribute_map = {
        'label': 'label',
        'name': 'name',
        'options': 'options',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, label=None, name=None, options=None, type=None, value=None):  # noqa: E501
        """MlappServingSpecParam - a model defined in Swagger"""  # noqa: E501

        self._label = None
        self._name = None
        self._options = None
        self._type = None
        self._value = None
        self.discriminator = None

        if label is not None:
            self.label = label
        if name is not None:
            self.name = name
        if options is not None:
            self.options = options
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value

    @property
    def label(self):
        """Gets the label of this MlappServingSpecParam.  # noqa: E501


        :return: The label of this MlappServingSpecParam.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this MlappServingSpecParam.


        :param label: The label of this MlappServingSpecParam.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def name(self):
        """Gets the name of this MlappServingSpecParam.  # noqa: E501


        :return: The name of this MlappServingSpecParam.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MlappServingSpecParam.


        :param name: The name of this MlappServingSpecParam.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this MlappServingSpecParam.  # noqa: E501


        :return: The options of this MlappServingSpecParam.  # noqa: E501
        :rtype: list[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this MlappServingSpecParam.


        :param options: The options of this MlappServingSpecParam.  # noqa: E501
        :type: list[str]
        """

        self._options = options

    @property
    def type(self):
        """Gets the type of this MlappServingSpecParam.  # noqa: E501


        :return: The type of this MlappServingSpecParam.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MlappServingSpecParam.


        :param type: The type of this MlappServingSpecParam.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this MlappServingSpecParam.  # noqa: E501


        :return: The value of this MlappServingSpecParam.  # noqa: E501
        :rtype: MlappServingSpecParamValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MlappServingSpecParam.


        :param value: The value of this MlappServingSpecParam.  # noqa: E501
        :type: MlappServingSpecParamValue
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MlappServingSpecParam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MlappServingSpecParam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
