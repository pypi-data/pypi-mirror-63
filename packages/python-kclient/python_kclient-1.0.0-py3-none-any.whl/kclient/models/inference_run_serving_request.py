# coding: utf-8

"""
    Kibernetika project, backend component

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InferenceRunServingRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'name': 'str',
        'values': 'object',
        'workspace_name': 'str'
    }

    attribute_map = {
        'cluster_id': 'ClusterID',
        'name': 'Name',
        'values': 'Values',
        'workspace_name': 'WorkspaceName'
    }

    def __init__(self, cluster_id=None, name=None, values=None, workspace_name=None):  # noqa: E501
        """InferenceRunServingRequest - a model defined in Swagger"""  # noqa: E501

        self._cluster_id = None
        self._name = None
        self._values = None
        self._workspace_name = None
        self.discriminator = None

        self.cluster_id = cluster_id
        self.name = name
        self.values = values
        self.workspace_name = workspace_name

    @property
    def cluster_id(self):
        """Gets the cluster_id of this InferenceRunServingRequest.  # noqa: E501


        :return: The cluster_id of this InferenceRunServingRequest.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this InferenceRunServingRequest.


        :param cluster_id: The cluster_id of this InferenceRunServingRequest.  # noqa: E501
        :type: str
        """
        if cluster_id is None:
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def name(self):
        """Gets the name of this InferenceRunServingRequest.  # noqa: E501


        :return: The name of this InferenceRunServingRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InferenceRunServingRequest.


        :param name: The name of this InferenceRunServingRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def values(self):
        """Gets the values of this InferenceRunServingRequest.  # noqa: E501


        :return: The values of this InferenceRunServingRequest.  # noqa: E501
        :rtype: object
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this InferenceRunServingRequest.


        :param values: The values of this InferenceRunServingRequest.  # noqa: E501
        :type: object
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    @property
    def workspace_name(self):
        """Gets the workspace_name of this InferenceRunServingRequest.  # noqa: E501


        :return: The workspace_name of this InferenceRunServingRequest.  # noqa: E501
        :rtype: str
        """
        return self._workspace_name

    @workspace_name.setter
    def workspace_name(self, workspace_name):
        """Sets the workspace_name of this InferenceRunServingRequest.


        :param workspace_name: The workspace_name of this InferenceRunServingRequest.  # noqa: E501
        :type: str
        """
        if workspace_name is None:
            raise ValueError("Invalid value for `workspace_name`, must not be `None`")  # noqa: E501

        self._workspace_name = workspace_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InferenceRunServingRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InferenceRunServingRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
