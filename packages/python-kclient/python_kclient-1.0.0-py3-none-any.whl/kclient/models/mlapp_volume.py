# coding: utf-8

"""
    Kibernetika project, backend component

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MlappVolume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_storage': 'str',
        'dataset': 'MlappDatasetSource',
        'dataset_fs': 'MlappDatasetFSSource',
        'empty_dir': 'V1EmptyDirVolumeSource',
        'flex_volume': 'V1FlexVolumeSource',
        'git_repo': 'MlappGitRepoVolumeSource',
        'host_path': 'V1HostPathVolumeSource',
        'is_lib_dir': 'bool',
        'is_train_log_dir': 'bool',
        'is_workspace_local': 'bool',
        'model': 'MlappModelSource',
        'mount_path': 'str',
        'name': 'str',
        'nfs': 'V1NFSVolumeSource',
        'persistent_storage': 'MlappPersistentStorage',
        'persistent_volume_claim': 'V1PersistentVolumeClaimVolumeSource',
        'read_only': 'bool',
        's3bucket': 'MlappS3BucketSource',
        'sub_path': 'str'
    }

    attribute_map = {
        'cluster_storage': 'clusterStorage',
        'dataset': 'dataset',
        'dataset_fs': 'datasetFS',
        'empty_dir': 'emptyDir',
        'flex_volume': 'flexVolume',
        'git_repo': 'gitRepo',
        'host_path': 'hostPath',
        'is_lib_dir': 'isLibDir',
        'is_train_log_dir': 'isTrainLogDir',
        'is_workspace_local': 'isWorkspaceLocal',
        'model': 'model',
        'mount_path': 'mountPath',
        'name': 'name',
        'nfs': 'nfs',
        'persistent_storage': 'persistentStorage',
        'persistent_volume_claim': 'persistentVolumeClaim',
        'read_only': 'readOnly',
        's3bucket': 's3bucket',
        'sub_path': 'subPath'
    }

    def __init__(self, cluster_storage=None, dataset=None, dataset_fs=None, empty_dir=None, flex_volume=None, git_repo=None, host_path=None, is_lib_dir=None, is_train_log_dir=None, is_workspace_local=None, model=None, mount_path=None, name=None, nfs=None, persistent_storage=None, persistent_volume_claim=None, read_only=None, s3bucket=None, sub_path=None):  # noqa: E501
        """MlappVolume - a model defined in Swagger"""  # noqa: E501

        self._cluster_storage = None
        self._dataset = None
        self._dataset_fs = None
        self._empty_dir = None
        self._flex_volume = None
        self._git_repo = None
        self._host_path = None
        self._is_lib_dir = None
        self._is_train_log_dir = None
        self._is_workspace_local = None
        self._model = None
        self._mount_path = None
        self._name = None
        self._nfs = None
        self._persistent_storage = None
        self._persistent_volume_claim = None
        self._read_only = None
        self._s3bucket = None
        self._sub_path = None
        self.discriminator = None

        if cluster_storage is not None:
            self.cluster_storage = cluster_storage
        if dataset is not None:
            self.dataset = dataset
        if dataset_fs is not None:
            self.dataset_fs = dataset_fs
        if empty_dir is not None:
            self.empty_dir = empty_dir
        if flex_volume is not None:
            self.flex_volume = flex_volume
        if git_repo is not None:
            self.git_repo = git_repo
        if host_path is not None:
            self.host_path = host_path
        if is_lib_dir is not None:
            self.is_lib_dir = is_lib_dir
        if is_train_log_dir is not None:
            self.is_train_log_dir = is_train_log_dir
        if is_workspace_local is not None:
            self.is_workspace_local = is_workspace_local
        if model is not None:
            self.model = model
        if mount_path is not None:
            self.mount_path = mount_path
        self.name = name
        if nfs is not None:
            self.nfs = nfs
        if persistent_storage is not None:
            self.persistent_storage = persistent_storage
        if persistent_volume_claim is not None:
            self.persistent_volume_claim = persistent_volume_claim
        if read_only is not None:
            self.read_only = read_only
        if s3bucket is not None:
            self.s3bucket = s3bucket
        if sub_path is not None:
            self.sub_path = sub_path

    @property
    def cluster_storage(self):
        """Gets the cluster_storage of this MlappVolume.  # noqa: E501


        :return: The cluster_storage of this MlappVolume.  # noqa: E501
        :rtype: str
        """
        return self._cluster_storage

    @cluster_storage.setter
    def cluster_storage(self, cluster_storage):
        """Sets the cluster_storage of this MlappVolume.


        :param cluster_storage: The cluster_storage of this MlappVolume.  # noqa: E501
        :type: str
        """

        self._cluster_storage = cluster_storage

    @property
    def dataset(self):
        """Gets the dataset of this MlappVolume.  # noqa: E501


        :return: The dataset of this MlappVolume.  # noqa: E501
        :rtype: MlappDatasetSource
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this MlappVolume.


        :param dataset: The dataset of this MlappVolume.  # noqa: E501
        :type: MlappDatasetSource
        """

        self._dataset = dataset

    @property
    def dataset_fs(self):
        """Gets the dataset_fs of this MlappVolume.  # noqa: E501


        :return: The dataset_fs of this MlappVolume.  # noqa: E501
        :rtype: MlappDatasetFSSource
        """
        return self._dataset_fs

    @dataset_fs.setter
    def dataset_fs(self, dataset_fs):
        """Sets the dataset_fs of this MlappVolume.


        :param dataset_fs: The dataset_fs of this MlappVolume.  # noqa: E501
        :type: MlappDatasetFSSource
        """

        self._dataset_fs = dataset_fs

    @property
    def empty_dir(self):
        """Gets the empty_dir of this MlappVolume.  # noqa: E501


        :return: The empty_dir of this MlappVolume.  # noqa: E501
        :rtype: V1EmptyDirVolumeSource
        """
        return self._empty_dir

    @empty_dir.setter
    def empty_dir(self, empty_dir):
        """Sets the empty_dir of this MlappVolume.


        :param empty_dir: The empty_dir of this MlappVolume.  # noqa: E501
        :type: V1EmptyDirVolumeSource
        """

        self._empty_dir = empty_dir

    @property
    def flex_volume(self):
        """Gets the flex_volume of this MlappVolume.  # noqa: E501


        :return: The flex_volume of this MlappVolume.  # noqa: E501
        :rtype: V1FlexVolumeSource
        """
        return self._flex_volume

    @flex_volume.setter
    def flex_volume(self, flex_volume):
        """Sets the flex_volume of this MlappVolume.


        :param flex_volume: The flex_volume of this MlappVolume.  # noqa: E501
        :type: V1FlexVolumeSource
        """

        self._flex_volume = flex_volume

    @property
    def git_repo(self):
        """Gets the git_repo of this MlappVolume.  # noqa: E501


        :return: The git_repo of this MlappVolume.  # noqa: E501
        :rtype: MlappGitRepoVolumeSource
        """
        return self._git_repo

    @git_repo.setter
    def git_repo(self, git_repo):
        """Sets the git_repo of this MlappVolume.


        :param git_repo: The git_repo of this MlappVolume.  # noqa: E501
        :type: MlappGitRepoVolumeSource
        """

        self._git_repo = git_repo

    @property
    def host_path(self):
        """Gets the host_path of this MlappVolume.  # noqa: E501


        :return: The host_path of this MlappVolume.  # noqa: E501
        :rtype: V1HostPathVolumeSource
        """
        return self._host_path

    @host_path.setter
    def host_path(self, host_path):
        """Sets the host_path of this MlappVolume.


        :param host_path: The host_path of this MlappVolume.  # noqa: E501
        :type: V1HostPathVolumeSource
        """

        self._host_path = host_path

    @property
    def is_lib_dir(self):
        """Gets the is_lib_dir of this MlappVolume.  # noqa: E501


        :return: The is_lib_dir of this MlappVolume.  # noqa: E501
        :rtype: bool
        """
        return self._is_lib_dir

    @is_lib_dir.setter
    def is_lib_dir(self, is_lib_dir):
        """Sets the is_lib_dir of this MlappVolume.


        :param is_lib_dir: The is_lib_dir of this MlappVolume.  # noqa: E501
        :type: bool
        """

        self._is_lib_dir = is_lib_dir

    @property
    def is_train_log_dir(self):
        """Gets the is_train_log_dir of this MlappVolume.  # noqa: E501


        :return: The is_train_log_dir of this MlappVolume.  # noqa: E501
        :rtype: bool
        """
        return self._is_train_log_dir

    @is_train_log_dir.setter
    def is_train_log_dir(self, is_train_log_dir):
        """Sets the is_train_log_dir of this MlappVolume.


        :param is_train_log_dir: The is_train_log_dir of this MlappVolume.  # noqa: E501
        :type: bool
        """

        self._is_train_log_dir = is_train_log_dir

    @property
    def is_workspace_local(self):
        """Gets the is_workspace_local of this MlappVolume.  # noqa: E501


        :return: The is_workspace_local of this MlappVolume.  # noqa: E501
        :rtype: bool
        """
        return self._is_workspace_local

    @is_workspace_local.setter
    def is_workspace_local(self, is_workspace_local):
        """Sets the is_workspace_local of this MlappVolume.


        :param is_workspace_local: The is_workspace_local of this MlappVolume.  # noqa: E501
        :type: bool
        """

        self._is_workspace_local = is_workspace_local

    @property
    def model(self):
        """Gets the model of this MlappVolume.  # noqa: E501


        :return: The model of this MlappVolume.  # noqa: E501
        :rtype: MlappModelSource
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this MlappVolume.


        :param model: The model of this MlappVolume.  # noqa: E501
        :type: MlappModelSource
        """

        self._model = model

    @property
    def mount_path(self):
        """Gets the mount_path of this MlappVolume.  # noqa: E501


        :return: The mount_path of this MlappVolume.  # noqa: E501
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """Sets the mount_path of this MlappVolume.


        :param mount_path: The mount_path of this MlappVolume.  # noqa: E501
        :type: str
        """

        self._mount_path = mount_path

    @property
    def name(self):
        """Gets the name of this MlappVolume.  # noqa: E501


        :return: The name of this MlappVolume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MlappVolume.


        :param name: The name of this MlappVolume.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def nfs(self):
        """Gets the nfs of this MlappVolume.  # noqa: E501


        :return: The nfs of this MlappVolume.  # noqa: E501
        :rtype: V1NFSVolumeSource
        """
        return self._nfs

    @nfs.setter
    def nfs(self, nfs):
        """Sets the nfs of this MlappVolume.


        :param nfs: The nfs of this MlappVolume.  # noqa: E501
        :type: V1NFSVolumeSource
        """

        self._nfs = nfs

    @property
    def persistent_storage(self):
        """Gets the persistent_storage of this MlappVolume.  # noqa: E501


        :return: The persistent_storage of this MlappVolume.  # noqa: E501
        :rtype: MlappPersistentStorage
        """
        return self._persistent_storage

    @persistent_storage.setter
    def persistent_storage(self, persistent_storage):
        """Sets the persistent_storage of this MlappVolume.


        :param persistent_storage: The persistent_storage of this MlappVolume.  # noqa: E501
        :type: MlappPersistentStorage
        """

        self._persistent_storage = persistent_storage

    @property
    def persistent_volume_claim(self):
        """Gets the persistent_volume_claim of this MlappVolume.  # noqa: E501


        :return: The persistent_volume_claim of this MlappVolume.  # noqa: E501
        :rtype: V1PersistentVolumeClaimVolumeSource
        """
        return self._persistent_volume_claim

    @persistent_volume_claim.setter
    def persistent_volume_claim(self, persistent_volume_claim):
        """Sets the persistent_volume_claim of this MlappVolume.


        :param persistent_volume_claim: The persistent_volume_claim of this MlappVolume.  # noqa: E501
        :type: V1PersistentVolumeClaimVolumeSource
        """

        self._persistent_volume_claim = persistent_volume_claim

    @property
    def read_only(self):
        """Gets the read_only of this MlappVolume.  # noqa: E501


        :return: The read_only of this MlappVolume.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this MlappVolume.


        :param read_only: The read_only of this MlappVolume.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def s3bucket(self):
        """Gets the s3bucket of this MlappVolume.  # noqa: E501


        :return: The s3bucket of this MlappVolume.  # noqa: E501
        :rtype: MlappS3BucketSource
        """
        return self._s3bucket

    @s3bucket.setter
    def s3bucket(self, s3bucket):
        """Sets the s3bucket of this MlappVolume.


        :param s3bucket: The s3bucket of this MlappVolume.  # noqa: E501
        :type: MlappS3BucketSource
        """

        self._s3bucket = s3bucket

    @property
    def sub_path(self):
        """Gets the sub_path of this MlappVolume.  # noqa: E501


        :return: The sub_path of this MlappVolume.  # noqa: E501
        :rtype: str
        """
        return self._sub_path

    @sub_path.setter
    def sub_path(self, sub_path):
        """Sets the sub_path of this MlappVolume.


        :param sub_path: The sub_path of this MlappVolume.  # noqa: E501
        :type: str
        """

        self._sub_path = sub_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MlappVolume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MlappVolume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
