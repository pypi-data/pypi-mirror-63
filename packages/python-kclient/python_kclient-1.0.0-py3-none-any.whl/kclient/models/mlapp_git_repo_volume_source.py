# coding: utf-8

"""
    Kibernetika project, backend component

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MlappGitRepoVolumeSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'account_id': 'str',
        'directory': 'str',
        'private_key': 'str',
        'repository': 'str',
        'revision': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'access_token': 'access_token',
        'account_id': 'accountId',
        'directory': 'directory',
        'private_key': 'private_key',
        'repository': 'repository',
        'revision': 'revision',
        'user_name': 'user_name'
    }

    def __init__(self, access_token=None, account_id=None, directory=None, private_key=None, repository=None, revision=None, user_name=None):  # noqa: E501
        """MlappGitRepoVolumeSource - a model defined in Swagger"""  # noqa: E501

        self._access_token = None
        self._account_id = None
        self._directory = None
        self._private_key = None
        self._repository = None
        self._revision = None
        self._user_name = None
        self.discriminator = None

        if access_token is not None:
            self.access_token = access_token
        if account_id is not None:
            self.account_id = account_id
        if directory is not None:
            self.directory = directory
        if private_key is not None:
            self.private_key = private_key
        self.repository = repository
        if revision is not None:
            self.revision = revision
        if user_name is not None:
            self.user_name = user_name

    @property
    def access_token(self):
        """Gets the access_token of this MlappGitRepoVolumeSource.  # noqa: E501


        :return: The access_token of this MlappGitRepoVolumeSource.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this MlappGitRepoVolumeSource.


        :param access_token: The access_token of this MlappGitRepoVolumeSource.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def account_id(self):
        """Gets the account_id of this MlappGitRepoVolumeSource.  # noqa: E501


        :return: The account_id of this MlappGitRepoVolumeSource.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this MlappGitRepoVolumeSource.


        :param account_id: The account_id of this MlappGitRepoVolumeSource.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def directory(self):
        """Gets the directory of this MlappGitRepoVolumeSource.  # noqa: E501

        Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.  # noqa: E501

        :return: The directory of this MlappGitRepoVolumeSource.  # noqa: E501
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this MlappGitRepoVolumeSource.

        Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.  # noqa: E501

        :param directory: The directory of this MlappGitRepoVolumeSource.  # noqa: E501
        :type: str
        """

        self._directory = directory

    @property
    def private_key(self):
        """Gets the private_key of this MlappGitRepoVolumeSource.  # noqa: E501


        :return: The private_key of this MlappGitRepoVolumeSource.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this MlappGitRepoVolumeSource.


        :param private_key: The private_key of this MlappGitRepoVolumeSource.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def repository(self):
        """Gets the repository of this MlappGitRepoVolumeSource.  # noqa: E501

        Repository URL  # noqa: E501

        :return: The repository of this MlappGitRepoVolumeSource.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this MlappGitRepoVolumeSource.

        Repository URL  # noqa: E501

        :param repository: The repository of this MlappGitRepoVolumeSource.  # noqa: E501
        :type: str
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")  # noqa: E501

        self._repository = repository

    @property
    def revision(self):
        """Gets the revision of this MlappGitRepoVolumeSource.  # noqa: E501

        Commit hash for the specified revision.  # noqa: E501

        :return: The revision of this MlappGitRepoVolumeSource.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this MlappGitRepoVolumeSource.

        Commit hash for the specified revision.  # noqa: E501

        :param revision: The revision of this MlappGitRepoVolumeSource.  # noqa: E501
        :type: str
        """

        self._revision = revision

    @property
    def user_name(self):
        """Gets the user_name of this MlappGitRepoVolumeSource.  # noqa: E501


        :return: The user_name of this MlappGitRepoVolumeSource.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this MlappGitRepoVolumeSource.


        :param user_name: The user_name of this MlappGitRepoVolumeSource.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MlappGitRepoVolumeSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MlappGitRepoVolumeSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
