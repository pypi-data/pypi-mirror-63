# coding: utf-8

"""
    Kibernetika project, backend component

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsApplicationModelSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_display_name': 'str',
        'application_id': 'str',
        'application_name': 'str',
        'build': 'str',
        'path': 'str',
        'task': 'str',
        'volume': 'str',
        'workspace_display_name': 'str',
        'workspace_id': 'str',
        'workspace_name': 'str'
    }

    attribute_map = {
        'application_display_name': 'ApplicationDisplayName',
        'application_id': 'ApplicationID',
        'application_name': 'ApplicationName',
        'build': 'Build',
        'path': 'Path',
        'task': 'Task',
        'volume': 'Volume',
        'workspace_display_name': 'WorkspaceDisplayName',
        'workspace_id': 'WorkspaceID',
        'workspace_name': 'WorkspaceName'
    }

    def __init__(self, application_display_name=None, application_id=None, application_name=None, build=None, path=None, task=None, volume=None, workspace_display_name=None, workspace_id=None, workspace_name=None):  # noqa: E501
        """ModelsApplicationModelSource - a model defined in Swagger"""  # noqa: E501

        self._application_display_name = None
        self._application_id = None
        self._application_name = None
        self._build = None
        self._path = None
        self._task = None
        self._volume = None
        self._workspace_display_name = None
        self._workspace_id = None
        self._workspace_name = None
        self.discriminator = None

        if application_display_name is not None:
            self.application_display_name = application_display_name
        self.application_id = application_id
        if application_name is not None:
            self.application_name = application_name
        self.build = build
        self.path = path
        self.task = task
        self.volume = volume
        if workspace_display_name is not None:
            self.workspace_display_name = workspace_display_name
        self.workspace_id = workspace_id
        if workspace_name is not None:
            self.workspace_name = workspace_name

    @property
    def application_display_name(self):
        """Gets the application_display_name of this ModelsApplicationModelSource.  # noqa: E501


        :return: The application_display_name of this ModelsApplicationModelSource.  # noqa: E501
        :rtype: str
        """
        return self._application_display_name

    @application_display_name.setter
    def application_display_name(self, application_display_name):
        """Sets the application_display_name of this ModelsApplicationModelSource.


        :param application_display_name: The application_display_name of this ModelsApplicationModelSource.  # noqa: E501
        :type: str
        """

        self._application_display_name = application_display_name

    @property
    def application_id(self):
        """Gets the application_id of this ModelsApplicationModelSource.  # noqa: E501


        :return: The application_id of this ModelsApplicationModelSource.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ModelsApplicationModelSource.


        :param application_id: The application_id of this ModelsApplicationModelSource.  # noqa: E501
        :type: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")  # noqa: E501

        self._application_id = application_id

    @property
    def application_name(self):
        """Gets the application_name of this ModelsApplicationModelSource.  # noqa: E501


        :return: The application_name of this ModelsApplicationModelSource.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ModelsApplicationModelSource.


        :param application_name: The application_name of this ModelsApplicationModelSource.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def build(self):
        """Gets the build of this ModelsApplicationModelSource.  # noqa: E501


        :return: The build of this ModelsApplicationModelSource.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this ModelsApplicationModelSource.


        :param build: The build of this ModelsApplicationModelSource.  # noqa: E501
        :type: str
        """
        if build is None:
            raise ValueError("Invalid value for `build`, must not be `None`")  # noqa: E501

        self._build = build

    @property
    def path(self):
        """Gets the path of this ModelsApplicationModelSource.  # noqa: E501


        :return: The path of this ModelsApplicationModelSource.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ModelsApplicationModelSource.


        :param path: The path of this ModelsApplicationModelSource.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def task(self):
        """Gets the task of this ModelsApplicationModelSource.  # noqa: E501


        :return: The task of this ModelsApplicationModelSource.  # noqa: E501
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this ModelsApplicationModelSource.


        :param task: The task of this ModelsApplicationModelSource.  # noqa: E501
        :type: str
        """
        if task is None:
            raise ValueError("Invalid value for `task`, must not be `None`")  # noqa: E501

        self._task = task

    @property
    def volume(self):
        """Gets the volume of this ModelsApplicationModelSource.  # noqa: E501


        :return: The volume of this ModelsApplicationModelSource.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this ModelsApplicationModelSource.


        :param volume: The volume of this ModelsApplicationModelSource.  # noqa: E501
        :type: str
        """
        if volume is None:
            raise ValueError("Invalid value for `volume`, must not be `None`")  # noqa: E501

        self._volume = volume

    @property
    def workspace_display_name(self):
        """Gets the workspace_display_name of this ModelsApplicationModelSource.  # noqa: E501


        :return: The workspace_display_name of this ModelsApplicationModelSource.  # noqa: E501
        :rtype: str
        """
        return self._workspace_display_name

    @workspace_display_name.setter
    def workspace_display_name(self, workspace_display_name):
        """Sets the workspace_display_name of this ModelsApplicationModelSource.


        :param workspace_display_name: The workspace_display_name of this ModelsApplicationModelSource.  # noqa: E501
        :type: str
        """

        self._workspace_display_name = workspace_display_name

    @property
    def workspace_id(self):
        """Gets the workspace_id of this ModelsApplicationModelSource.  # noqa: E501


        :return: The workspace_id of this ModelsApplicationModelSource.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this ModelsApplicationModelSource.


        :param workspace_id: The workspace_id of this ModelsApplicationModelSource.  # noqa: E501
        :type: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    @property
    def workspace_name(self):
        """Gets the workspace_name of this ModelsApplicationModelSource.  # noqa: E501


        :return: The workspace_name of this ModelsApplicationModelSource.  # noqa: E501
        :rtype: str
        """
        return self._workspace_name

    @workspace_name.setter
    def workspace_name(self, workspace_name):
        """Sets the workspace_name of this ModelsApplicationModelSource.


        :param workspace_name: The workspace_name of this ModelsApplicationModelSource.  # noqa: E501
        :type: str
        """

        self._workspace_name = workspace_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsApplicationModelSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsApplicationModelSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
