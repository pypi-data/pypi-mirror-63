# coding: utf-8

"""
    Kibernetika project, backend component

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsApplicationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author': 'ModelsUser',
        'comments': 'int',
        'config': 'ModelsApplicationModelConfig',
        'created': 'str',
        'description': 'str',
        'display_name': 'str',
        'forked_from': 'ModelsForkedItem',
        'forks': 'int',
        '_global': 'bool',
        'id': 'str',
        'interface': 'str',
        'keywords': 'list[str]',
        'name': 'str',
        'object': 'str',
        'picture': 'str',
        'published': 'bool',
        'star': 'bool',
        'stars': 'int',
        'type': 'str',
        'updated': 'str',
        'workspace_display_name': 'str',
        'workspace_name': 'str'
    }

    attribute_map = {
        'author': 'Author',
        'comments': 'Comments',
        'config': 'Config',
        'created': 'Created',
        'description': 'Description',
        'display_name': 'DisplayName',
        'forked_from': 'ForkedFrom',
        'forks': 'Forks',
        '_global': 'Global',
        'id': 'ID',
        'interface': 'Interface',
        'keywords': 'Keywords',
        'name': 'Name',
        'object': 'Object',
        'picture': 'Picture',
        'published': 'Published',
        'star': 'Star',
        'stars': 'Stars',
        'type': 'Type',
        'updated': 'Updated',
        'workspace_display_name': 'WorkspaceDisplayName',
        'workspace_name': 'WorkspaceName'
    }

    def __init__(self, author=None, comments=None, config=None, created=None, description=None, display_name=None, forked_from=None, forks=None, _global=None, id=None, interface=None, keywords=None, name=None, object=None, picture=None, published=None, star=None, stars=None, type=None, updated=None, workspace_display_name=None, workspace_name=None):  # noqa: E501
        """ModelsApplicationModel - a model defined in Swagger"""  # noqa: E501

        self._author = None
        self._comments = None
        self._config = None
        self._created = None
        self._description = None
        self._display_name = None
        self._forked_from = None
        self._forks = None
        self.__global = None
        self._id = None
        self._interface = None
        self._keywords = None
        self._name = None
        self._object = None
        self._picture = None
        self._published = None
        self._star = None
        self._stars = None
        self._type = None
        self._updated = None
        self._workspace_display_name = None
        self._workspace_name = None
        self.discriminator = None

        if author is not None:
            self.author = author
        if comments is not None:
            self.comments = comments
        if config is not None:
            self.config = config
        if created is not None:
            self.created = created
        if description is not None:
            self.description = description
        self.display_name = display_name
        if forked_from is not None:
            self.forked_from = forked_from
        if forks is not None:
            self.forks = forks
        if _global is not None:
            self._global = _global
        if id is not None:
            self.id = id
        if interface is not None:
            self.interface = interface
        if keywords is not None:
            self.keywords = keywords
        if name is not None:
            self.name = name
        if object is not None:
            self.object = object
        if picture is not None:
            self.picture = picture
        if published is not None:
            self.published = published
        if star is not None:
            self.star = star
        if stars is not None:
            self.stars = stars
        if type is not None:
            self.type = type
        if updated is not None:
            self.updated = updated
        if workspace_display_name is not None:
            self.workspace_display_name = workspace_display_name
        if workspace_name is not None:
            self.workspace_name = workspace_name

    @property
    def author(self):
        """Gets the author of this ModelsApplicationModel.  # noqa: E501


        :return: The author of this ModelsApplicationModel.  # noqa: E501
        :rtype: ModelsUser
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ModelsApplicationModel.


        :param author: The author of this ModelsApplicationModel.  # noqa: E501
        :type: ModelsUser
        """

        self._author = author

    @property
    def comments(self):
        """Gets the comments of this ModelsApplicationModel.  # noqa: E501


        :return: The comments of this ModelsApplicationModel.  # noqa: E501
        :rtype: int
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this ModelsApplicationModel.


        :param comments: The comments of this ModelsApplicationModel.  # noqa: E501
        :type: int
        """

        self._comments = comments

    @property
    def config(self):
        """Gets the config of this ModelsApplicationModel.  # noqa: E501


        :return: The config of this ModelsApplicationModel.  # noqa: E501
        :rtype: ModelsApplicationModelConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ModelsApplicationModel.


        :param config: The config of this ModelsApplicationModel.  # noqa: E501
        :type: ModelsApplicationModelConfig
        """

        self._config = config

    @property
    def created(self):
        """Gets the created of this ModelsApplicationModel.  # noqa: E501


        :return: The created of this ModelsApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ModelsApplicationModel.


        :param created: The created of this ModelsApplicationModel.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this ModelsApplicationModel.  # noqa: E501


        :return: The description of this ModelsApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelsApplicationModel.


        :param description: The description of this ModelsApplicationModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ModelsApplicationModel.  # noqa: E501


        :return: The display_name of this ModelsApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ModelsApplicationModel.


        :param display_name: The display_name of this ModelsApplicationModel.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def forked_from(self):
        """Gets the forked_from of this ModelsApplicationModel.  # noqa: E501


        :return: The forked_from of this ModelsApplicationModel.  # noqa: E501
        :rtype: ModelsForkedItem
        """
        return self._forked_from

    @forked_from.setter
    def forked_from(self, forked_from):
        """Sets the forked_from of this ModelsApplicationModel.


        :param forked_from: The forked_from of this ModelsApplicationModel.  # noqa: E501
        :type: ModelsForkedItem
        """

        self._forked_from = forked_from

    @property
    def forks(self):
        """Gets the forks of this ModelsApplicationModel.  # noqa: E501


        :return: The forks of this ModelsApplicationModel.  # noqa: E501
        :rtype: int
        """
        return self._forks

    @forks.setter
    def forks(self, forks):
        """Sets the forks of this ModelsApplicationModel.


        :param forks: The forks of this ModelsApplicationModel.  # noqa: E501
        :type: int
        """

        self._forks = forks

    @property
    def _global(self):
        """Gets the _global of this ModelsApplicationModel.  # noqa: E501


        :return: The _global of this ModelsApplicationModel.  # noqa: E501
        :rtype: bool
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """Sets the _global of this ModelsApplicationModel.


        :param _global: The _global of this ModelsApplicationModel.  # noqa: E501
        :type: bool
        """

        self.__global = _global

    @property
    def id(self):
        """Gets the id of this ModelsApplicationModel.  # noqa: E501


        :return: The id of this ModelsApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsApplicationModel.


        :param id: The id of this ModelsApplicationModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def interface(self):
        """Gets the interface of this ModelsApplicationModel.  # noqa: E501


        :return: The interface of this ModelsApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this ModelsApplicationModel.


        :param interface: The interface of this ModelsApplicationModel.  # noqa: E501
        :type: str
        """

        self._interface = interface

    @property
    def keywords(self):
        """Gets the keywords of this ModelsApplicationModel.  # noqa: E501


        :return: The keywords of this ModelsApplicationModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this ModelsApplicationModel.


        :param keywords: The keywords of this ModelsApplicationModel.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def name(self):
        """Gets the name of this ModelsApplicationModel.  # noqa: E501


        :return: The name of this ModelsApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsApplicationModel.


        :param name: The name of this ModelsApplicationModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def object(self):
        """Gets the object of this ModelsApplicationModel.  # noqa: E501


        :return: The object of this ModelsApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this ModelsApplicationModel.


        :param object: The object of this ModelsApplicationModel.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def picture(self):
        """Gets the picture of this ModelsApplicationModel.  # noqa: E501


        :return: The picture of this ModelsApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this ModelsApplicationModel.


        :param picture: The picture of this ModelsApplicationModel.  # noqa: E501
        :type: str
        """

        self._picture = picture

    @property
    def published(self):
        """Gets the published of this ModelsApplicationModel.  # noqa: E501


        :return: The published of this ModelsApplicationModel.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this ModelsApplicationModel.


        :param published: The published of this ModelsApplicationModel.  # noqa: E501
        :type: bool
        """

        self._published = published

    @property
    def star(self):
        """Gets the star of this ModelsApplicationModel.  # noqa: E501


        :return: The star of this ModelsApplicationModel.  # noqa: E501
        :rtype: bool
        """
        return self._star

    @star.setter
    def star(self, star):
        """Sets the star of this ModelsApplicationModel.


        :param star: The star of this ModelsApplicationModel.  # noqa: E501
        :type: bool
        """

        self._star = star

    @property
    def stars(self):
        """Gets the stars of this ModelsApplicationModel.  # noqa: E501


        :return: The stars of this ModelsApplicationModel.  # noqa: E501
        :rtype: int
        """
        return self._stars

    @stars.setter
    def stars(self, stars):
        """Sets the stars of this ModelsApplicationModel.


        :param stars: The stars of this ModelsApplicationModel.  # noqa: E501
        :type: int
        """

        self._stars = stars

    @property
    def type(self):
        """Gets the type of this ModelsApplicationModel.  # noqa: E501


        :return: The type of this ModelsApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelsApplicationModel.


        :param type: The type of this ModelsApplicationModel.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updated(self):
        """Gets the updated of this ModelsApplicationModel.  # noqa: E501


        :return: The updated of this ModelsApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ModelsApplicationModel.


        :param updated: The updated of this ModelsApplicationModel.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def workspace_display_name(self):
        """Gets the workspace_display_name of this ModelsApplicationModel.  # noqa: E501


        :return: The workspace_display_name of this ModelsApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._workspace_display_name

    @workspace_display_name.setter
    def workspace_display_name(self, workspace_display_name):
        """Sets the workspace_display_name of this ModelsApplicationModel.


        :param workspace_display_name: The workspace_display_name of this ModelsApplicationModel.  # noqa: E501
        :type: str
        """

        self._workspace_display_name = workspace_display_name

    @property
    def workspace_name(self):
        """Gets the workspace_name of this ModelsApplicationModel.  # noqa: E501


        :return: The workspace_name of this ModelsApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._workspace_name

    @workspace_name.setter
    def workspace_name(self, workspace_name):
        """Sets the workspace_name of this ModelsApplicationModel.


        :param workspace_name: The workspace_name of this ModelsApplicationModel.  # noqa: E501
        :type: str
        """

        self._workspace_name = workspace_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsApplicationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsApplicationModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
