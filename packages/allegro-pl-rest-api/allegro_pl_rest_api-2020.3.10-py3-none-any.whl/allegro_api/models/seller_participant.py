# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from allegro_api.configuration import Configuration


class SellerParticipant(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'company_name': 'str',
        'login': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'address': 'OperationParticipantAddress',
        'id': 'str'
    }

    attribute_map = {
        'company_name': 'companyName',
        'login': 'login',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'address': 'address',
        'id': 'id'
    }

    def __init__(self, company_name=None, login=None, first_name=None, last_name=None, address=None, id=None, local_vars_configuration=None):  # noqa: E501
        """SellerParticipant - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._company_name = None
        self._login = None
        self._first_name = None
        self._last_name = None
        self._address = None
        self._id = None
        self.discriminator = None

        if company_name is not None:
            self.company_name = company_name
        self.login = login
        self.first_name = first_name
        self.last_name = last_name
        if address is not None:
            self.address = address
        self.id = id

    @property
    def company_name(self):
        """Gets the company_name of this SellerParticipant.  # noqa: E501

        Company name.  # noqa: E501

        :return: The company_name of this SellerParticipant.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this SellerParticipant.

        Company name.  # noqa: E501

        :param company_name: The company_name of this SellerParticipant.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def login(self):
        """Gets the login of this SellerParticipant.  # noqa: E501

        Login.  # noqa: E501

        :return: The login of this SellerParticipant.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this SellerParticipant.

        Login.  # noqa: E501

        :param login: The login of this SellerParticipant.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and login is None:  # noqa: E501
            raise ValueError("Invalid value for `login`, must not be `None`")  # noqa: E501

        self._login = login

    @property
    def first_name(self):
        """Gets the first_name of this SellerParticipant.  # noqa: E501

        First name.  # noqa: E501

        :return: The first_name of this SellerParticipant.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SellerParticipant.

        First name.  # noqa: E501

        :param first_name: The first_name of this SellerParticipant.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and first_name is None:  # noqa: E501
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this SellerParticipant.  # noqa: E501

        Last name.  # noqa: E501

        :return: The last_name of this SellerParticipant.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SellerParticipant.

        Last name.  # noqa: E501

        :param last_name: The last_name of this SellerParticipant.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and last_name is None:  # noqa: E501
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def address(self):
        """Gets the address of this SellerParticipant.  # noqa: E501


        :return: The address of this SellerParticipant.  # noqa: E501
        :rtype: OperationParticipantAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SellerParticipant.


        :param address: The address of this SellerParticipant.  # noqa: E501
        :type: OperationParticipantAddress
        """

        self._address = address

    @property
    def id(self):
        """Gets the id of this SellerParticipant.  # noqa: E501

        The seller's ID.  # noqa: E501

        :return: The id of this SellerParticipant.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SellerParticipant.

        The seller's ID.  # noqa: E501

        :param id: The id of this SellerParticipant.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SellerParticipant):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SellerParticipant):
            return True

        return self.to_dict() != other.to_dict()
