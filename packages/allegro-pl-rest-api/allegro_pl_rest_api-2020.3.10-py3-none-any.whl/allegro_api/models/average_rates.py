# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from allegro_api.configuration import Configuration


class AverageRates(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'delivery': 'float',
        'delivery_cost': 'float',
        'description': 'float',
        'service': 'float'
    }

    attribute_map = {
        'delivery': 'delivery',
        'delivery_cost': 'deliveryCost',
        'description': 'description',
        'service': 'service'
    }

    def __init__(self, delivery=None, delivery_cost=None, description=None, service=None, local_vars_configuration=None):  # noqa: E501
        """AverageRates - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._delivery = None
        self._delivery_cost = None
        self._description = None
        self._service = None
        self.discriminator = None

        if delivery is not None:
            self.delivery = delivery
        if delivery_cost is not None:
            self.delivery_cost = delivery_cost
        if description is not None:
            self.description = description
        if service is not None:
            self.service = service

    @property
    def delivery(self):
        """Gets the delivery of this AverageRates.  # noqa: E501

        The average value of delivery rate.  # noqa: E501

        :return: The delivery of this AverageRates.  # noqa: E501
        :rtype: float
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this AverageRates.

        The average value of delivery rate.  # noqa: E501

        :param delivery: The delivery of this AverageRates.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                delivery is not None and delivery > 5):  # noqa: E501
            raise ValueError("Invalid value for `delivery`, must be a value less than or equal to `5`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                delivery is not None and delivery < 0):  # noqa: E501
            raise ValueError("Invalid value for `delivery`, must be a value greater than or equal to `0`")  # noqa: E501

        self._delivery = delivery

    @property
    def delivery_cost(self):
        """Gets the delivery_cost of this AverageRates.  # noqa: E501

        The average value of delivery cost rate.  # noqa: E501

        :return: The delivery_cost of this AverageRates.  # noqa: E501
        :rtype: float
        """
        return self._delivery_cost

    @delivery_cost.setter
    def delivery_cost(self, delivery_cost):
        """Sets the delivery_cost of this AverageRates.

        The average value of delivery cost rate.  # noqa: E501

        :param delivery_cost: The delivery_cost of this AverageRates.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                delivery_cost is not None and delivery_cost > 5):  # noqa: E501
            raise ValueError("Invalid value for `delivery_cost`, must be a value less than or equal to `5`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                delivery_cost is not None and delivery_cost < 0):  # noqa: E501
            raise ValueError("Invalid value for `delivery_cost`, must be a value greater than or equal to `0`")  # noqa: E501

        self._delivery_cost = delivery_cost

    @property
    def description(self):
        """Gets the description of this AverageRates.  # noqa: E501

        The average value of description rate.  # noqa: E501

        :return: The description of this AverageRates.  # noqa: E501
        :rtype: float
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AverageRates.

        The average value of description rate.  # noqa: E501

        :param description: The description of this AverageRates.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and description > 5):  # noqa: E501
            raise ValueError("Invalid value for `description`, must be a value less than or equal to `5`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and description < 0):  # noqa: E501
            raise ValueError("Invalid value for `description`, must be a value greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def service(self):
        """Gets the service of this AverageRates.  # noqa: E501

        The average value of service rate.  # noqa: E501

        :return: The service of this AverageRates.  # noqa: E501
        :rtype: float
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this AverageRates.

        The average value of service rate.  # noqa: E501

        :param service: The service of this AverageRates.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                service is not None and service > 5):  # noqa: E501
            raise ValueError("Invalid value for `service`, must be a value less than or equal to `5`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                service is not None and service < 0):  # noqa: E501
            raise ValueError("Invalid value for `service`, must be a value greater than or equal to `0`")  # noqa: E501

        self._service = service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AverageRates):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AverageRates):
            return True

        return self.to_dict() != other.to_dict()
