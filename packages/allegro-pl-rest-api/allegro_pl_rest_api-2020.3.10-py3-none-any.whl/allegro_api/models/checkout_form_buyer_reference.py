# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from allegro_api.configuration import Configuration


class CheckoutFormBuyerReference(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'email': 'str',
        'login': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'company_name': 'str',
        'guest': 'bool',
        'personal_identity': 'str',
        'phone_number': 'str',
        'address': 'CheckoutFormBuyerAddressReference'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'login': 'login',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'company_name': 'companyName',
        'guest': 'guest',
        'personal_identity': 'personalIdentity',
        'phone_number': 'phoneNumber',
        'address': 'address'
    }

    def __init__(self, id=None, email=None, login=None, first_name=None, last_name=None, company_name=None, guest=None, personal_identity=None, phone_number=None, address=None, local_vars_configuration=None):  # noqa: E501
        """CheckoutFormBuyerReference - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._email = None
        self._login = None
        self._first_name = None
        self._last_name = None
        self._company_name = None
        self._guest = None
        self._personal_identity = None
        self._phone_number = None
        self._address = None
        self.discriminator = None

        self.id = id
        self.email = email
        self.login = login
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if company_name is not None:
            self.company_name = company_name
        self.guest = guest
        if personal_identity is not None:
            self.personal_identity = personal_identity
        if phone_number is not None:
            self.phone_number = phone_number
        if address is not None:
            self.address = address

    @property
    def id(self):
        """Gets the id of this CheckoutFormBuyerReference.  # noqa: E501

        buyer id  # noqa: E501

        :return: The id of this CheckoutFormBuyerReference.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CheckoutFormBuyerReference.

        buyer id  # noqa: E501

        :param id: The id of this CheckoutFormBuyerReference.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def email(self):
        """Gets the email of this CheckoutFormBuyerReference.  # noqa: E501


        :return: The email of this CheckoutFormBuyerReference.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CheckoutFormBuyerReference.


        :param email: The email of this CheckoutFormBuyerReference.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def login(self):
        """Gets the login of this CheckoutFormBuyerReference.  # noqa: E501


        :return: The login of this CheckoutFormBuyerReference.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this CheckoutFormBuyerReference.


        :param login: The login of this CheckoutFormBuyerReference.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and login is None:  # noqa: E501
            raise ValueError("Invalid value for `login`, must not be `None`")  # noqa: E501

        self._login = login

    @property
    def first_name(self):
        """Gets the first_name of this CheckoutFormBuyerReference.  # noqa: E501

        Buyer's first name  # noqa: E501

        :return: The first_name of this CheckoutFormBuyerReference.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CheckoutFormBuyerReference.

        Buyer's first name  # noqa: E501

        :param first_name: The first_name of this CheckoutFormBuyerReference.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CheckoutFormBuyerReference.  # noqa: E501

        Buyer's last name  # noqa: E501

        :return: The last_name of this CheckoutFormBuyerReference.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CheckoutFormBuyerReference.

        Buyer's last name  # noqa: E501

        :param last_name: The last_name of this CheckoutFormBuyerReference.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def company_name(self):
        """Gets the company_name of this CheckoutFormBuyerReference.  # noqa: E501

        Company name  # noqa: E501

        :return: The company_name of this CheckoutFormBuyerReference.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this CheckoutFormBuyerReference.

        Company name  # noqa: E501

        :param company_name: The company_name of this CheckoutFormBuyerReference.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def guest(self):
        """Gets the guest of this CheckoutFormBuyerReference.  # noqa: E501

        is a guest account?  # noqa: E501

        :return: The guest of this CheckoutFormBuyerReference.  # noqa: E501
        :rtype: bool
        """
        return self._guest

    @guest.setter
    def guest(self, guest):
        """Sets the guest of this CheckoutFormBuyerReference.

        is a guest account?  # noqa: E501

        :param guest: The guest of this CheckoutFormBuyerReference.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and guest is None:  # noqa: E501
            raise ValueError("Invalid value for `guest`, must not be `None`")  # noqa: E501

        self._guest = guest

    @property
    def personal_identity(self):
        """Gets the personal_identity of this CheckoutFormBuyerReference.  # noqa: E501

        Buyer's personal identity number (PESEL)  # noqa: E501

        :return: The personal_identity of this CheckoutFormBuyerReference.  # noqa: E501
        :rtype: str
        """
        return self._personal_identity

    @personal_identity.setter
    def personal_identity(self, personal_identity):
        """Sets the personal_identity of this CheckoutFormBuyerReference.

        Buyer's personal identity number (PESEL)  # noqa: E501

        :param personal_identity: The personal_identity of this CheckoutFormBuyerReference.  # noqa: E501
        :type: str
        """

        self._personal_identity = personal_identity

    @property
    def phone_number(self):
        """Gets the phone_number of this CheckoutFormBuyerReference.  # noqa: E501

        Phone number  # noqa: E501

        :return: The phone_number of this CheckoutFormBuyerReference.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CheckoutFormBuyerReference.

        Phone number  # noqa: E501

        :param phone_number: The phone_number of this CheckoutFormBuyerReference.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def address(self):
        """Gets the address of this CheckoutFormBuyerReference.  # noqa: E501


        :return: The address of this CheckoutFormBuyerReference.  # noqa: E501
        :rtype: CheckoutFormBuyerAddressReference
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CheckoutFormBuyerReference.


        :param address: The address of this CheckoutFormBuyerReference.  # noqa: E501
        :type: CheckoutFormBuyerAddressReference
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckoutFormBuyerReference):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CheckoutFormBuyerReference):
            return True

        return self.to_dict() != other.to_dict()
