# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from allegro_api.configuration import Configuration


class FullDefinitionResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'available_constraints': 'list[AvailableConstraint]',
        'description': 'str',
        'id': 'str',
        'name': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'available_constraints': 'availableConstraints',
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'updated_at': 'updatedAt'
    }

    def __init__(self, available_constraints=None, description=None, id=None, name=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """FullDefinitionResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._available_constraints = None
        self._description = None
        self._id = None
        self._name = None
        self._updated_at = None
        self.discriminator = None

        if available_constraints is not None:
            self.available_constraints = available_constraints
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def available_constraints(self):
        """Gets the available_constraints of this FullDefinitionResponse.  # noqa: E501


        :return: The available_constraints of this FullDefinitionResponse.  # noqa: E501
        :rtype: list[AvailableConstraint]
        """
        return self._available_constraints

    @available_constraints.setter
    def available_constraints(self, available_constraints):
        """Sets the available_constraints of this FullDefinitionResponse.


        :param available_constraints: The available_constraints of this FullDefinitionResponse.  # noqa: E501
        :type: list[AvailableConstraint]
        """

        self._available_constraints = available_constraints

    @property
    def description(self):
        """Gets the description of this FullDefinitionResponse.  # noqa: E501


        :return: The description of this FullDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FullDefinitionResponse.


        :param description: The description of this FullDefinitionResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this FullDefinitionResponse.  # noqa: E501


        :return: The id of this FullDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FullDefinitionResponse.


        :param id: The id of this FullDefinitionResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FullDefinitionResponse.  # noqa: E501


        :return: The name of this FullDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FullDefinitionResponse.


        :param name: The name of this FullDefinitionResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def updated_at(self):
        """Gets the updated_at of this FullDefinitionResponse.  # noqa: E501


        :return: The updated_at of this FullDefinitionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this FullDefinitionResponse.


        :param updated_at: The updated_at of this FullDefinitionResponse.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FullDefinitionResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FullDefinitionResponse):
            return True

        return self.to_dict() != other.to_dict()
