# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from allegro_api.configuration import Configuration


class StringCategoryProductParameterAllOfRestrictions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'min_length': 'int',
        'max_length': 'int',
        'allowed_number_of_values': 'int'
    }

    attribute_map = {
        'min_length': 'minLength',
        'max_length': 'maxLength',
        'allowed_number_of_values': 'allowedNumberOfValues'
    }

    def __init__(self, min_length=None, max_length=None, allowed_number_of_values=None, local_vars_configuration=None):  # noqa: E501
        """StringCategoryProductParameterAllOfRestrictions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._min_length = None
        self._max_length = None
        self._allowed_number_of_values = None
        self.discriminator = None

        if min_length is not None:
            self.min_length = min_length
        if max_length is not None:
            self.max_length = max_length
        if allowed_number_of_values is not None:
            self.allowed_number_of_values = allowed_number_of_values

    @property
    def min_length(self):
        """Gets the min_length of this StringCategoryProductParameterAllOfRestrictions.  # noqa: E501

        The minimum length of the parameter value.  # noqa: E501

        :return: The min_length of this StringCategoryProductParameterAllOfRestrictions.  # noqa: E501
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this StringCategoryProductParameterAllOfRestrictions.

        The minimum length of the parameter value.  # noqa: E501

        :param min_length: The min_length of this StringCategoryProductParameterAllOfRestrictions.  # noqa: E501
        :type: int
        """

        self._min_length = min_length

    @property
    def max_length(self):
        """Gets the max_length of this StringCategoryProductParameterAllOfRestrictions.  # noqa: E501

        The maximum length of the parameter value.  # noqa: E501

        :return: The max_length of this StringCategoryProductParameterAllOfRestrictions.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this StringCategoryProductParameterAllOfRestrictions.

        The maximum length of the parameter value.  # noqa: E501

        :param max_length: The max_length of this StringCategoryProductParameterAllOfRestrictions.  # noqa: E501
        :type: int
        """

        self._max_length = max_length

    @property
    def allowed_number_of_values(self):
        """Gets the allowed_number_of_values of this StringCategoryProductParameterAllOfRestrictions.  # noqa: E501

        Indicates how many different values can be provided for this parameter.  # noqa: E501

        :return: The allowed_number_of_values of this StringCategoryProductParameterAllOfRestrictions.  # noqa: E501
        :rtype: int
        """
        return self._allowed_number_of_values

    @allowed_number_of_values.setter
    def allowed_number_of_values(self, allowed_number_of_values):
        """Sets the allowed_number_of_values of this StringCategoryProductParameterAllOfRestrictions.

        Indicates how many different values can be provided for this parameter.  # noqa: E501

        :param allowed_number_of_values: The allowed_number_of_values of this StringCategoryProductParameterAllOfRestrictions.  # noqa: E501
        :type: int
        """

        self._allowed_number_of_values = allowed_number_of_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StringCategoryProductParameterAllOfRestrictions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StringCategoryProductParameterAllOfRestrictions):
            return True

        return self.to_dict() != other.to_dict()
