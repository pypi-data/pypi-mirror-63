# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from allegro_api.configuration import Configuration


class SellerRebateOfferCriterionOffers(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'quantity': 'float',
        'promotion_entry_point': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'quantity': 'quantity',
        'promotion_entry_point': 'promotionEntryPoint'
    }

    def __init__(self, id=None, quantity=None, promotion_entry_point=None, local_vars_configuration=None):  # noqa: E501
        """SellerRebateOfferCriterionOffers - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._quantity = None
        self._promotion_entry_point = None
        self.discriminator = None

        self.id = id
        if quantity is not None:
            self.quantity = quantity
        if promotion_entry_point is not None:
            self.promotion_entry_point = promotion_entry_point

    @property
    def id(self):
        """Gets the id of this SellerRebateOfferCriterionOffers.  # noqa: E501

        Offer id  # noqa: E501

        :return: The id of this SellerRebateOfferCriterionOffers.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SellerRebateOfferCriterionOffers.

        Offer id  # noqa: E501

        :param id: The id of this SellerRebateOfferCriterionOffers.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def quantity(self):
        """Gets the quantity of this SellerRebateOfferCriterionOffers.  # noqa: E501

        that many pieces of your offer will be part of the bundle, valid only for bundle `ORDER_FIXED_DISCOUNT` promotions  # noqa: E501

        :return: The quantity of this SellerRebateOfferCriterionOffers.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SellerRebateOfferCriterionOffers.

        that many pieces of your offer will be part of the bundle, valid only for bundle `ORDER_FIXED_DISCOUNT` promotions  # noqa: E501

        :param quantity: The quantity of this SellerRebateOfferCriterionOffers.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def promotion_entry_point(self):
        """Gets the promotion_entry_point of this SellerRebateOfferCriterionOffers.  # noqa: E501

        offers with this flag set to true will have a section that allows the users to purchase your bundle, valid only for bundle `ORDER_FIXED_DISCOUNT` promotions  # noqa: E501

        :return: The promotion_entry_point of this SellerRebateOfferCriterionOffers.  # noqa: E501
        :rtype: bool
        """
        return self._promotion_entry_point

    @promotion_entry_point.setter
    def promotion_entry_point(self, promotion_entry_point):
        """Sets the promotion_entry_point of this SellerRebateOfferCriterionOffers.

        offers with this flag set to true will have a section that allows the users to purchase your bundle, valid only for bundle `ORDER_FIXED_DISCOUNT` promotions  # noqa: E501

        :param promotion_entry_point: The promotion_entry_point of this SellerRebateOfferCriterionOffers.  # noqa: E501
        :type: bool
        """

        self._promotion_entry_point = promotion_entry_point

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SellerRebateOfferCriterionOffers):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SellerRebateOfferCriterionOffers):
            return True

        return self.to_dict() != other.to_dict()
