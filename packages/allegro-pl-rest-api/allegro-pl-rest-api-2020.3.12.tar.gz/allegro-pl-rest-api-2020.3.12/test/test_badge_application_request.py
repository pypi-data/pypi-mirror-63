# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import allegro_api
from allegro_api.models.badge_application_request import BadgeApplicationRequest  # noqa: E501
from allegro_api.rest import ApiException

class TestBadgeApplicationRequest(unittest.TestCase):
    """BadgeApplicationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test BadgeApplicationRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = allegro_api.models.badge_application_request.BadgeApplicationRequest()  # noqa: E501
        if include_optional :
            return BadgeApplicationRequest(
                campaign = allegro_api.models.badge_application_campaign.BadgeApplicationCampaign(
                    id = 'BARGAIN', ), 
                offer = allegro_api.models.badge_offer.BadgeOffer(
                    id = '987654321', ), 
                prices = allegro_api.models.badge_prices.BadgePrices(
                    market = allegro_api.models.badge_application_market_price.BadgeApplicationMarketPrice(
                        amount = '1.23', 
                        currency = 'PLN', ), 
                    bargain = allegro_api.models.badge_application_bargain_price.BadgeApplicationBargainPrice(
                        amount = '1.23', 
                        currency = 'PLN', ), ), 
                purchase_constraints = allegro_api.models.badge_application_purchase_constraints.BadgeApplicationPurchaseConstraints(
                    limit = allegro_api.models.badge_application_purchase_constraints_limit.BadgeApplicationPurchaseConstraintsLimit(
                        per_user = allegro_api.models.badge_application_purchase_constraints_limit_per_user.BadgeApplicationPurchaseConstraintsLimitPerUser(
                            max_items = 1, ), ), )
            )
        else :
            return BadgeApplicationRequest(
                campaign = allegro_api.models.badge_application_campaign.BadgeApplicationCampaign(
                    id = 'BARGAIN', ),
                offer = allegro_api.models.badge_offer.BadgeOffer(
                    id = '987654321', ),
        )

    def testBadgeApplicationRequest(self):
        """Test BadgeApplicationRequest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
