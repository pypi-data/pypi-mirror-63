# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import allegro_api
from allegro_api.models.listing_response import ListingResponse  # noqa: E501
from allegro_api.rest import ApiException

class TestListingResponse(unittest.TestCase):
    """ListingResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ListingResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = allegro_api.models.listing_response.ListingResponse()  # noqa: E501
        if include_optional :
            return ListingResponse(
                items = allegro_api.models.listing_response_offers.ListingResponseOffers(
                    promoted = [
                        allegro_api.models.listing_offer.ListingOffer(
                            id = '2865624934', 
                            name = 'Buty damskie adidas', 
                            seller = allegro_api.models.offer_seller.OfferSeller(
                                id = '41846511', 
                                company = True, 
                                super_seller = True, ), 
                            promotion = allegro_api.models.offer_promotion.OfferPromotion(
                                emphasized = True, 
                                bold = True, 
                                highlight = True, ), 
                            delivery = allegro_api.models.offer_delivery.OfferDelivery(
                                available_for_free = True, 
                                lowest_price = allegro_api.models.offer_lowest_price.OfferLowestPrice(
                                    amount = '123.45', 
                                    currency = 'PLN', ), ), 
                            images = [
                                allegro_api.models.offer_images.OfferImages(
                                    url = 'https://a.allegroimg.com/original/0129e7/f15ce8924166850eec3fb82bcd5s/BUTY-ADIDAS-DAMSKIE', )
                                ], 
                            selling_mode = allegro_api.models.offer_selling_mode.OfferSellingMode(
                                format = 'BUY_NOW', 
                                price = allegro_api.models.offer_price.OfferPrice(
                                    amount = '123.45', 
                                    currency = 'PLN', ), 
                                fixed_price = allegro_api.models.offer_fixed_price.OfferFixedPrice(
                                    amount = '123.45', 
                                    currency = 'PLN', ), 
                                popularity = 38, 
                                bid_count = 12, ), 
                            stock = allegro_api.models.offer_stock.OfferStock(
                                unit = 'UNIT', 
                                available = 23, ), 
                            vendor = allegro_api.models.offer_vendor.OfferVendor(
                                id = 'CHARYTATYWNI_ALLEGRO', 
                                url = 'http://charytatywni.allegro.pl/oferta-charytatywna-i1234567', ), 
                            category = allegro_api.models.offer_category.OfferCategory(
                                id = '257929', ), 
                            publication = allegro_api.models.offer_publication.OfferPublication(
                                ending_at = '2019-05-15T18:09:41.000Z', ), )
                        ], 
                    regular = [
                        allegro_api.models.listing_offer.ListingOffer(
                            id = '2865624934', 
                            name = 'Buty damskie adidas', )
                        ], ), 
                categories = allegro_api.models.listing_response_categories.ListingResponseCategories(
                    subcategories = [
                        allegro_api.models.listing_category_with_count.ListingCategoryWithCount(
                            id = '257929', 
                            name = 'Sportowe', 
                            count = 123, )
                        ], 
                    path = [
                        allegro_api.models.listing_category.ListingCategory(
                            id = '257929', 
                            name = 'Sportowe', )
                        ], ), 
                filters = [
                    allegro_api.models.listing_response_filters.ListingResponseFilters(
                        id = 'campaign', 
                        type = 'MULTI', 
                        name = 'kampania', 
                        values = [
                            allegro_api.models.listing_response_filters_values.ListingResponseFiltersValues(
                                name = 'raty zero', 
                                value = 'INSTALLMENTS_ZERO', 
                                id_suffix = '.to', 
                                count = 123, 
                                selected = True, )
                            ], 
                        min_value = 0, 
                        max_value = 1000, 
                        unit = 'zł', )
                    ], 
                search_meta = allegro_api.models.listing_response_search_meta.ListingResponseSearchMeta(
                    available_count = 6000, 
                    total_count = 319203, 
                    fallback = True, ), 
                sort = [
                    allegro_api.models.listing_response_sort.ListingResponseSort(
                        value = '-relevance', 
                        name = 'trafność', 
                        order = 'największa', 
                        selected = True, )
                    ]
            )
        else :
            return ListingResponse(
        )

    def testListingResponse(self):
        """Test ListingResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
