# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from allegro_api.configuration import Configuration


class ClassifiedPackageConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'extensions': 'list[ClassifiedExtension]',
        'id': 'str',
        'name': 'str',
        'promotions': 'list[ClassifiedPromotion]',
        'publication': 'ClassifiedPublication',
        'type': 'str'
    }

    attribute_map = {
        'extensions': 'extensions',
        'id': 'id',
        'name': 'name',
        'promotions': 'promotions',
        'publication': 'publication',
        'type': 'type'
    }

    def __init__(self, extensions=None, id=None, name=None, promotions=None, publication=None, type=None, local_vars_configuration=None):  # noqa: E501
        """ClassifiedPackageConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._extensions = None
        self._id = None
        self._name = None
        self._promotions = None
        self._publication = None
        self._type = None
        self.discriminator = None

        if extensions is not None:
            self.extensions = extensions
        self.id = id
        self.name = name
        if promotions is not None:
            self.promotions = promotions
        if publication is not None:
            self.publication = publication
        self.type = type

    @property
    def extensions(self):
        """Gets the extensions of this ClassifiedPackageConfig.  # noqa: E501


        :return: The extensions of this ClassifiedPackageConfig.  # noqa: E501
        :rtype: list[ClassifiedExtension]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this ClassifiedPackageConfig.


        :param extensions: The extensions of this ClassifiedPackageConfig.  # noqa: E501
        :type: list[ClassifiedExtension]
        """

        self._extensions = extensions

    @property
    def id(self):
        """Gets the id of this ClassifiedPackageConfig.  # noqa: E501

        The classifieds package ID.  # noqa: E501

        :return: The id of this ClassifiedPackageConfig.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClassifiedPackageConfig.

        The classifieds package ID.  # noqa: E501

        :param id: The id of this ClassifiedPackageConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ClassifiedPackageConfig.  # noqa: E501

        The classifieds package name.  # noqa: E501

        :return: The name of this ClassifiedPackageConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClassifiedPackageConfig.

        The classifieds package name.  # noqa: E501

        :param name: The name of this ClassifiedPackageConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def promotions(self):
        """Gets the promotions of this ClassifiedPackageConfig.  # noqa: E501

        A list of additional promotions included in the package.  # noqa: E501

        :return: The promotions of this ClassifiedPackageConfig.  # noqa: E501
        :rtype: list[ClassifiedPromotion]
        """
        return self._promotions

    @promotions.setter
    def promotions(self, promotions):
        """Sets the promotions of this ClassifiedPackageConfig.

        A list of additional promotions included in the package.  # noqa: E501

        :param promotions: The promotions of this ClassifiedPackageConfig.  # noqa: E501
        :type: list[ClassifiedPromotion]
        """

        self._promotions = promotions

    @property
    def publication(self):
        """Gets the publication of this ClassifiedPackageConfig.  # noqa: E501


        :return: The publication of this ClassifiedPackageConfig.  # noqa: E501
        :rtype: ClassifiedPublication
        """
        return self._publication

    @publication.setter
    def publication(self, publication):
        """Sets the publication of this ClassifiedPackageConfig.


        :param publication: The publication of this ClassifiedPackageConfig.  # noqa: E501
        :type: ClassifiedPublication
        """

        self._publication = publication

    @property
    def type(self):
        """Gets the type of this ClassifiedPackageConfig.  # noqa: E501


        :return: The type of this ClassifiedPackageConfig.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClassifiedPackageConfig.


        :param type: The type of this ClassifiedPackageConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["BASE", "EXTRA"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassifiedPackageConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClassifiedPackageConfig):
            return True

        return self.to_dict() != other.to_dict()
