# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from allegro_api.configuration import Configuration


class ListingResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'items': 'ListingResponseOffers',
        'categories': 'ListingResponseCategories',
        'filters': 'list[ListingResponseFilters]',
        'search_meta': 'ListingResponseSearchMeta',
        'sort': 'list[ListingResponseSort]'
    }

    attribute_map = {
        'items': 'items',
        'categories': 'categories',
        'filters': 'filters',
        'search_meta': 'searchMeta',
        'sort': 'sort'
    }

    def __init__(self, items=None, categories=None, filters=None, search_meta=None, sort=None, local_vars_configuration=None):  # noqa: E501
        """ListingResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._items = None
        self._categories = None
        self._filters = None
        self._search_meta = None
        self._sort = None
        self.discriminator = None

        if items is not None:
            self.items = items
        if categories is not None:
            self.categories = categories
        if filters is not None:
            self.filters = filters
        if search_meta is not None:
            self.search_meta = search_meta
        if sort is not None:
            self.sort = sort

    @property
    def items(self):
        """Gets the items of this ListingResponse.  # noqa: E501


        :return: The items of this ListingResponse.  # noqa: E501
        :rtype: ListingResponseOffers
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ListingResponse.


        :param items: The items of this ListingResponse.  # noqa: E501
        :type: ListingResponseOffers
        """

        self._items = items

    @property
    def categories(self):
        """Gets the categories of this ListingResponse.  # noqa: E501


        :return: The categories of this ListingResponse.  # noqa: E501
        :rtype: ListingResponseCategories
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ListingResponse.


        :param categories: The categories of this ListingResponse.  # noqa: E501
        :type: ListingResponseCategories
        """

        self._categories = categories

    @property
    def filters(self):
        """Gets the filters of this ListingResponse.  # noqa: E501

        An array of filters with counters available for given search. This can be used to refine the search results.  # noqa: E501

        :return: The filters of this ListingResponse.  # noqa: E501
        :rtype: list[ListingResponseFilters]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListingResponse.

        An array of filters with counters available for given search. This can be used to refine the search results.  # noqa: E501

        :param filters: The filters of this ListingResponse.  # noqa: E501
        :type: list[ListingResponseFilters]
        """

        self._filters = filters

    @property
    def search_meta(self):
        """Gets the search_meta of this ListingResponse.  # noqa: E501


        :return: The search_meta of this ListingResponse.  # noqa: E501
        :rtype: ListingResponseSearchMeta
        """
        return self._search_meta

    @search_meta.setter
    def search_meta(self, search_meta):
        """Sets the search_meta of this ListingResponse.


        :param search_meta: The search_meta of this ListingResponse.  # noqa: E501
        :type: ListingResponseSearchMeta
        """

        self._search_meta = search_meta

    @property
    def sort(self):
        """Gets the sort of this ListingResponse.  # noqa: E501

        Available sorting options.  # noqa: E501

        :return: The sort of this ListingResponse.  # noqa: E501
        :rtype: list[ListingResponseSort]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ListingResponse.

        Available sorting options.  # noqa: E501

        :param sort: The sort of this ListingResponse.  # noqa: E501
        :type: list[ListingResponseSort]
        """

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListingResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListingResponse):
            return True

        return self.to_dict() != other.to_dict()
