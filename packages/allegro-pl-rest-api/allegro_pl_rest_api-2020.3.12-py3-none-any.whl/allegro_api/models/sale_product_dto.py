# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from allegro_api.configuration import Configuration


class SaleProductDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'category': 'Category',
        'eans': 'list[str]',
        'images': 'list[ImageUrl]',
        'parameters': 'list[ProductParameter]',
        'offer_requirements': 'OfferRequirements',
        'compatibility_list': 'SaleProductCompatibilityList',
        'tecdoc_specification': 'TecdocSpecification',
        'description': 'StandardizedDescription'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'category': 'category',
        'eans': 'eans',
        'images': 'images',
        'parameters': 'parameters',
        'offer_requirements': 'offerRequirements',
        'compatibility_list': 'compatibilityList',
        'tecdoc_specification': 'tecdocSpecification',
        'description': 'description'
    }

    def __init__(self, id=None, name=None, category=None, eans=None, images=None, parameters=None, offer_requirements=None, compatibility_list=None, tecdoc_specification=None, description=None, local_vars_configuration=None):  # noqa: E501
        """SaleProductDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._category = None
        self._eans = None
        self._images = None
        self._parameters = None
        self._offer_requirements = None
        self._compatibility_list = None
        self._tecdoc_specification = None
        self._description = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.category = category
        if eans is not None:
            self.eans = eans
        if images is not None:
            self.images = images
        if parameters is not None:
            self.parameters = parameters
        if offer_requirements is not None:
            self.offer_requirements = offer_requirements
        if compatibility_list is not None:
            self.compatibility_list = compatibility_list
        if tecdoc_specification is not None:
            self.tecdoc_specification = tecdoc_specification
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this SaleProductDto.  # noqa: E501

        Product id.  # noqa: E501

        :return: The id of this SaleProductDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SaleProductDto.

        Product id.  # noqa: E501

        :param id: The id of this SaleProductDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this SaleProductDto.  # noqa: E501

        Product name.  # noqa: E501

        :return: The name of this SaleProductDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SaleProductDto.

        Product name.  # noqa: E501

        :param name: The name of this SaleProductDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def category(self):
        """Gets the category of this SaleProductDto.  # noqa: E501


        :return: The category of this SaleProductDto.  # noqa: E501
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SaleProductDto.


        :param category: The category of this SaleProductDto.  # noqa: E501
        :type: Category
        """
        if self.local_vars_configuration.client_side_validation and category is None:  # noqa: E501
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def eans(self):
        """Gets the eans of this SaleProductDto.  # noqa: E501

        A list of codes that identify this product. Currently this can include EAN, ISBN, and UPC identifier types.  # noqa: E501

        :return: The eans of this SaleProductDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._eans

    @eans.setter
    def eans(self, eans):
        """Sets the eans of this SaleProductDto.

        A list of codes that identify this product. Currently this can include EAN, ISBN, and UPC identifier types.  # noqa: E501

        :param eans: The eans of this SaleProductDto.  # noqa: E501
        :type: list[str]
        """

        self._eans = eans

    @property
    def images(self):
        """Gets the images of this SaleProductDto.  # noqa: E501

        List of product images.  # noqa: E501

        :return: The images of this SaleProductDto.  # noqa: E501
        :rtype: list[ImageUrl]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this SaleProductDto.

        List of product images.  # noqa: E501

        :param images: The images of this SaleProductDto.  # noqa: E501
        :type: list[ImageUrl]
        """

        self._images = images

    @property
    def parameters(self):
        """Gets the parameters of this SaleProductDto.  # noqa: E501

        List of product parameters.  # noqa: E501

        :return: The parameters of this SaleProductDto.  # noqa: E501
        :rtype: list[ProductParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this SaleProductDto.

        List of product parameters.  # noqa: E501

        :param parameters: The parameters of this SaleProductDto.  # noqa: E501
        :type: list[ProductParameter]
        """

        self._parameters = parameters

    @property
    def offer_requirements(self):
        """Gets the offer_requirements of this SaleProductDto.  # noqa: E501


        :return: The offer_requirements of this SaleProductDto.  # noqa: E501
        :rtype: OfferRequirements
        """
        return self._offer_requirements

    @offer_requirements.setter
    def offer_requirements(self, offer_requirements):
        """Sets the offer_requirements of this SaleProductDto.


        :param offer_requirements: The offer_requirements of this SaleProductDto.  # noqa: E501
        :type: OfferRequirements
        """

        self._offer_requirements = offer_requirements

    @property
    def compatibility_list(self):
        """Gets the compatibility_list of this SaleProductDto.  # noqa: E501


        :return: The compatibility_list of this SaleProductDto.  # noqa: E501
        :rtype: SaleProductCompatibilityList
        """
        return self._compatibility_list

    @compatibility_list.setter
    def compatibility_list(self, compatibility_list):
        """Sets the compatibility_list of this SaleProductDto.


        :param compatibility_list: The compatibility_list of this SaleProductDto.  # noqa: E501
        :type: SaleProductCompatibilityList
        """

        self._compatibility_list = compatibility_list

    @property
    def tecdoc_specification(self):
        """Gets the tecdoc_specification of this SaleProductDto.  # noqa: E501


        :return: The tecdoc_specification of this SaleProductDto.  # noqa: E501
        :rtype: TecdocSpecification
        """
        return self._tecdoc_specification

    @tecdoc_specification.setter
    def tecdoc_specification(self, tecdoc_specification):
        """Sets the tecdoc_specification of this SaleProductDto.


        :param tecdoc_specification: The tecdoc_specification of this SaleProductDto.  # noqa: E501
        :type: TecdocSpecification
        """

        self._tecdoc_specification = tecdoc_specification

    @property
    def description(self):
        """Gets the description of this SaleProductDto.  # noqa: E501


        :return: The description of this SaleProductDto.  # noqa: E501
        :rtype: StandardizedDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SaleProductDto.


        :param description: The description of this SaleProductDto.  # noqa: E501
        :type: StandardizedDescription
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaleProductDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SaleProductDto):
            return True

        return self.to_dict() != other.to_dict()
