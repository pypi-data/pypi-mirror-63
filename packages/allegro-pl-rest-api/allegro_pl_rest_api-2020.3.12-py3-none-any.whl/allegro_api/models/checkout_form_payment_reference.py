# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from allegro_api.configuration import Configuration


class CheckoutFormPaymentReference(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'type': 'CheckoutFormPaymentType',
        'provider': 'CheckoutFormPaymentProvider',
        'finished_at': 'datetime',
        'paid_amount': 'Price'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'provider': 'provider',
        'finished_at': 'finishedAt',
        'paid_amount': 'paidAmount'
    }

    def __init__(self, id=None, type=None, provider=None, finished_at=None, paid_amount=None, local_vars_configuration=None):  # noqa: E501
        """CheckoutFormPaymentReference - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type = None
        self._provider = None
        self._finished_at = None
        self._paid_amount = None
        self.discriminator = None

        self.id = id
        self.type = type
        if provider is not None:
            self.provider = provider
        if finished_at is not None:
            self.finished_at = finished_at
        if paid_amount is not None:
            self.paid_amount = paid_amount

    @property
    def id(self):
        """Gets the id of this CheckoutFormPaymentReference.  # noqa: E501

        Payment id  # noqa: E501

        :return: The id of this CheckoutFormPaymentReference.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CheckoutFormPaymentReference.

        Payment id  # noqa: E501

        :param id: The id of this CheckoutFormPaymentReference.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this CheckoutFormPaymentReference.  # noqa: E501


        :return: The type of this CheckoutFormPaymentReference.  # noqa: E501
        :rtype: CheckoutFormPaymentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CheckoutFormPaymentReference.


        :param type: The type of this CheckoutFormPaymentReference.  # noqa: E501
        :type: CheckoutFormPaymentType
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def provider(self):
        """Gets the provider of this CheckoutFormPaymentReference.  # noqa: E501


        :return: The provider of this CheckoutFormPaymentReference.  # noqa: E501
        :rtype: CheckoutFormPaymentProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CheckoutFormPaymentReference.


        :param provider: The provider of this CheckoutFormPaymentReference.  # noqa: E501
        :type: CheckoutFormPaymentProvider
        """

        self._provider = provider

    @property
    def finished_at(self):
        """Gets the finished_at of this CheckoutFormPaymentReference.  # noqa: E501

        Date when the event occurred  # noqa: E501

        :return: The finished_at of this CheckoutFormPaymentReference.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this CheckoutFormPaymentReference.

        Date when the event occurred  # noqa: E501

        :param finished_at: The finished_at of this CheckoutFormPaymentReference.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def paid_amount(self):
        """Gets the paid_amount of this CheckoutFormPaymentReference.  # noqa: E501


        :return: The paid_amount of this CheckoutFormPaymentReference.  # noqa: E501
        :rtype: Price
        """
        return self._paid_amount

    @paid_amount.setter
    def paid_amount(self, paid_amount):
        """Sets the paid_amount of this CheckoutFormPaymentReference.


        :param paid_amount: The paid_amount of this CheckoutFormPaymentReference.  # noqa: E501
        :type: Price
        """

        self._paid_amount = paid_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckoutFormPaymentReference):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CheckoutFormPaymentReference):
            return True

        return self.to_dict() != other.to_dict()
