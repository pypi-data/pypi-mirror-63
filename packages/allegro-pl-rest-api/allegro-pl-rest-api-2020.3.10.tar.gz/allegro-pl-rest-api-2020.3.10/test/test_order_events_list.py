# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.10
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import allegro_api
from allegro_api.models.order_events_list import OrderEventsList  # noqa: E501
from allegro_api.rest import ApiException

class TestOrderEventsList(unittest.TestCase):
    """OrderEventsList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test OrderEventsList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = allegro_api.models.order_events_list.OrderEventsList()  # noqa: E501
        if include_optional :
            return OrderEventsList(
                events = [
                    allegro_api.models.order_event.OrderEvent(
                        id = '0', 
                        order = allegro_api.models.order_event_data.OrderEventData(
                            seller = allegro_api.models.seller_reference.SellerReference(
                                id = '437848322', ), 
                            buyer = allegro_api.models.buyer_reference.BuyerReference(
                                id = '23123123', 
                                email = 'user-email@allegro.pl', 
                                login = 'User_Login', 
                                guest = False, ), 
                            line_items = [
                                allegro_api.models.order_line_item.OrderLineItem(
                                    id = '62ae358b-8f65-4fc4-9c77-bedf604a2e2b', 
                                    offer = allegro_api.models.offer_reference.OfferReference(
                                        id = '3213213', 
                                        name = 'Name of purchased offer', 
                                        external = allegro_api.models.external_id.ExternalId(
                                            id = 'AH-129834', ), ), 
                                    quantity = 1, 
                                    original_price = allegro_api.models.price.Price(
                                        amount = '123.45', 
                                        currency = 'PLN', ), 
                                    price = allegro_api.models.price.Price(
                                        amount = '123.45', 
                                        currency = 'PLN', ), 
                                    bought_at = '2018-01-01T10:23:43.123Z', )
                                ], 
                            checkout_form = allegro_api.models.checkout_form_reference.CheckoutFormReference(
                                id = '88ae369b-8f65-4fc4-9c77-bedf604a2e2b', ), ), 
                        type = 'READY_FOR_PROCESSING', 
                        occurred_at = '2018-10-12T10:12:32.321Z', )
                    ]
            )
        else :
            return OrderEventsList(
                events = [
                    allegro_api.models.order_event.OrderEvent(
                        id = '0', 
                        order = allegro_api.models.order_event_data.OrderEventData(
                            seller = allegro_api.models.seller_reference.SellerReference(
                                id = '437848322', ), 
                            buyer = allegro_api.models.buyer_reference.BuyerReference(
                                id = '23123123', 
                                email = 'user-email@allegro.pl', 
                                login = 'User_Login', 
                                guest = False, ), 
                            line_items = [
                                allegro_api.models.order_line_item.OrderLineItem(
                                    id = '62ae358b-8f65-4fc4-9c77-bedf604a2e2b', 
                                    offer = allegro_api.models.offer_reference.OfferReference(
                                        id = '3213213', 
                                        name = 'Name of purchased offer', 
                                        external = allegro_api.models.external_id.ExternalId(
                                            id = 'AH-129834', ), ), 
                                    quantity = 1, 
                                    original_price = allegro_api.models.price.Price(
                                        amount = '123.45', 
                                        currency = 'PLN', ), 
                                    price = allegro_api.models.price.Price(
                                        amount = '123.45', 
                                        currency = 'PLN', ), 
                                    bought_at = '2018-01-01T10:23:43.123Z', )
                                ], 
                            checkout_form = allegro_api.models.checkout_form_reference.CheckoutFormReference(
                                id = '88ae369b-8f65-4fc4-9c77-bedf604a2e2b', ), ), 
                        type = 'READY_FOR_PROCESSING', 
                        occurred_at = '2018-10-12T10:12:32.321Z', )
                    ],
        )

    def testOrderEventsList(self):
        """Test OrderEventsList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
