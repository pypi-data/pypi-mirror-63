# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.10
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import allegro_api
from allegro_api.models.get_badge_campaigns_list import GetBadgeCampaignsList  # noqa: E501
from allegro_api.rest import ApiException

class TestGetBadgeCampaignsList(unittest.TestCase):
    """GetBadgeCampaignsList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test GetBadgeCampaignsList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = allegro_api.models.get_badge_campaigns_list.GetBadgeCampaignsList()  # noqa: E501
        if include_optional :
            return GetBadgeCampaignsList(
                badge_campaigns = [
                    allegro_api.models.badge_campaign.BadgeCampaign(
                        id = 'BARGAIN', 
                        name = 'Strefa Okazji', 
                        type = 'DISCOUNT', 
                        eligibility = allegro_api.models.user_campaign_eligibility.UserCampaignEligibility(
                            eligible = True, 
                            refusal_reasons = [
                                allegro_api.models.campaign_refusal_reason.CampaignRefusalReason(
                                    code = '0', 
                                    messages = [
                                        allegro_api.models.refusal_message.RefusalMessage(
                                            text = '0', 
                                            link = '0', )
                                        ], )
                                ], ), 
                        application = {"type":"UNTIL","to":"2012-12-03T10:15:30Z"}, 
                        visibility = {"type":"UNTIL","to":"2012-12-03T10:15:30Z"}, 
                        publication = {"type":"UNTIL","to":"2012-12-03T10:15:30Z"}, )
                    ]
            )
        else :
            return GetBadgeCampaignsList(
                badge_campaigns = [
                    allegro_api.models.badge_campaign.BadgeCampaign(
                        id = 'BARGAIN', 
                        name = 'Strefa Okazji', 
                        type = 'DISCOUNT', 
                        eligibility = allegro_api.models.user_campaign_eligibility.UserCampaignEligibility(
                            eligible = True, 
                            refusal_reasons = [
                                allegro_api.models.campaign_refusal_reason.CampaignRefusalReason(
                                    code = '0', 
                                    messages = [
                                        allegro_api.models.refusal_message.RefusalMessage(
                                            text = '0', 
                                            link = '0', )
                                        ], )
                                ], ), 
                        application = {"type":"UNTIL","to":"2012-12-03T10:15:30Z"}, 
                        visibility = {"type":"UNTIL","to":"2012-12-03T10:15:30Z"}, 
                        publication = {"type":"UNTIL","to":"2012-12-03T10:15:30Z"}, )
                    ],
        )

    def testGetBadgeCampaignsList(self):
        """Test GetBadgeCampaignsList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
