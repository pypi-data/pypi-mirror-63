# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from allegro_api.configuration import Configuration


class GetSaleProductsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'products': 'list[SaleProductResponseDto]',
        'categories': 'list[SaleProductResponseCategoriesDto]',
        'filters': 'list[ListingResponseFilters]',
        'next_page': 'GetSaleProductsResponseNextPage'
    }

    attribute_map = {
        'products': 'products',
        'categories': 'categories',
        'filters': 'filters',
        'next_page': 'nextPage'
    }

    def __init__(self, products=None, categories=None, filters=None, next_page=None, local_vars_configuration=None):  # noqa: E501
        """GetSaleProductsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._products = None
        self._categories = None
        self._filters = None
        self._next_page = None
        self.discriminator = None

        self.products = products
        if categories is not None:
            self.categories = categories
        if filters is not None:
            self.filters = filters
        if next_page is not None:
            self.next_page = next_page

    @property
    def products(self):
        """Gets the products of this GetSaleProductsResponse.  # noqa: E501


        :return: The products of this GetSaleProductsResponse.  # noqa: E501
        :rtype: list[SaleProductResponseDto]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this GetSaleProductsResponse.


        :param products: The products of this GetSaleProductsResponse.  # noqa: E501
        :type: list[SaleProductResponseDto]
        """
        if self.local_vars_configuration.client_side_validation and products is None:  # noqa: E501
            raise ValueError("Invalid value for `products`, must not be `None`")  # noqa: E501

        self._products = products

    @property
    def categories(self):
        """Gets the categories of this GetSaleProductsResponse.  # noqa: E501


        :return: The categories of this GetSaleProductsResponse.  # noqa: E501
        :rtype: list[SaleProductResponseCategoriesDto]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this GetSaleProductsResponse.


        :param categories: The categories of this GetSaleProductsResponse.  # noqa: E501
        :type: list[SaleProductResponseCategoriesDto]
        """

        self._categories = categories

    @property
    def filters(self):
        """Gets the filters of this GetSaleProductsResponse.  # noqa: E501


        :return: The filters of this GetSaleProductsResponse.  # noqa: E501
        :rtype: list[ListingResponseFilters]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this GetSaleProductsResponse.


        :param filters: The filters of this GetSaleProductsResponse.  # noqa: E501
        :type: list[ListingResponseFilters]
        """

        self._filters = filters

    @property
    def next_page(self):
        """Gets the next_page of this GetSaleProductsResponse.  # noqa: E501


        :return: The next_page of this GetSaleProductsResponse.  # noqa: E501
        :rtype: GetSaleProductsResponseNextPage
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """Sets the next_page of this GetSaleProductsResponse.


        :param next_page: The next_page of this GetSaleProductsResponse.  # noqa: E501
        :type: GetSaleProductsResponseNextPage
        """

        self._next_page = next_page

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSaleProductsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetSaleProductsResponse):
            return True

        return self.to_dict() != other.to_dict()
