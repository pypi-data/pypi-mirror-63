# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from allegro_api.configuration import Configuration


class OfferQuoteDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enabled': 'bool',
        'fee': 'Fee',
        'name': 'str',
        'next_date': 'datetime',
        'offer': 'OfferId',
        'type': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'fee': 'fee',
        'name': 'name',
        'next_date': 'nextDate',
        'offer': 'offer',
        'type': 'type'
    }

    def __init__(self, enabled=None, fee=None, name=None, next_date=None, offer=None, type=None, local_vars_configuration=None):  # noqa: E501
        """OfferQuoteDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enabled = None
        self._fee = None
        self._name = None
        self._next_date = None
        self._offer = None
        self._type = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if fee is not None:
            self.fee = fee
        if name is not None:
            self.name = name
        if next_date is not None:
            self.next_date = next_date
        if offer is not None:
            self.offer = offer
        if type is not None:
            self.type = type

    @property
    def enabled(self):
        """Gets the enabled of this OfferQuoteDto.  # noqa: E501


        :return: The enabled of this OfferQuoteDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this OfferQuoteDto.


        :param enabled: The enabled of this OfferQuoteDto.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def fee(self):
        """Gets the fee of this OfferQuoteDto.  # noqa: E501


        :return: The fee of this OfferQuoteDto.  # noqa: E501
        :rtype: Fee
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this OfferQuoteDto.


        :param fee: The fee of this OfferQuoteDto.  # noqa: E501
        :type: Fee
        """

        self._fee = fee

    @property
    def name(self):
        """Gets the name of this OfferQuoteDto.  # noqa: E501


        :return: The name of this OfferQuoteDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OfferQuoteDto.


        :param name: The name of this OfferQuoteDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def next_date(self):
        """Gets the next_date of this OfferQuoteDto.  # noqa: E501


        :return: The next_date of this OfferQuoteDto.  # noqa: E501
        :rtype: datetime
        """
        return self._next_date

    @next_date.setter
    def next_date(self, next_date):
        """Sets the next_date of this OfferQuoteDto.


        :param next_date: The next_date of this OfferQuoteDto.  # noqa: E501
        :type: datetime
        """

        self._next_date = next_date

    @property
    def offer(self):
        """Gets the offer of this OfferQuoteDto.  # noqa: E501


        :return: The offer of this OfferQuoteDto.  # noqa: E501
        :rtype: OfferId
        """
        return self._offer

    @offer.setter
    def offer(self, offer):
        """Sets the offer of this OfferQuoteDto.


        :param offer: The offer of this OfferQuoteDto.  # noqa: E501
        :type: OfferId
        """

        self._offer = offer

    @property
    def type(self):
        """Gets the type of this OfferQuoteDto.  # noqa: E501


        :return: The type of this OfferQuoteDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OfferQuoteDto.


        :param type: The type of this OfferQuoteDto.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OfferQuoteDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OfferQuoteDto):
            return True

        return self.to_dict() != other.to_dict()
