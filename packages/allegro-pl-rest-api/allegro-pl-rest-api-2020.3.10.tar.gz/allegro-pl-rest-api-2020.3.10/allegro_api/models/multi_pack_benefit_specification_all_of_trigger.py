# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from allegro_api.configuration import Configuration


class MultiPackBenefitSpecificationAllOfTrigger(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'for_each_quantity': 'float',
        'discounted_number': 'float'
    }

    attribute_map = {
        'for_each_quantity': 'forEachQuantity',
        'discounted_number': 'discountedNumber'
    }

    def __init__(self, for_each_quantity=None, discounted_number=None, local_vars_configuration=None):  # noqa: E501
        """MultiPackBenefitSpecificationAllOfTrigger - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._for_each_quantity = None
        self._discounted_number = None
        self.discriminator = None

        self.for_each_quantity = for_each_quantity
        self.discounted_number = discounted_number

    @property
    def for_each_quantity(self):
        """Gets the for_each_quantity of this MultiPackBenefitSpecificationAllOfTrigger.  # noqa: E501

        For every pack of this quantity new rebate will be given.  # noqa: E501

        :return: The for_each_quantity of this MultiPackBenefitSpecificationAllOfTrigger.  # noqa: E501
        :rtype: float
        """
        return self._for_each_quantity

    @for_each_quantity.setter
    def for_each_quantity(self, for_each_quantity):
        """Sets the for_each_quantity of this MultiPackBenefitSpecificationAllOfTrigger.

        For every pack of this quantity new rebate will be given.  # noqa: E501

        :param for_each_quantity: The for_each_quantity of this MultiPackBenefitSpecificationAllOfTrigger.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and for_each_quantity is None:  # noqa: E501
            raise ValueError("Invalid value for `for_each_quantity`, must not be `None`")  # noqa: E501

        self._for_each_quantity = for_each_quantity

    @property
    def discounted_number(self):
        """Gets the discounted_number of this MultiPackBenefitSpecificationAllOfTrigger.  # noqa: E501

        Describes how many offers in pack should be discounted by discount percentage.  # noqa: E501

        :return: The discounted_number of this MultiPackBenefitSpecificationAllOfTrigger.  # noqa: E501
        :rtype: float
        """
        return self._discounted_number

    @discounted_number.setter
    def discounted_number(self, discounted_number):
        """Sets the discounted_number of this MultiPackBenefitSpecificationAllOfTrigger.

        Describes how many offers in pack should be discounted by discount percentage.  # noqa: E501

        :param discounted_number: The discounted_number of this MultiPackBenefitSpecificationAllOfTrigger.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and discounted_number is None:  # noqa: E501
            raise ValueError("Invalid value for `discounted_number`, must not be `None`")  # noqa: E501

        self._discounted_number = discounted_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultiPackBenefitSpecificationAllOfTrigger):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MultiPackBenefitSpecificationAllOfTrigger):
            return True

        return self.to_dict() != other.to_dict()
