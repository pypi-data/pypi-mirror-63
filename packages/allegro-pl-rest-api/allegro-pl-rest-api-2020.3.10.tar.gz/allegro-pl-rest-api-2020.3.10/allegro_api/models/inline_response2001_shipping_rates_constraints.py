# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from allegro_api.configuration import Configuration


class InlineResponse2001ShippingRatesConstraints(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allowed': 'bool',
        'max_quantity_per_package': 'InlineResponse2001ShippingRatesConstraintsMaxQuantityPerPackage',
        'first_item_rate': 'InlineResponse2001ShippingRatesConstraintsFirstItemRate',
        'next_item_rate': 'InlineResponse2001ShippingRatesConstraintsNextItemRate',
        'shipping_time': 'InlineResponse2001ShippingRatesConstraintsShippingTime'
    }

    attribute_map = {
        'allowed': 'allowed',
        'max_quantity_per_package': 'maxQuantityPerPackage',
        'first_item_rate': 'firstItemRate',
        'next_item_rate': 'nextItemRate',
        'shipping_time': 'shippingTime'
    }

    def __init__(self, allowed=None, max_quantity_per_package=None, first_item_rate=None, next_item_rate=None, shipping_time=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse2001ShippingRatesConstraints - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allowed = None
        self._max_quantity_per_package = None
        self._first_item_rate = None
        self._next_item_rate = None
        self._shipping_time = None
        self.discriminator = None

        if allowed is not None:
            self.allowed = allowed
        if max_quantity_per_package is not None:
            self.max_quantity_per_package = max_quantity_per_package
        if first_item_rate is not None:
            self.first_item_rate = first_item_rate
        if next_item_rate is not None:
            self.next_item_rate = next_item_rate
        if shipping_time is not None:
            self.shipping_time = shipping_time

    @property
    def allowed(self):
        """Gets the allowed of this InlineResponse2001ShippingRatesConstraints.  # noqa: E501

        Indicates whether delivery method can be used when adding or modifying shipping rates.  # noqa: E501

        :return: The allowed of this InlineResponse2001ShippingRatesConstraints.  # noqa: E501
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this InlineResponse2001ShippingRatesConstraints.

        Indicates whether delivery method can be used when adding or modifying shipping rates.  # noqa: E501

        :param allowed: The allowed of this InlineResponse2001ShippingRatesConstraints.  # noqa: E501
        :type: bool
        """

        self._allowed = allowed

    @property
    def max_quantity_per_package(self):
        """Gets the max_quantity_per_package of this InlineResponse2001ShippingRatesConstraints.  # noqa: E501


        :return: The max_quantity_per_package of this InlineResponse2001ShippingRatesConstraints.  # noqa: E501
        :rtype: InlineResponse2001ShippingRatesConstraintsMaxQuantityPerPackage
        """
        return self._max_quantity_per_package

    @max_quantity_per_package.setter
    def max_quantity_per_package(self, max_quantity_per_package):
        """Sets the max_quantity_per_package of this InlineResponse2001ShippingRatesConstraints.


        :param max_quantity_per_package: The max_quantity_per_package of this InlineResponse2001ShippingRatesConstraints.  # noqa: E501
        :type: InlineResponse2001ShippingRatesConstraintsMaxQuantityPerPackage
        """

        self._max_quantity_per_package = max_quantity_per_package

    @property
    def first_item_rate(self):
        """Gets the first_item_rate of this InlineResponse2001ShippingRatesConstraints.  # noqa: E501


        :return: The first_item_rate of this InlineResponse2001ShippingRatesConstraints.  # noqa: E501
        :rtype: InlineResponse2001ShippingRatesConstraintsFirstItemRate
        """
        return self._first_item_rate

    @first_item_rate.setter
    def first_item_rate(self, first_item_rate):
        """Sets the first_item_rate of this InlineResponse2001ShippingRatesConstraints.


        :param first_item_rate: The first_item_rate of this InlineResponse2001ShippingRatesConstraints.  # noqa: E501
        :type: InlineResponse2001ShippingRatesConstraintsFirstItemRate
        """

        self._first_item_rate = first_item_rate

    @property
    def next_item_rate(self):
        """Gets the next_item_rate of this InlineResponse2001ShippingRatesConstraints.  # noqa: E501


        :return: The next_item_rate of this InlineResponse2001ShippingRatesConstraints.  # noqa: E501
        :rtype: InlineResponse2001ShippingRatesConstraintsNextItemRate
        """
        return self._next_item_rate

    @next_item_rate.setter
    def next_item_rate(self, next_item_rate):
        """Sets the next_item_rate of this InlineResponse2001ShippingRatesConstraints.


        :param next_item_rate: The next_item_rate of this InlineResponse2001ShippingRatesConstraints.  # noqa: E501
        :type: InlineResponse2001ShippingRatesConstraintsNextItemRate
        """

        self._next_item_rate = next_item_rate

    @property
    def shipping_time(self):
        """Gets the shipping_time of this InlineResponse2001ShippingRatesConstraints.  # noqa: E501


        :return: The shipping_time of this InlineResponse2001ShippingRatesConstraints.  # noqa: E501
        :rtype: InlineResponse2001ShippingRatesConstraintsShippingTime
        """
        return self._shipping_time

    @shipping_time.setter
    def shipping_time(self, shipping_time):
        """Sets the shipping_time of this InlineResponse2001ShippingRatesConstraints.


        :param shipping_time: The shipping_time of this InlineResponse2001ShippingRatesConstraints.  # noqa: E501
        :type: InlineResponse2001ShippingRatesConstraintsShippingTime
        """

        self._shipping_time = shipping_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001ShippingRatesConstraints):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2001ShippingRatesConstraints):
            return True

        return self.to_dict() != other.to_dict()
