# coding: utf-8

"""
    Allegro REST API

    https://developer.allegro.pl/about  # noqa: E501

    The version of the OpenAPI document: 2020.03.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from allegro_api.configuration import Configuration


class InlineResponse2001ShippingRatesConstraintsShippingTime(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default': 'InlineResponse2001ShippingRatesConstraintsShippingTimeDefault',
        'customizable': 'bool'
    }

    attribute_map = {
        'default': 'default',
        'customizable': 'customizable'
    }

    def __init__(self, default=None, customizable=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse2001ShippingRatesConstraintsShippingTime - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._default = None
        self._customizable = None
        self.discriminator = None

        if default is not None:
            self.default = default
        if customizable is not None:
            self.customizable = customizable

    @property
    def default(self):
        """Gets the default of this InlineResponse2001ShippingRatesConstraintsShippingTime.  # noqa: E501


        :return: The default of this InlineResponse2001ShippingRatesConstraintsShippingTime.  # noqa: E501
        :rtype: InlineResponse2001ShippingRatesConstraintsShippingTimeDefault
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this InlineResponse2001ShippingRatesConstraintsShippingTime.


        :param default: The default of this InlineResponse2001ShippingRatesConstraintsShippingTime.  # noqa: E501
        :type: InlineResponse2001ShippingRatesConstraintsShippingTimeDefault
        """

        self._default = default

    @property
    def customizable(self):
        """Gets the customizable of this InlineResponse2001ShippingRatesConstraintsShippingTime.  # noqa: E501

        Indicates if custom shipping time can be set when adding or modifying shipping rates.  # noqa: E501

        :return: The customizable of this InlineResponse2001ShippingRatesConstraintsShippingTime.  # noqa: E501
        :rtype: bool
        """
        return self._customizable

    @customizable.setter
    def customizable(self, customizable):
        """Sets the customizable of this InlineResponse2001ShippingRatesConstraintsShippingTime.

        Indicates if custom shipping time can be set when adding or modifying shipping rates.  # noqa: E501

        :param customizable: The customizable of this InlineResponse2001ShippingRatesConstraintsShippingTime.  # noqa: E501
        :type: bool
        """

        self._customizable = customizable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001ShippingRatesConstraintsShippingTime):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2001ShippingRatesConstraintsShippingTime):
            return True

        return self.to_dict() != other.to_dict()
