# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from wirepas_messaging.wpe import public_pb2 as wirepas__messaging_dot_wpe_dot_public__pb2


class flow_managerStub(object):
  """*
  Flow manager's service definition.

  This is _the_ public interface for WPE and the one to
  be versioned and mantained.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.stop = channel.unary_unary(
        '/wirepas.wpe.flow_manager/stop',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )
    self.status = channel.unary_unary(
        '/wirepas.wpe.flow_manager/status',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )
    self.purge = channel.unary_unary(
        '/wirepas.wpe.flow_manager/purge',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )
    self.configure = channel.stream_unary(
        '/wirepas.wpe.flow_manager/configure',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.ConfigurationData.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )
    self.fetch = channel.unary_unary(
        '/wirepas.wpe.flow_manager/fetch',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.ConfigurationData.FromString,
        )
    self.locate = channel.stream_stream(
        '/wirepas.wpe.flow_manager/locate',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.MeshData.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Node.FromString,
        )
    self.subscribe = channel.unary_unary(
        '/wirepas.wpe.flow_manager/subscribe',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )
    self.unsubscribe = channel.unary_unary(
        '/wirepas.wpe.flow_manager/unsubscribe',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )
    self.observe = channel.unary_stream(
        '/wirepas.wpe.flow_manager/observe',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Node.FromString,
        )


class flow_managerServicer(object):
  """*
  Flow manager's service definition.

  This is _the_ public interface for WPE and the one to
  be versioned and mantained.
  """

  def stop(self, request, context):
    """*
    Requests the service to stop.

    Args:
    Query: with an empty payload.

    Returns:
    Status: information on when the shutdown will happen.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def status(self, request, context):
    """*
    Queries the status of a service - useful to check if a service is available.

    Args:
    Query: with an empty payload.

    Returns:
    Status: provides status and runtime information about the process.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def purge(self, request, context):
    """*
    Wipes in memory storage regarding a given network.

    Args:
    Query: with the target network id.

    Returns:
    Status: request sucess.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def configure(self, request_iterator, context):
    """*
    Receives updates on nodes and areas, storing it in the local memory.

    Note that if a Node or Area is already cached, its configuration will be
    updated.

    Args:
    Stream(ConfigurationData.network): network id.
    Stream(ConfigurationData.nodes): nodes with known location.
    Stream(ConfigurationData.areas): area definition.

    Returns:
    Status: request sucess.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def fetch(self, request, context):
    """*
    Retrieves the configuration for a given network id.

    Args:
    Query.network : network of interest.

    Returns:
    stream(ConfigurationData) : stream of the current configuration.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def locate(self, request_iterator, context):
    """*
    Talks with the core to request a new positioning for the reporter.

    Args:
    Stream(MeshData) : stream of MeshData.

    Returns:
    Stream(Node) : stream of position updates.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def subscribe(self, request, context):
    """*
    Registers to a service queue and obtains an id.

    Args:
    Query.network: network id whose events should be published.

    Returns:
    Status: information on the request.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def unsubscribe(self, request, context):
    """*
    Deregisters from the service queue.

    Args:
    Query.subscriber_id: id provided by the call to subscribe.

    Returns:
    Status: request sucess.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def observe(self, request, context):
    """*
    Obtains location updates flowing out of the service.

    Args:
    Query.subscriber_id: id provided by the call to subscribe.
    Query.network: specify network id if you want to receive the current node configuration.

    Returns:
    Stream(Node): stream of location updates.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_flow_managerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'stop': grpc.unary_unary_rpc_method_handler(
          servicer.stop,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
      'status': grpc.unary_unary_rpc_method_handler(
          servicer.status,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
      'purge': grpc.unary_unary_rpc_method_handler(
          servicer.purge,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
      'configure': grpc.stream_unary_rpc_method_handler(
          servicer.configure,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.ConfigurationData.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
      'fetch': grpc.unary_unary_rpc_method_handler(
          servicer.fetch,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.ConfigurationData.SerializeToString,
      ),
      'locate': grpc.stream_stream_rpc_method_handler(
          servicer.locate,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.MeshData.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Node.SerializeToString,
      ),
      'subscribe': grpc.unary_unary_rpc_method_handler(
          servicer.subscribe,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
      'unsubscribe': grpc.unary_unary_rpc_method_handler(
          servicer.unsubscribe,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
      'observe': grpc.unary_stream_rpc_method_handler(
          servicer.observe,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Node.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'wirepas.wpe.flow_manager', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class log_managerStub(object):
  """*
  Log manager's service definition.

  This is a reference service able to read from one or multiple sources of
  data, such as databases and files.

  You should consider extending this service if you want to build your own
  API wrapper and provide live data into the flow manager.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.stop = channel.unary_unary(
        '/wirepas.wpe.log_manager/stop',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )
    self.status = channel.unary_unary(
        '/wirepas.wpe.log_manager/status',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )
    self.record = channel.stream_unary(
        '/wirepas.wpe.log_manager/record',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Log.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )


class log_managerServicer(object):
  """*
  Log manager's service definition.

  This is a reference service able to read from one or multiple sources of
  data, such as databases and files.

  You should consider extending this service if you want to build your own
  API wrapper and provide live data into the flow manager.
  """

  def stop(self, request, context):
    """*
    Requests the service to stop.

    Args:
    Query: with an empty payload.

    Returns:
    Status: information on when the shutdown will happen.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def status(self, request, context):
    """*
    Queries the status of a service - useful to check if a service is available.

    Args:
    Query: with an empty payload.

    Returns:
    Status: provides status and runtime information about the process.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def record(self, request_iterator, context):
    """*
    Stores messages to the log file (if filepath defined on startup) or to stdout.

    Args:
    Stream(Log): stream of log messages.

    Returns:
    Status: provides status and runtime information about the process.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_log_managerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'stop': grpc.unary_unary_rpc_method_handler(
          servicer.stop,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
      'status': grpc.unary_unary_rpc_method_handler(
          servicer.status,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
      'record': grpc.stream_unary_rpc_method_handler(
          servicer.record,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Log.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'wirepas.wpe.log_manager', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class subscriber_managerStub(object):
  """*
  Subscriber manager service definition.

  This is _the_ public interface for WPE and the one to
  be versioned and maintained.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.stop = channel.unary_unary(
        '/wirepas.wpe.subscriber_manager/stop',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )
    self.status = channel.unary_unary(
        '/wirepas.wpe.subscriber_manager/status',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )
    self.fetch = channel.unary_unary(
        '/wirepas.wpe.subscriber_manager/fetch',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )


class subscriber_managerServicer(object):
  """*
  Subscriber manager service definition.

  This is _the_ public interface for WPE and the one to
  be versioned and maintained.
  """

  def stop(self, request, context):
    """*
    Requests the service to stop

    Args:
    Query: with an empty payload.

    Returns:
    Status: information on when the shutdown will happen.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def status(self, request, context):
    """*
    Queries the status of a service - useful to check if a service is available.

    Args:
    Query: with an empty payload.

    Returns:
    Status: provides status and runtime information about the process.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def fetch(self, request, context):
    """*
    Requests configuration data from the network.

    Args:
    Query: with an empty payload.

    Returns:
    Status: returns operation success.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_subscriber_managerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'stop': grpc.unary_unary_rpc_method_handler(
          servicer.stop,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
      'status': grpc.unary_unary_rpc_method_handler(
          servicer.status,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
      'fetch': grpc.unary_unary_rpc_method_handler(
          servicer.fetch,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'wirepas.wpe.subscriber_manager', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
