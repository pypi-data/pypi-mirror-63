# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import SDKClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError
from . import models


class BingCommerceIngestionConfiguration(Configuration):
    """Configuration for BingCommerceIngestion
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if not base_url:
            base_url = 'https://commerce.bing.com/api/ingestion/v1'

        super(BingCommerceIngestionConfiguration, self).__init__(base_url)

        self.add_user_agent('bingcommerceingestion/{}'.format(VERSION))

        self.credentials = credentials


class BingCommerceIngestion(SDKClient):
    """BingCommerceIngestion

    :ivar config: Configuration for client.
    :vartype config: BingCommerceIngestionConfiguration

    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        self.config = BingCommerceIngestionConfiguration(credentials, base_url)
        super(BingCommerceIngestion, self).__init__(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '1'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)


    def create_index(
            self, tenantid, subscription_id=None, body=None, query_parameters={}, custom_headers=None, raw=False, **operation_config):
        """Create an index.

        Creates a definition of the tenant's index.

        :param tenantid: The ID that uniquely identifies the tenant that the
         index belongs to.
        :type tenantid: str
        :param subscription_id: Bing developer subcription id
        :type subscription_id: str
        :param body: An Index object that describes the index definition to
         add.
        :type body: ~microsoft.bing.commerce.ingestion.models.Index
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: IndexResponse or ClientRawResponse if raw=true
        :rtype: ~microsoft.bing.commerce.ingestion.models.IndexResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.create_index.metadata['url']
        path_format_arguments = {
            'tenantid': self._serialize.url("tenantid", tenantid, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if subscription_id is not None:
            header_parameters['SubscriptionId'] = self._serialize.header("subscription_id", subscription_id, 'str')

        # Construct body
        if body is not None:
            body_content = self._serialize.body(body, 'Index')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('IndexResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_index.metadata = {'url': '/{tenantid}/indexes'}

    def get_all_indexes(
            self, tenantid, subscription_id=None, query_parameters={}, custom_headers=None, raw=False, **operation_config):
        """Get list of index definitions.

        Get list of index definitions that you defined for a tenant.

        :param tenantid: The ID that uniquely identifies the tenant that the
         index belongs to.
        :type tenantid: str
        :param subscription_id: Bing developer subcription id
        :type subscription_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: IndexResponse or ClientRawResponse if raw=true
        :rtype: ~microsoft.bing.commerce.ingestion.models.IndexResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_all_indexes.metadata['url']
        path_format_arguments = {
            'tenantid': self._serialize.url("tenantid", tenantid, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        if subscription_id is not None:
            header_parameters['SubscriptionId'] = self._serialize.header("subscription_id", subscription_id, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('IndexResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_all_indexes.metadata = {'url': '/{tenantid}/indexes'}

    def delete_index(
            self, tenantid, indexid, subscription_id=None, query_parameters={}, custom_headers=None, raw=False, **operation_config):
        """Delete an index.

        Delete an index definition along with all the catalog.

        :param tenantid: The ID that uniquely identifies the tenant that the
         index belongs to.
        :type tenantid: str
        :param indexid: The ID that uniquely identifies the index definition
         to manage.
        :type indexid: str
        :param subscription_id: Bing developer subcription id
        :type subscription_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: IndexResponse or ClientRawResponse if raw=true
        :rtype: ~microsoft.bing.commerce.ingestion.models.IndexResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.delete_index.metadata['url']
        path_format_arguments = {
            'tenantid': self._serialize.url("tenantid", tenantid, 'str'),
            'indexid': self._serialize.url("indexid", indexid, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        if subscription_id is not None:
            header_parameters['SubscriptionId'] = self._serialize.header("subscription_id", subscription_id, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('IndexResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    delete_index.metadata = {'url': '/{tenantid}/indexes/{indexid}'}

    def update_index(
            self, tenantid, indexid, subscription_id=None, body=None, query_parameters={}, custom_headers=None, raw=False, **operation_config):
        """Updates an index with id.

        Update the definition for your index.

        :param tenantid: The ID that uniquely identifies the tenant that the
         index belongs to.
        :type tenantid: str
        :param indexid: The ID that uniquely identifies the index definition
         to manage.
        :type indexid: str
        :param subscription_id: Bing developer subcription id
        :type subscription_id: str
        :param body: The ID that uniquely identifies the index definition to
         manage.
        :type body: ~microsoft.bing.commerce.ingestion.models.Index
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: IndexResponse or ClientRawResponse if raw=true
        :rtype: ~microsoft.bing.commerce.ingestion.models.IndexResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.update_index.metadata['url']
        path_format_arguments = {
            'tenantid': self._serialize.url("tenantid", tenantid, 'str'),
            'indexid': self._serialize.url("indexid", indexid, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if subscription_id is not None:
            header_parameters['SubscriptionId'] = self._serialize.header("subscription_id", subscription_id, 'str')

        # Construct body
        if body is not None:
            body_content = self._serialize.body(body, 'Index')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('IndexResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    update_index.metadata = {'url': '/{tenantid}/indexes/{indexid}'}

    def get_index(
            self, tenantid, indexid, subscription_id=None, query_parameters={}, custom_headers=None, raw=False, **operation_config):
        """Get index definition by id.

        Get a specific index definition for a tenant.

        :param tenantid: The ID that uniquely identifies the tenant that the
         index belongs to.
        :type tenantid: str
        :param indexid: The ID that uniquely identifies the index definition
         to manage.
        :type indexid: str
        :param subscription_id: Bing developer subcription id
        :type subscription_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: IndexResponse or ClientRawResponse if raw=true
        :rtype: ~microsoft.bing.commerce.ingestion.models.IndexResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_index.metadata['url']
        path_format_arguments = {
            'tenantid': self._serialize.url("tenantid", tenantid, 'str'),
            'indexid': self._serialize.url("indexid", indexid, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        if subscription_id is not None:
            header_parameters['SubscriptionId'] = self._serialize.header("subscription_id", subscription_id, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('IndexResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_index.metadata = {'url': '/{tenantid}/indexes/{indexid}'}

    def delete_documents(
            self, tenantid, indexid, subscription_id=None, body=None, query_parameters={}, custom_headers=None, raw=False, **operation_config):
        """Delete documents from your catalog.

        Delete documents from your index's catalog.

        :param tenantid: The ID that uniquely identifies the tenant that the
         index belongs to.
        :type tenantid: str
        :param indexid: The ID that uniquely identifies the index definition
         to manage.
        :type indexid: str
        :param subscription_id: Bing developer subcription id
        :type subscription_id: str
        :param body: The set of document ids to delete.
        :type body:
         ~microsoft.bing.commerce.ingestion.models.RequestsStringSet
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DeleteDocumentsResponse or ClientRawResponse if raw=true
        :rtype:
         ~microsoft.bing.commerce.ingestion.models.DeleteDocumentsResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.delete_documents.metadata['url']
        path_format_arguments = {
            'tenantid': self._serialize.url("tenantid", tenantid, 'str'),
            'indexid': self._serialize.url("indexid", indexid, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if subscription_id is not None:
            header_parameters['SubscriptionId'] = self._serialize.header("subscription_id", subscription_id, 'str')

        # Construct body
        if body is not None:
            body_content = self._serialize.body(body, 'RequestsStringSet')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 206, 400]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DeleteDocumentsResponse', response)
        if response.status_code == 206:
            deserialized = self._deserialize('DeleteDocumentsResponse', response)
        if response.status_code == 400:
            deserialized = self._deserialize('DeleteDocumentsResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    delete_documents.metadata = {'url': '/{tenantid}/indexes/{indexid}/deletedata'}

    def get_index_status(
            self, tenantid, indexid, subscription_id=None, query_parameters={}, custom_headers=None, raw=False, **operation_config):
        """Get index status by id.

        Get the detailed status of your index in each supported region.

        :param tenantid: The ID that uniquely identifies the tenant that the
         index belongs to.
        :type tenantid: str
        :param indexid: The ID that uniquely identifies the index definition
         to manage.
        :type indexid: str
        :param subscription_id: Bing developer subcription id
        :type subscription_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: IndexStatusResponse or ClientRawResponse if raw=true
        :rtype: ~microsoft.bing.commerce.ingestion.models.IndexStatusResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_index_status.metadata['url']
        path_format_arguments = {
            'tenantid': self._serialize.url("tenantid", tenantid, 'str'),
            'indexid': self._serialize.url("indexid", indexid, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        if subscription_id is not None:
            header_parameters['SubscriptionId'] = self._serialize.header("subscription_id", subscription_id, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('IndexStatusResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_index_status.metadata = {'url': '/{tenantid}/indexes/{indexid}/status'}

    def push_data_update(
            self, body, tenantid, indexid, subscription_id=None, notransform=None, updateid=None, query_parameters={}, custom_headers=None, raw=False, **operation_config):
        """Push catalog data.

        This method pushes updates to your your index data to Bing. This is an
        asynchronous process. To upload your index data to Bing, you'll send a
        push request that contains your index data.

        :param body:
        :type body: str
        :param tenantid: The ID that uniquely identifies the tenant that the
         index belongs to.
        :type tenantid: str
        :param indexid: The ID that uniquely identifies the index definition
         to manage.
        :type indexid: str
        :param subscription_id: Bing developer subcription id
        :type subscription_id: str
        :param notransform: This disables transformation config processing if
         the config was uploaded for some index. It's useful when the data is
         already transformed and is matching the index definition. Default is
         `false`
        :type notransform: bool
        :param updateid: An id to uniquely identify the push update request in
         order to be able to track it down later.
        :type updateid: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PushDataUpdateResponse or ClientRawResponse if raw=true
        :rtype:
         ~microsoft.bing.commerce.ingestion.models.PushDataUpdateResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.push_data_update.metadata['url']
        path_format_arguments = {
            'tenantid': self._serialize.url("tenantid", tenantid, 'str'),
            'indexid': self._serialize.url("indexid", indexid, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        if notransform is not None:
            query_parameters['notransform'] = self._serialize.query("notransform", notransform, 'bool')
        if updateid is not None:
            query_parameters['updateid'] = self._serialize.query("updateid", updateid, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'text/plain'
        if custom_headers:
            header_parameters.update(custom_headers)
        if subscription_id is not None:
            header_parameters['SubscriptionId'] = self._serialize.header("subscription_id", subscription_id, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, None)
        # _client.post tries to do a json dumps on body_content, without a way to override that behavior.
        # reset the request data to the raw body_content.
        request.data = body_content
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PushDataUpdateResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    push_data_update.metadata = {'url': '/{tenantid}/indexes/{indexid}/pushdata'}

    def push_data_status(
            self, tenantid, indexid, updateid, subscription_id=None, query_parameters={}, custom_headers=None, raw=False, **operation_config):
        """.

        .

        :param tenantid: The ID that uniquely identifies the tenant that the
         index belongs to.
        :type tenantid: str
        :param indexid: The ID that uniquely identifies the index definition
         to manage.
        :type indexid: str
        :param updateid: An id to uniquely identify the push update request in
         order to be able to track it down later.
        :type updateid: str
        :param subscription_id: Bing developer subcription id
        :type subscription_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PushUpdateStatusResponse or ClientRawResponse if raw=true
        :rtype:
         ~microsoft.bing.commerce.ingestion.models.PushUpdateStatusResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.push_data_status.metadata['url']
        path_format_arguments = {
            'tenantid': self._serialize.url("tenantid", tenantid, 'str'),
            'indexid': self._serialize.url("indexid", indexid, 'str'),
            'updateid': self._serialize.url("updateid", updateid, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        if subscription_id is not None:
            header_parameters['SubscriptionId'] = self._serialize.header("subscription_id", subscription_id, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PushUpdateStatusResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    push_data_status.metadata = {'url': '/{tenantid}/indexes/{indexid}/status/{updateid}'}

    def delete_transformation_config(
            self, tenantid, indexid, subscription_id=None, query_parameters={}, custom_headers=None, raw=False, **operation_config):
        """Delete your index's transformation config.

        Delete the transformation config that currently aplies to data you push
        to your index.

        :param tenantid: The ID that uniquely identifies the tenant that the
         index belongs to.
        :type tenantid: str
        :param indexid: The ID that uniquely identifies the index definition
         to manage.
        :type indexid: str
        :param subscription_id: Bing developer subcription id
        :type subscription_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TransformationConfigResponse or ClientRawResponse if raw=true
        :rtype:
         ~microsoft.bing.commerce.ingestion.models.TransformationConfigResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.delete_transformation_config.metadata['url']
        path_format_arguments = {
            'tenantid': self._serialize.url("tenantid", tenantid, 'str'),
            'indexid': self._serialize.url("indexid", indexid, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        if subscription_id is not None:
            header_parameters['SubscriptionId'] = self._serialize.header("subscription_id", subscription_id, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TransformationConfigResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    delete_transformation_config.metadata = {'url': '/{tenantid}/indexes/{indexid}/transformation'}

    def create_or_update_transformation_config(
            self, body, tenantid, indexid, subscription_id=None, query_parameters={}, custom_headers=None, raw=False, **operation_config):
        """Retrieve your current index's transformation config.

        Retrieve the transformation config that currently applies to data you
        push to your index.

        :param body:
        :type body: str
        :param tenantid: The ID that uniquely identifies the tenant that the
         index belongs to.
        :type tenantid: str
        :param indexid: The ID that uniquely identifies the index definition
         to manage.
        :type indexid: str
        :param subscription_id: Bing developer subcription id
        :type subscription_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TransformationConfigResponse or ClientRawResponse if raw=true
        :rtype:
         ~microsoft.bing.commerce.ingestion.models.TransformationConfigResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.create_or_update_transformation_config.metadata['url']
        path_format_arguments = {
            'tenantid': self._serialize.url("tenantid", tenantid, 'str'),
            'indexid': self._serialize.url("indexid", indexid, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'text/plain'
        if custom_headers:
            header_parameters.update(custom_headers)
        if subscription_id is not None:
            header_parameters['SubscriptionId'] = self._serialize.header("subscription_id", subscription_id, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'str')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, None)
        # _client.post tries to do a json dumps on body_content, without a way to override that behavior.
        # reset the request data to the raw body_content.
        request.data = body_content
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TransformationConfigResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_or_update_transformation_config.metadata = {'url': '/{tenantid}/indexes/{indexid}/transformation'}

    def get_transformation_config(
            self, tenantid, indexid, subscription_id=None, query_parameters={}, custom_headers=None, raw=False, **operation_config):
        """Get ingestion status.

        Track your ingestion by querying the status.

        :param tenantid: The ID that uniquely identifies the tenant that the
         index belongs to.
        :type tenantid: str
        :param indexid: The ID that uniquely identifies the index definition
         to manage.
        :type indexid: str
        :param subscription_id: Bing developer subcription id
        :type subscription_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TransformationConfigResponse or ClientRawResponse if raw=true
        :rtype:
         ~microsoft.bing.commerce.ingestion.models.TransformationConfigResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_transformation_config.metadata['url']
        path_format_arguments = {
            'tenantid': self._serialize.url("tenantid", tenantid, 'str'),
            'indexid': self._serialize.url("indexid", indexid, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        if subscription_id is not None:
            header_parameters['SubscriptionId'] = self._serialize.header("subscription_id", subscription_id, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TransformationConfigResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_transformation_config.metadata = {'url': '/{tenantid}/indexes/{indexid}/transformation'}

    def upload_try_out_config(
            self, body, subscription_id=None, query_parameters={}, custom_headers=None, raw=False, **operation_config):
        """Create a transformation config.

        Upload a new transformation config and set it as the transformation
        config that applies to data you push to your index.

        :param body:
        :type body: str
        :param subscription_id: Bing developer subcription id
        :type subscription_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TransformationConfigResponse or ClientRawResponse if raw=true
        :rtype:
         ~microsoft.bing.commerce.ingestion.models.TransformationConfigResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.upload_try_out_config.metadata['url']

        # Construct parameters

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'text/plain'
        if custom_headers:
            header_parameters.update(custom_headers)
        if subscription_id is not None:
            header_parameters['SubscriptionId'] = self._serialize.header("subscription_id", subscription_id, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, None)
        # _client.post tries to do a json dumps on body_content, without a way to override that behavior.
        # reset the request data to the raw body_content.
        request.data = body_content
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TransformationConfigResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    upload_try_out_config.metadata = {'url': '/transformation/tryout'}

    def execute_try_out_config(
            self, body, tryoutid, subscription_id=None, query_parameters={}, custom_headers=None, raw=False, **operation_config):
        """Upload a trytout config.

        Upload a transformation config that you can use to test data
        transformation on the cloud.

        :param body:
        :type body: str
        :param tryoutid: The transformation tryout config id.
        :type tryoutid: str
        :param subscription_id: Bing developer subcription id
        :type subscription_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TransformationTryoutResponse or ClientRawResponse if raw=true
        :rtype:
         ~microsoft.bing.commerce.ingestion.models.TransformationTryoutResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.execute_try_out_config.metadata['url']
        path_format_arguments = {
            'tryoutid': self._serialize.url("tryoutid", tryoutid, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'text/plain'
        if custom_headers:
            header_parameters.update(custom_headers)
        if subscription_id is not None:
            header_parameters['SubscriptionId'] = self._serialize.header("subscription_id", subscription_id, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, None)
        # _client.post tries to do a json dumps on body_content, without a way to override that behavior.
        # reset the request data to the raw body_content.
        request.data = body_content
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TransformationTryoutResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    execute_try_out_config.metadata = {'url': '/transformation/tryout/{tryoutid}'}

    def detect_schema(
            self, subscription_id=None, format=None, query_parameters={}, custom_headers=None, raw=False, **operation_config):
        """

        :param subscription_id: Bing developer subcription id
        :type subscription_id: str
        :param format: The push data update document format. Possible values
         include: 'Unknown', 'LDJson', 'CSV', 'TSV', 'JsonArray'
        :type format: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SchemaDetectionResponse or ClientRawResponse if raw=true
        :rtype:
         ~microsoft.bing.commerce.ingestion.models.SchemaDetectionResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.detect_schema.metadata['url']

        # Construct parameters
        if format is not None:
            query_parameters['format'] = self._serialize.query("format", format, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        if subscription_id is not None:
            header_parameters['SubscriptionId'] = self._serialize.header("subscription_id", subscription_id, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SchemaDetectionResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    detect_schema.metadata = {'url': '/schemadetection'}
