{
    "extract-revenge": {
        "patterns": [
            {
                "LEMMA": "extract",
                "TEMPLATE_ID": 1
            }
        ],
        "suggestions": [
            [
                {
                    "TEXT": "exact",
                    "FROM_TEMPLATE_ID": 1
                }
            ]
        ],
        "match_hook": [
            {
                "name": "succeeded_by_phrase",
                "args": "revenge",
                "match_if_predicate_is": true
            }
        ],
        "test": {
            "positive": [
                "And at the same time extract revenge on the whites he so despises?",
                "Watch as Tampa Bay extracts revenge against his former Los Angeles Rams team."
            ],
            "negative": [
                "Mother flavours her custards with lemon extract."
            ]
        }
    },
    "make-due": {
        "patterns": [
            {
                "LEMMA": "make",
                "TEMPLATE_ID": 1
            },
            {
                "LOWER": "due"
            }
        ],
        "suggestions": [
            [
                {
                    "TEXT": "make",
                    "FROM_TEMPLATE_ID": 1
                },
                {
                    "TEXT": "do"
                }
            ]
        ],
        "test": {
            "positive": [
                "Viewers will have to make due with tired re-runs and second-rate movies."
            ],
            "negative": [
                "The empty vessels make the greatest sound."
            ]
        },
        "comment": "this is an example comment",
        "description": "The expression is \"make do\".",
        "category": "R:VERB",
        "unexpected": "replaCy should handle arbitrary properties here, and attach them to the relevant spans"
    },
    "requirement": {
        "patterns": [
            {
                "LEMMA": "requirement",
                "POS": "NOUN",
                "TEMPLATE_ID": 1
            }
        ],
        "suggestions": [
            [
                {
                    "TEXT": "need",
                    "FROM_TEMPLATE_ID": 1
                }
            ]
        ],
        "match_hook": [
            {
                "name": "part_of_compound",
                "match_if_predicate_is": false
            }
        ],
        "test": {
            "positive": [
                "The system has the following requirements: blood of a virgin, suffering, and cat food.",
                "Our immediate requirement is extra staff."
            ],
            "negative": [
                "There is a residency requirement for obtaining citizenship.",
                "What is the minimum entrance requirement for this course?"
            ]
        }
    },
    "minimum": {
        "patterns": [
            {
                "LOWER": "minimum",
                "POS": "ADJ"
            }
        ],
        "suggestions": [
            [
                {
                    "TEXT": "smallest"
                }
            ]
        ],
        "match_hook": [
            {
                "name": "succeeded_by_phrase",
                "args": [
                    "height",
                    "value",
                    "size",
                    "number"
                ],
                "match_if_predicate_is": true
            }
        ],
        "test": {
            "positive": [
                "He was only five feet nine, the minimum height for a policeman."
            ],
            "negative": [
                "Raising the minimum wage would ratchet up real incomes in general.",
                "You must get a minimum of 60 questions right to pass the examination."
            ]
        }
    },
    "test_list_suc_pos": {
        "patterns": [
            {
                "LEMMA": "do",
                "TEMPLATE_ID": 1
            }
        ],
        "suggestions": [
            [
                {
                    "TEXT": "make",
                    "FROM_TEMPLATE_ID": 1
                }
            ]
        ],
        "match_hook": [
            {
                "name": "succeeded_by_pos",
                "args": [
                    "PRON",
                    "DET"
                ],
                "match_if_predicate_is": true
            }
        ],
        "test": {
            "positive": [
                "You do it.",
                "She does a dance."
            ],
            "negative": [
                "I do fun things."
            ]
        }
    },
    "test_list_pre_dep": {
        "patterns": [
            {
                "LOWER": "sam"
            }
        ],
        "suggestions": [
            [
                {
                    "TEXT": "Samuel"
                }
            ]
        ],
        "match_hook": [
            {
                "name": "preceded_by_dep",
                "args": [
                    "ROOT",
                    "mark"
                ],
                "match_if_predicate_is": true
            }
        ],
        "test": {
            "positive": [
                "If Sam wants to party; let him",
                "My name is Sam."
            ],
            "negative": [
                "That's called a 'beer', Sam."
            ]
        }
    },
    "test-relatives_x_is_y": {
        "patterns": [
            {
                "LEMMA": "require",
                "POS": "VERB",
                "DEP": {
                    "NOT_IN": [
                        "amod"
                    ]
                },
                "TEMPLATE_ID": 1
            }
        ],
        "suggestions": [
            [
                {
                    "TEXT": "need",
                    "FROM_TEMPLATE_ID": 1
                }
            ]
        ],
        "match_hook": [
            {
                "name": "relative_x_is_y",
                "args": [
                    "children",
                    "dep",
                    "csubj"
                ],
                "match_if_predicate_is": false
            }
        ],
        "test": {
            "positive": [
                "Your condition is serious and requires surgery.",
                "I require stimulants to function."
            ],
            "negative": [
                "Deciphering the code requires an expert.",
                "Making small models requires manual skill."
            ]
        }
    }
}