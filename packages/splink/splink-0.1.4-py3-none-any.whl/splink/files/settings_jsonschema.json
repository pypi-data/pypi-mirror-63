{
  "definitions": {},
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/root.json",
  "type": "object",
  "title": "Splink settings",
  "required": ["comparison_columns", "link_type"],
  "additionalProperties": false,
  "properties": {
    "link_type": {
      "$id": "#/properties/link_type",
      "type": "string",
      "title": "The type of data linking task - `dedupe_only`, `link_only` or `link_and_dedupe`.  Required.",
      "description": "- When `dedupe_only`, the user provides a single input dataframe, and `splink` tries to find duplicate entries\n- When `link_only`, the user provides two dataframes, and `splink` tries to find a link between two two.  It makes no attempt to deduplicate datasets so this is best used when input datasets contain no duplicates\n- When `link_and_dedupe`, the user provides two dataframes, and `splink` simultanouesly links and dedupes the dataframes.",
      "examples": [
        "dedupe_only",
        "link_only",
        "link_and_dedupe"
      ],
      "enum": [
        "dedupe_only",
        "link_only",
        "link_and_dedupe"
      ]
    },
    "proportion_of_matches": {
      "$id": "#/properties/proportion_of_matches",
      "type": "number",
      "title": "The proportion of comparisons thought to be matches",
      "description": "This provides the initial value (prior) that EM algorithm will start iterating from",
      "default": 0.3,
      "minimum": 0,
      "maximum": 1,
      "examples": [
        0.3,
        0.1,
        0.9
      ]
    },
    "em_convergence": {
      "$id": "#/properties/em_convergence",
      "type": "number",
      "title": "Convergence tolerance for the EM algorithm.",
      "description": " The algorithm will stop converging when the maximum of the change in model parameters between iterations is below this value.",
      "default": 0.0001,
      "examples": [
        0.0001,
        0.00001,
        1e-6
      ],
      "maximum": 0.05,
      "minimum": 1e-12
    },
    "max_iterations": {
      "$id": "#/properties/max_iterations",
      "type": "number",
      "title": "The maximum number of iterations to run even if convergence has not been reached",
      "description": "Set this value to zero if you do not want to use the EM algorithm and just want to score matches from m and u probabilities",
      "default": 25,
      "examples": [
        20,
        150
      ],
      "maximum": 500,
      "minimum": 0
    },
    "unique_id_column_name": {
      "$id": "#/properties/unique_id_column_name",
      "type": "string",
      "title": "The name of the column in the input dataset representing a unique id. For linking tasks, ids must be unique to each dataset being linked, and do not need to be globally unique across these two datasets",
      "default": "unique_id",
      "examples": [
        "unique_id"
      ]
    },
    "retain_matching_columns": {
      "$id": "#/properties/retain_matching_columns",
      "type": "boolean",
      "title": "If set to true, each column in the `comparison_columns` array will be retained in output datasets. This is helpful so that the user can inspect matches, but once the comparison vector (gamma) columns are computed, this information is not actually needed by the algorithm.",
      "description": "The algorithm will run faster and use less resources if this is set to false.",
      "default": true,
      "examples": [
        false,
        true
      ]
    },
    "retain_intermediate_calculation_columns": {
      "$id": "#/properties/retain_intermediate_m_u_probability_columns",
      "type": "boolean",
      "title": "Retain intermediate calculation columns, such as the individual m and u probabilities associated with each column in `comparison_columns`",
      "description": "The algorithm will run faster and use less resources if this is set to false.",
      "default": true,
      "examples": [
        false,
        true
      ]
    },
    "comparison_columns": {
      "$id": "#/properties/comparison_columns",
      "type": "array",
      "title": "A list of columns to use for probabalistic matching",
      "description": "Comparisons between the values in these columns will be used to determine match scores",
      "minItems": 1,

      "items": {
        "$id": "#/properties/comparison_columns/items",
        "type": "object",
        "title": "A comparison of input column(s) that is used for probabalistic matching",
        "oneOf": [{"required": ["col_name"]},
                {"required": ["custom_name", "custom_columns_used", "case_expression", "num_levels"]}
            ],
        "additionalProperties": false,
        "properties": {
          "col_name": {
            "$id": "#/properties/comparison_columns/items/properties/col_name",
            "type": "string",
            "title": "The name of the column in the input dataset",
            "default": "",
            "examples": [
              "first_name",
              "surname"
            ]
          },
          "num_levels": {
            "$id": "#/properties/comparison_columns/items/properties/num_levels",
            "type": "integer",
            "title": "The number of different similarity levels that will be computed for this column",
            "description": "A greater value for `num_levels` means the algorithm can be more precise about how string similarity is treated - e.g. with three levels, it enables it to make a distinction between strings which are an almost-exact match, strings which are quite similar, and strings which don't really match at all.  However, more levels results in longer compute times and can sometimes affect convergence. By default, for a string variable, two levels would implies level 0: no match, level 1: almost exact match.  Three levels imples level 0: no match, level 1: strings are similar but not exactly the same, level 2: strings are almost exactly the same.  This column determines which pre-configured SQL CASE expression is used to generate values in the comparison vector.",
            "default": 2,
            "examples": [
              2,
              3,
              4
            ],
            "minimum": 2
          },
          "data_type": {
            "$id": "#/properties/comparison_columns/items/properties/data_type",
            "type": "string",
            "title": "The data type of the column.  This is used to choose how similarity is assessed this column. This is ignored if you explicitly provide a case_expression.",
            "description": "- If `string` is specified, `splink` will use the Jaro Winkler string comparison functions.\n- If `numeric` is specified, then similarity will be assessed based on the absolute percentage difference between the two values.",
            "default": "string",
            "examples": [
              "string",
              "numeric"
            ],
            "enum": [
              "string",
              "numeric"
            ]
          },
          "custom_name": {
            "$id": "#/properties/comparison_columns/items/properties/custom_name",
            "type": "string",
            "title": "Custom name to identify this comparison in charts and calculations",
            "description": "If supplying a custom case expression that is not specific to a single input column, you must provide ",
            "default": "",
            "examples": [
              "name_inversion_comparison",
              "whole_row_concat_cosine_similarity"
            ]
          },
          "custom_columns_used": {
            "$id": "#/properties/comparison_columns/items/properties/custom_columns_used",
            "type": "array",
            "title": "A list of the columns required by the custom case expression used for this custom column",
            "description": "When using a custom comparison, this is needed so Sparklink knows what columns to retain",
            "default": [],
            "examples": [
              ["first_name"],
              ["first_nsme","surname"]
            ],
            "minItems": 1
          },
          "case_expression": {
            "$id": "#/properties/comparison_columns/items/properties/case_expression",
            "type": "string",
            "title": "A SELECT CASE expression that compares the values of the input column and returns integer values corresponding to num_levels. Nulls should be explicitly dealt with in the case expression, and should be assigned a value of -1, see examples.",
            "description": "This is an override which allows the user to customise how similarity is computed.  If given, this overrides the default mechanism of comparing columns and ignores data_type",
            "examples": [
              "CASE \nWHEN first_name_l is null or first_name_r is null then -1 \nWHENfirst_name_l = first_name_r THEN 1 ELSE 0 END",
              "CASE \nWHEN first_name_l is null or first_name_r is null then -1 \nWHEN jaro_winkler_sim(first_name_l, first_name_r) < 0.94 THEN 2 \n WHEN jaro_winkler_sim(first_name_l, first_name_r) < 0.8 THEN 1 \n  ELSE 0 END"
            ],
            "allOf": [
              {
                "pattern": "(CASE|case)"
              },
              {
                "pattern": "(END|end)"
              }
            ]
          },
          "m_probabilities": {
            "$id": "#/properties/comparison_columns/items/properties/m_probabilities",
            "type": "array",
            "title": "A array of the 'starting' m probabilities for this column (the priors, which are fed into the EM algorithm), i.e probability of observing each similarity level amonst matches.  There will be `num_level` values in this array.  See http://imai.fas.harvard.edu/research/files/linkage.pdf for further details.",
            "description": "The first probability given corresponds to level 0: least similar.  It refers to the probability of observing level 0 in the comparison vector if the record really is a match.  The second probability corresponds to level 1, up to level n, most similar.",
            "examples": [
              [
                0.05,
                0.95
              ],
              [
                0.01,
                0.1,
                0.89
              ]
            ],
            "minItems": 2
          },
          "u_probabilities": {
            "$id": "#/properties/comparison_columns/items/properties/u_probabilities",
            "type": "array",
            "title": "A array of the 'starting' u probabilities for this column (the priors, which are fed into the EM algorithm) i.e. the probability of observing each similarity value amonst non-matches. There will be num_levels values in this array.  See http://imai.fas.harvard.edu/research/files/linkage.pdf for further details.",
            "description": "The first probability given corresponds to level 0: least similar.  It refers to the probability of observing level 0 in the comparison vector if the record 'in reality' is not a match.  The second probability corresponds to level 1, up to level n, most similar.",
            "examples": [
              [
                0.9,
                0.1
              ],
              [
                0.8,
                0.1,
                0.1
              ]
            ],
            "minItems": 2
          },
          "term_frequency_adjustments": {
            "$id": "#/properties/comparison_columns/items/properties/term_frequency_adjusments",
            "type": "boolean",
            "default": false,
            "title": "Whether ex post term frequency adjustments should be made to match scores for this column",
            "description": "For some columns such as first name, the value of first name is important due to the distribution of values being non-uniform.  For instance, a match on 'linacre' contains more information than a match on 'smith. If this is set to true, a term frequency adjustment is made to account for these difference.  For details of how this works, see here: https://static.cambridge.org/content/id/urn:cambridge.org:id:article:S0003055418000783/resource/name/S0003055418000783sup001.pdf"
          },
          "gamma_index": {
            "$id": "#/properties/comparison_columns/items/properties/gamma_index",
            "type": "integer",
            "description": "Gamma values in the comparison vector will be put in columns called gamma_0, gamma_1 etc.  This is the gamma index corresponding to this column"
          }
        }
      }
    },
    "blocking_rules": {
      "$id": "#/properties/blocking_rules",
      "type": "array",
      "title": "A list of one or more blocking rules to apply. A cartesian join is applied if `blocking_rules` is empty or not supplied.",
      "description": "Each rule is a SQL expression representing the blocking rule, which will be used to create a join.  The left table is aliased with `l` and the right table is aliased with `r`. For example, if you want to block on a `first_name` column, the blocking rule would be `l.first_name = r.first_name`.  Note that splink deduplicates the comparisons generated by the blocking rules. If empty or not supplied, all comparisons between the input dataset(s) will be generated and blocking will not be used. For large input datasets, this will generally be computationally intractable because it will generate comparisons equal to the number of rows squared.",
      "default": [],
      "examples": [
        [
          "l.first_name = r.first_name AND l.surname = r.surname",
          "l.dob = r.dob"
        ]
      ],
      "items": {
        "$id": "#/properties/blocking_rules/items",
        "type": "string",
        "title": "Each item in the array is a SQL expression represing a left join ON condition",
        "default": [],
        "examples": [
          [
            "l.first_name = r.first_name AND l.surname = r.surname",
            "l.dob = r.dob"
          ]
        ],
        "pattern": "^(.*)$"
      }
    },
    "additional_columns_to_retain": {
      "$id": "#/properties/additional_columns_to_retain",
      "type": "array",
      "title": "A list of columns not being used in the probabalistic matching comparisons that you want to include in your results.",
      "default": [],
      "examples": [
        "col_1",
        "col2"
      ],
      "items": {
        "$id": "#/properties/additional_columns_to_retain/items",
        "type": "string",
        "title": "Individual strings representing other columns to retain",
        "examples": [
          "group",
          "an_other_column"
        ],
        "pattern": "^(.*)$"
      }
    }
  }
}
