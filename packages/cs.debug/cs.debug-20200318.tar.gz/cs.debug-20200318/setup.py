#!/usr/bin/env python
from setuptools import setup
setup(
  name = 'cs.debug',
  description = 'Assorted debugging facilities.',
  author = 'Cameron Simpson',
  author_email = 'cs@cskk.id.au',
  version = '20200318',
  url = 'https://bitbucket.org/cameron_simpson/css/commits/all',
  classifiers = ['Programming Language :: Python', 'Programming Language :: Python :: 2', 'Programming Language :: Python :: 3', 'Development Status :: 4 - Beta', 'Intended Audience :: Developers', 'Operating System :: OS Independent', 'Topic :: Software Development :: Libraries :: Python Modules', 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)'],
  include_package_data = True,
  install_requires = ['cs.logutils', 'cs.obj', 'cs.pfx', 'cs.py.func', 'cs.py.stack', 'cs.py3', 'cs.result', 'cs.seq', 'cs.x'],
  keywords = ['python2', 'python3'],
  license = 'GNU General Public License v3 or later (GPLv3+)',
  long_description = '*Latest release 20200318*:\nRemove use of cs.obj.O, universally supplanted by types.SimpleNamespace.\n\nAssorted debugging facilities.\n\n* Lock, RLock, Thread: wrappers for threading facilties; simply import from here instead of there\n\n* thread_dump, stack_dump: dump thread and stack state\n\n* @DEBUG: decorator to wrap functions in timing and value debuggers\n\n* @trace: decorator to report call and return from functions\n\n* @trace_caller: decorator to report caller of function\n\n* TracingObject: subclass of cs.obj.Proxy that reports attribute use\n\n## Function `DEBUG(f, force=False)`\n\nDecorator to wrap functions in timing and value debuggers.\n\n## Function `debug_object_shell(o, prompt=None)`\n\nInteractive prompt for inspecting variables.\n\n## Class `DebuggingLock(DebugWrapper,types.SimpleNamespace)`\n\nWrapper class for threading.Lock to trace creation and use.\ncs.threads.Lock() returns on of these in debug mode or a raw\nthreading.Lock otherwise.\n\n## Class `DebuggingRLock(DebugWrapper,types.SimpleNamespace)`\n\nWrapper class for threading.RLock to trace creation and use.\ncs.threads.RLock() returns on of these in debug mode or a raw\nthreading.RLock otherwise.\n\n## Class `DebugShell(cmd.Cmd)`\n\nAn interactive prompt for python statements, attached to /dev/tty by default.\n\n## Class `DebugWrapper(types.SimpleNamespace)`\n\nBase class for classes presenting debugging wrappers.\n\n## Function `DF(func, *a, **kw)`\n\nWrapper for a function call to debug its use.\nRequires rewriting the call from f(*a, *kw) to DF(f, *a, **kw).\nAlternatively one could rewrite as DEBUG(f)(*a, **kw).\n\n## Function `Lock()`\n\nFactory function: if cs.logutils.logging_level <= logging.DEBUG\nthen return a DebuggingLock, otherwise a threading.Lock.\n\n## Function `openfiles(substr=None, pid=None)`\n\nRun lsof(8) against process `pid` returning paths of open files whose paths contain `substr`.\n`substr`: default substring to select by; default returns all paths.\n`pid`: process to examine; default from os.getpid().\n\n## Function `RLock()`\n\nFactory function: if cs.logutils.logging_level <= logging.DEBUG\nthen return a DebuggingRLock, otherwise a threading.RLock.\n\n## Function `selftest(module_name, defaultTest=None, argv=None)`\n\nCalled by my unit tests.\n\n## Function `stack_dump(stack=None, limit=None, logger=None, log_level=None)`\n\nDump a stack trace to a logger.\n`stack`: a stack list as returned by traceback.extract_stack.\n         If missing or None, use the result of traceback.extract_stack().\n`limit`: a limit to the number of stack entries to dump.\n         If missing or None, dump all entries.\n`logger`: a logger.Logger ducktype or the name of a logger.\n         If missing or None, obtain a logger from logging.getLogger().\n`log_level`: the logging level for the dump.\n         If missing or None, use cs.logutils.logging_level.\n\n## Function `thread_dump(Ts=None, fp=None)`\n\nWrite thread identifiers and stack traces to the file `fp`.\n`Ts`: the Threads to dump; if unspecified use threading.enumerate().\n`fp`: the file to which to write; if unspecified use sys.stderr.\n\n## Class `TimingOutLock`\n\nA Lock replacement which times out, used for locating deadlock points.\n\n## Function `trace(func)`\n\nDecorator to report the call and return of a function.\n\n## Function `trace_caller(func)`\n\nDecorator to report the caller of a function when called.\n\n## Class `TraceSuite`\n\nContext manager to trace start and end of a code suite.\n\n\n\n# Release Log\n\n*Release 20200318*:\nRemove use of cs.obj.O, universally supplanted by types.SimpleNamespace.\n\n*Release 20181231*:\nNew TimingOutLock for locating deadlock points, grew from debugging cs.vt.index.\nOther minor changes.\n\n*Release 20171231*:\nUpdate imports for recentchanges.\nNew context manager TraceSuite to trace start and end of a code suite.\n\n*Release 20160918*:\nselftest(): fix parameter ordering to match unittest.\n\n*Release 20160828*:\nUpdate metadata with "install_requires" instead of "requires".\n\n*Release 20160827*:\nNew openfiles() to return selected pathnames of open files via lsof(8).\nNew selftest() to invoke unittests with benefits.\nDebugShell, a cmd.Cmd subclass for debugging - current use case calls this with self.__dict__ in a test case tearDwon.\ndebug_object_shell: convenience wrapper for DebugShell to call it on an object\'s attributes.\n\n*Release 20150116*:\nPyPI prep.',
  long_description_content_type = 'text/markdown',
  package_dir = {'': 'lib/python'},
  py_modules = ['cs.debug'],
)
