openapi: 3.0.2
info:
  title: Ingest Service
  version: '1.0'
  description: |-
    The ingest service is a multi-region IWS web service that receives Alertlogic customer data and routes it to any number of destinations including:

    Real-Time Export (RTE) json data sent to kinesis streams for
    processing by internal teams for Alertlogic products
    use by customers for custom value add
    The daccess service for long-term storage and search
  contact:
    name: Alert Logic Support
    email: support@alertlogic.com
servers:
  - url: 'https://api.cloudinsight.alertlogic.com'
    description: production
    x-alertlogic-session-endpoint: true
  - url: 'https://api.cloudinsight.product.dev.alertlogic.com'
    description: integration
    x-alertlogic-session-endpoint: true
paths:
  /ingest/v1/types:
    get:
      summary: Get types
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IngestDataType'
      operationId: get_types
      description: |+
        Return a list of all supported data stream types.


      security:
        - X-AIMS-Auth-Token: []
  '/ingest/v1/type/{type}':
    get:
      summary: Get Type Attributes
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: get_type_attributes
      description: "Return the attributes of a data type. \nAll type attributes are static with the exception of packet and packet_versions. As such, defining <<\"latest\">> as the version to fetch for packet will return the most recent version. Leaving version undefined while fetching packet will also return the same as <<\"latest\">>"
      security:
        - X-AIMS-Auth-Token: []
      parameters:
        - schema:
            type: array
            enum:
              - name
              - encodings
              - packet
              - packet_versions
              - export
            default: 'name, encodings, packet, packet_versions, export'
          in: query
          name: attributes
          description: 'A list of type attributes to return. This option is used to return a specified set of type attributes instead of all possible type attributes. Possible attributes to query include : name packet_versions encodings fields packet export'
        - schema:
            type: string
            default: 1.0.0
          in: query
          name: version
          description: "This is the version of the packet schema which the user would like to return. \nValues can be any of the form int.int.int"
    parameters:
      - schema:
          type: string
        name: type
        in: path
        required: true
        description: A data type managed by the service. The currently known types are available by calling `get_types` API
  '/ingest/v1/{account_id}/data/{type}':
    post:
      summary: Send Data
      operationId: send_data
      responses:
        '200':
          description: received
        '307':
          description: Temporary Redirect
        '400':
          description: Bad Request
      description: Send data to the Ingest Service
      security:
        - X-AIMS-Auth-Token: []
      parameters:
        - schema:
            type: string
          in: query
          name: sid
          description: |-
            The appliance identifier

            This query parameter is required if the source of the data type is an appliance, and not a agent running on an customer system. This appliance to data types, such as, snmsgs which are IDS events generated on the appliance itself.
        - schema:
            type: string
          in: query
          name: chkpt
          description: The caller may use this for tracability of the records they send.
        - schema:
            type: boolean
            enum:
              - 'true'
              - 'false'
            default: 'false'
          in: query
          name: return_ingest_ids
          description: |-
            The caller may use this to receive the ingest_ids which is the unique identifier generated when the message is ingested. This can later be used to find the ingested message in daccess.

            This can then be decoded by first base64 decoding the message, decompress using the zlib library, and getting the unique ids through the use of the uuid library on every 16 bytes of the returned ingest_ids.

            The message can later be retrieved from daccess via the `Read Messages` API
        - schema:
            type: string
          in: header
          name: content-type
          description: "The content-type header should be set to the encoding format of the data being sent. \nEach data type, supports a specific set of data encodings that can be specified, and they can be retrieved via the `Get Type Attributes` API\n\n"
          required: true
        - schema:
            type: string
            enum:
              - deflate
              - chunk
          in: header
          name: content-encoding
          description: 'Use the `content_encoding` to leverage both chunk encoding to stream larger bodies, as well as the standard compression types when sending data type encodings that do not natuarally compress the data. This will result in a much more efficent interaction for both the client as well as the service.'
      requestBody:
        content:
          alertlogic.com/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: JSON Encoded data to send to the Ingest Service
              required:
                - data
            x-alertlogic-schema:
              required: true
              in: body
          alertlogic.com/protobuf:
            schema:
              type: object
              properties:
                data:
                  type: string
                  format: binary
                  description: |-
                    Protobuf binary data to send to the Ingest Service
              required:
                - data
        description: Data payload
    parameters:
      - schema:
          type: string
        name: account_id
        in: path
        required: true
        description: AIMS Account ID
      - schema:
          type: string
        name: type
        in: path
        required: true
        description: Ingestion Data Type
components:
  schemas:
    IngestDataType:
      title: IngestDataType
      type: object
      properties:
        name:
          type: string
          description: Name of the ingest service supported data type
  securitySchemes:
    X-AIMS-Auth-Token:
      name: X-AIMS-Auth-Token
      type: apiKey
      in: header

