{"version":3,"sources":["webpack:///./src/common/dom/toggle_attribute.ts","webpack:///./src/panels/lovelace/editor/select-view/hui-dialog-select-view.ts"],"names":["__webpack_require__","d","__webpack_exports__","toggleAttribute","el","name","force","undefined","hasAttribute","removeAttribute","setAttribute","HuiDialogSelectView","_decorate","customElement","_initialize","_LitElement","[object Object]","args","super","this","F","kind","decorators","property","key","value","async","params","_params","updateComplete","changedProps","_this$_params","_get","_getPrototypeOf","prototype","call","lovelaceConfig","views","some","view","icon","html","_openedChanged","_selectView","shadowRoot","querySelector","e","detail","viewSelectedCallback","_dialog","close","ev","LitElement"],"mappings":"uFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IACO,MAAMA,EAAkB,CAC7BC,EACAC,EACAC,UAEcC,IAAVD,IACFA,IAAUA,GAGRF,EAAGI,aAAaH,KACdC,IAIJF,EAAGK,gBAAgBJ,IACZ,IAEK,IAAVC,IAIJF,EAAGM,aAAaL,EAAM,KACf,gvDCJF,IAAMM,80LAAbC,CAAA,CADCC,YAAc,2BACf,SAAAC,EAAAC,GADA,MACaJ,UADbI,EACoDC,eAAAC,GAAAC,SAAAD,GAAAH,EAAAK,OAApD,OAAAC,EAAaT,EAAbV,EAAA,EAAAoB,KAAA,QAAAC,WAAA,CACGC,eADHC,IAAA,UAAAC,WAAA,IAAAJ,KAAA,SAAAG,IAAA,aAAAC,MAGEC,eAAwBC,GACtBR,KAAKS,QAAUD,QACTR,KAAKU,iBALf,CAAAR,KAAA,SAAAG,IAAA,UAAAC,MAQE,SAAkBK,GAAc,IAAAC,EAC9BC,EAAAC,EATStB,EASTuB,WAAA,UAAAf,MAAAgB,KAAAhB,KAAcW,GACd3B,YACEgB,KACA,aACA,QAAAY,EAAAZ,KAAKS,eAAL,IAAAG,MAAcK,iBACTjB,KAAKS,QAAQQ,eAAeC,MAAMC,KAAMC,GAASA,EAAKC,SAdjE,CAAAnB,KAAA,SAAAG,IAAA,SAAAC,MAmBE,WACE,OAAKN,KAAKS,QAGHa;;;;2BAIgBtB,KAAKuB;;;;0BAINvB,KAAKS,QAASQ;yBACfjB,KAAKwB;;;MAXjBF,QArBb,CAAApB,KAAA,MAAAG,IAAA,UAAAC,MAsCE,WACE,OAAON,KAAKyB,WAAYC,cAAc,qBAvC1C,CAAAxB,KAAA,SAAAG,IAAA,cAAAC,MA0CE,SAAoBqB,GAClB,MAAMP,EAAeO,EAAEC,OAAOR,KAC9BpB,KAAKS,QAASoB,qBAAqBT,GACnCpB,KAAK8B,QAAQC,UA7CjB,CAAA7B,KAAA,SAAAG,IAAA,iBAAAC,MAgDE,SAAuB0B,GACfA,EAAGJ,OAAetB,QACtBN,KAAKS,aAAUrB,QAlDoB6C","file":"chunk.b3e0dbbc3ca7c695a3ff.js","sourcesContent":["// Toggle Attribute Polyfill because it's too new for some browsers\nexport const toggleAttribute = (\n  el: HTMLElement,\n  name: string,\n  force?: boolean\n) => {\n  if (force !== undefined) {\n    force = !!force;\n  }\n\n  if (el.hasAttribute(name)) {\n    if (force) {\n      return true;\n    }\n\n    el.removeAttribute(name);\n    return false;\n  }\n  if (force === false) {\n    return false;\n  }\n\n  el.setAttribute(name, \"\");\n  return true;\n};\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\n\nimport \"../../../../components/dialog/ha-paper-dialog\";\nimport { toggleAttribute } from \"../../../../common/dom/toggle_attribute\";\nimport \"../../components/hui-views-list\";\n\n// tslint:disable-next-line:no-duplicate-imports\nimport { HaPaperDialog } from \"../../../../components/dialog/ha-paper-dialog\";\n\nimport { SelectViewDialogParams } from \"./show-select-view-dialog\";\nimport { PolymerChangedEvent } from \"../../../../polymer-types\";\n\n@customElement(\"hui-dialog-select-view\")\nexport class HuiDialogSelectView extends LitElement {\n  @property() private _params?: SelectViewDialogParams;\n\n  public async showDialog(params: SelectViewDialogParams): Promise<void> {\n    this._params = params;\n    await this.updateComplete;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    toggleAttribute(\n      this,\n      \"hide-icons\",\n      this._params?.lovelaceConfig\n        ? !this._params.lovelaceConfig.views.some((view) => view.icon)\n        : true\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    return html`\n      <ha-paper-dialog\n        with-backdrop\n        opened\n        @opened-changed=\"${this._openedChanged}\"\n      >\n        <h2>Choose a view</h2>\n        <hui-views-list \n        .lovelaceConfig=${this._params!.lovelaceConfig}\n        @view-selected=${this._selectView}>\n        </hui-view-list>\n      </ha-paper-dialog>\n    `;\n  }\n\n  private get _dialog(): HaPaperDialog {\n    return this.shadowRoot!.querySelector(\"ha-paper-dialog\")!;\n  }\n\n  private _selectView(e: CustomEvent): void {\n    const view: number = e.detail.view;\n    this._params!.viewSelectedCallback(view);\n    this._dialog.close();\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>): void {\n    if (!(ev.detail as any).value) {\n      this._params = undefined;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-select-view\": HuiDialogSelectView;\n  }\n}\n"],"sourceRoot":""}