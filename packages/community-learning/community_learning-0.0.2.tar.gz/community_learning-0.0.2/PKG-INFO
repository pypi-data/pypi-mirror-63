Metadata-Version: 2.1
Name: community_learning
Version: 0.0.2
Summary: A poc for learning in a community.
Home-page: https://github.com/WFR/community_learning
Author: Wilhelm Fritsche
Author-email: wilhelm.fritsche@gmail.com
License: Apache Software License 2.0
Description: # Community Learning
        > Ziel ist es mit diesem kleine PoC aufzuzeigen wie mit Hilfe von Federated Learning bessere Prognose erzielt werden können. 
        
        
        Hier ein Auszug von der Kaggle Website
        > In this competition, you are provided with 1.5 years of customers behavior data from Santander bank to predict what new products customers will purchase. The data starts at 2015-01-28 and has monthly records of products a customer has, such as "credit card", "savings account", etc. You will predict what additional products a customer will get in the last month, 2016-06-28, in addition to what they already have at 2016-05-28. These products are the columns named: ind_(xyz)_ult1, which are the columns #25 - #48 in the training data. You will predict what a customer will buy in addition to what they already had at 2016-05-28. 
        
        ## Installation
        
        ## Vorgehen PoC
        
        Um den Usecase möglichst realistisch zu gestalten, gehen wir wie folgt vor:
        
        
        **Variante 1:**
        1. **Daten bereitstellen und bereinigen**: Hierzu werden wir das Datenset so aufteilen, dass je ein Datenset pro Bank entsteht. Dazu werden wir ein geografisches Attribut hernehmen. Danach werden die Daten nochmals im Verhältnis 80/20 aufgeteilt in ein Train- und Testset (`data_bank1_train`, `data_bank1_test`, `data_bank2_train`, `data_bank2_test`). 
        2. **Baseline Modelle trainiern:** Pro Bank werden wir einen GradientBoost Algorithmus trainieren mit deren Default-Einstellungen. Dadurch erhaltne wir 2 Modelle (`model_bank1` und `model_bank2`)
        3. **Ensemble Predictions:** In diesem Schritt werden wir die Resultate von model_bank1 und model_bank2 kombinieren. 
         - `model_bank1` und `model_bank2` wird mit den `data_bank1_test` gefüttert und eine gemeinsame Prediction erstellt.
         - `model_bank1` und `model_bank2` wird mit den `data_bank2_test` gefüttert und eine gemeinsame Prediction erstellt.
        4. **Auswertung:**: Um festzustellen ob das Ensemble eine Mehrwert bringt werden folgende Resultate verglichen.
         - `model_bank1(data_bank1_test)` vs `ensemble(model_bank1(data_bank1_test), model_bank2(data_bank1_test)`
         - `model_bank2(data_bank2_test)` vs `ensemble(mdoel_bank2(data_bank1_test), model_bank2(data_bank2_test)`
        
        ## How to use
        
        Fill me in please! Don't forget code examples:
        
        ```
        1+1
        ```
        
        
        
        
            2
        
        
        
Keywords: federated learning
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.6
Description-Content-Type: text/markdown
