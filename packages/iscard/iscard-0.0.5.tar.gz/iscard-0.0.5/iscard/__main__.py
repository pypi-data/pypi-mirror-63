import argparse
import sys
import pandas as pd
import logging
import iscard

parser = argparse.ArgumentParser(
    usage="""
    Iscard <command> [<args>]

    The most commonly used iscard commands are : 

    learn       Create a model from multiple normal bam samples 
    test        Test a bam sample against the model  
    plot        Create plot image from a test file
    bedgraph    Create a bedgraph from a test file 
    info        Get some info about a model

    """
)


parser.add_argument("--version", action="version", version=iscard.__version__)
subparsers = parser.add_subparsers(title="sub command", dest="subcommand")


learn_parser = subparsers.add_parser(
    "learn",
    usage="""
    Used to create a model from normal bam files:

        Exemple:

        iscard learn -i normal/*.bam  -r manifest.bed -o model.h5
    """,
)

learn_parser.add_argument("-i", "--input", nargs="+", help="bam files", required=True)
learn_parser.add_argument(
    "-r", "--region", help="bed file of sequencing region", required=True
)
learn_parser.add_argument(
    "-o", "--output", help="write the model into a hdf5 file", required=True
)
learn_parser.add_argument(
    "-t", "--threads", help="Set thread number", required=False, default=4, type=int
)

learn_parser.add_argument(
    "-s",
    "--sampling",
    help="Read depth every <s> bases",
    required=False,
    default=100,
    type=int,
)


test_parser = subparsers.add_parser(
    "test",
    usage="""
    Test a bam file against a model and return z-scores into a tabular file

        Exemple:

        iscard test -i sample.bam  -m model.h5 -o test.result
    """,
)

test_parser.add_argument(
    "-i", "--input", help="A sample bam file to test", required=True
)
test_parser.add_argument(
    "-m", "--model", help="Model created by `iscard learn`", required=True
)
test_parser.add_argument(
    "-o", "--output", help="write test result into a hdf5 file", required=True
)

call_parser = subparsers.add_parser(
    "call",
    usage="""
    Call cnv from a test file according z-score threashold and a cumulative count of outsider  

        Exemple:

        iscard call -i test.h5 > call.txt 
    """,
)

call_parser.add_argument(
    "-i", "--input", help="test file created by `iscard test`", required=True
)
call_parser.add_argument("-t", "--threshold", help="zscore threshold", default=3)
call_parser.add_argument(
    "-m",
    "--min",
    help="minimum cumulative position where zscore is under threshold",
    default=100,
)


bedgraph_parser = subparsers.add_parser(
    "bedgraph",
    usage="""
    Create a bedgraph from a test file. You can select which metrics you want to output.

        Exemple:

        iscard bedgraph -i test.result -c zscore > test.bedgraph
    """,
)
bedgraph_parser.add_argument(
    "-i", "--input", help="test file created by `iscard test`", required=True
)
bedgraph_parser.add_argument(
    "-c",
    "--column",
    help="Variable to use",
    choices=["depth", "depth_norm", "inter_z", "intra_z"],
)


plot_parser = subparsers.add_parser(
    "plot",
    usage="""
    Plot a graph into an image from a test file.  

        Exemple:

        iscard plot -i test.result -m model.h5 -name GJB2 -o result.png
    """,
)
plot_parser.add_argument(
    "-i", "--input", help="test file created by `iscard test`", required=True
)

plot_parser.add_argument("-m", "--model", help="model file ", required=True)
plot_parser.add_argument(
    "-o", "--output", help="Plot test into an image", required=True
)
plot_parser.add_argument(
    "-n",
    "--name",
    help="select data within a name region. The name comes from the bed file ",
    required=True,
)

plot_parser.add_argument("-t", "--threshold", help="zscore threshold", default=3)


info_parser = subparsers.add_parser(
    "info",
    usage="""
    display model information  

        Exemple:

        iscard info -m model.h5 
    """,
)

info_parser.add_argument(
    "-m", "--model", help="Model created by `iscard learn`", required=True
)


# test_parser = subparsers.add_parser('report')
# test_parser.add_argument("-i", "--input", help="test file")
# test_parser.add_argument("-m", "--model")
# test_parser.add_argument("-o", "--output", help="output results as a bedgraph")


# test_parser = subparsers.add_parser('render')
# test_parser.add_argument("-r", "--result", help="result file generated by `iscard test`")
# test_parser.add_argument("-o", "--output", help="html output file")


if __name__ == "__main__":

    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO)

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    # if "depth" in args.subcommand:
    # 	df = get_coverages_from_bed(args.bam, args.region, args.window, args.aggregate)
    # 	df.reset_index().to_hdf(args.output, key="raw", mode="w")

    from iscard import core
    from iscard.model import Model, plot_test, call_test

    if "info" in args.subcommand:
        model = Model(args.model)
        model.print_infos()

    if "learn" in args.subcommand:
        model = Model()
        model.learn(
            args.input,
            args.region,
            show_progress=True,
            threads=args.threads,
            sample_rate=args.sampling,
        )
        model.to_hdf5(args.output)

    if "test" in args.subcommand:
        model = Model(args.model)
        test_data = model.test_sample(args.input)
        test_data.to_csv(args.output, sep="\t")

    if "call" in args.subcommand:
        test_data = pd.read_csv(args.input, sep="\t")
        for region in call_test(test_data):
            print(*region, sep="\t")

        # df.to_csv(args.output, sep="\t")

    if "bedgraph" in args.subcommand:
        df = pd.read_csv(args.input, sep="\t")
        core.print_bedgraph(df, args.column, "Iscard")

    if "plot" in args.subcommand:

        test_data = pd.read_csv(args.input, sep="\t")
        model = Model(args.model)
        plot_test(args.output, test_data, model, args.name)
