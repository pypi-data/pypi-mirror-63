# ==============
# Aligner - WALT
# ==============
---

- slug: walt
  name: WALT
  requirements:
    expression-engine: jinja
    resources:
      memory: 16384
      cores: 10
    executor:
      docker:
        image: resolwebio/wgbs:1.2.0
  data_name: "{{ reads|sample_name|default('?') }}"
  version: 2.0.0
  type: data:alignment:bam:walt
  category: Align
  flow_collection: sample
  persistence: CACHED
  description: |
    WALT (Wildcard ALignment Tool) is a read mapping program for bisulfite sequencing in DNA
    methylation studies.
  input:
    - name: genome
      label: Reference genome
      type: data:genome:fasta
    - name: reads
      label: Reads
      type: data:reads:fastq
    - name: rm_dup
      label: Remove duplicates
      type: basic:boolean
      default: true
    - name: mismatch
      label: Maximum allowed mismatches
      type: basic:integer
      required: false
    - name: number
      label: Number of reads to map in one loop
      type: basic:integer
      required: false
      description: |
        Sets the number of reads to mapping in each loop. Larger number results in program taking
        more memory. This is especially evident in paired-end mapping.
  output:
    - name: bam
      label: Alignment file (BAM)
      type: basic:file
      description: |
        Position sorted alignment in .bam format
    - name: bai
      label: Index BAI
      type: basic:file
    - name: stats
      label: Statistics
      type: basic:file
    - name: bigwig
      label: BigWig file
      type: basic:file
      required: false
    - name: mr
      label: Alignment file (MR)
      type: basic:file
      description: |
        Position sorted alignment in .mr format.
    - name: unmapped
      label: Unmapped reads
      type: basic:file
      required: false
    - name: species
      label: Species
      type: basic:string
    - name: build
      label: Build
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      NAME=`basename {{ reads.fastq.0.file }} .fastq.gz`
      GENOME_NAME=`basename {{ genome.fasta.file }} .fasta`
      INDEX={{genome.index_walt.dir}}/"${GENOME_NAME}.dbindex"

      FW_READS=()
      RW_READS=()

      {% for r in reads.fastq %}
        FW_READS+=({{ r.file }})
      {% endfor %}

      cat "${FW_READS[@]}" > fw_reads.fastq.gz
      gunzip fw_reads.fastq.gz

      re-progress 0.2

      {% if reads|type|subtype('data:reads:fastq:paired:') %}
        {% for r in reads.fastq2 %}
          RW_READS+=({{ r.file }})
        {% endfor %}
        cat "${RW_READS[@]}" > rw_reads.fastq.gz
        gunzip rw_reads.fastq.gz
      {% endif %}

      {% if reads|type|subtype('data:reads:fastq:single:') %}
        walt \
          -reads fw_reads.fastq \
          -index "${INDEX}" \
          {% if mismatch is defined %}-mismatch {{ mismatch }}{% endif %} \
          {% if number %}-number {{ number }}{% endif %} \
          -thread {{requirements.resources.cores}} \
          -output "${NAME}.sam" \
          -u
        re-checkrc "WALT alignment failed."
        re-progress 0.7
      {% else %}
        walt \
          -reads1 fw_reads.fastq \
          -reads2 rw_reads.fastq \
          -index "${INDEX}" \
          {% if mismatch is defined %}-mismatch {{ mismatch }}{% endif %} \
          {% if number %}-number {{ number }}{% endif %} \
          -thread {{requirements.resources.cores}} \
          -output "${NAME}.sam" \
          -u
        re-checkrc "WALT alignment failed."
        re-progress 0.7
      {% endif %}

      samtools view -b "${NAME}.sam" -o "${NAME}.bam"

      {% if reads|type|subtype('data:reads:fastq:single:') %}
        samtools view "${NAME}.bam" -F 0x4 -o "${NAME}_mapped.bam"
        samtools view "${NAME}.bam" -f 0x4 -o "${NAME}_unmapped.bam"
      {% else %}
        samtools view "${NAME}.bam" -f 0x2 -o "${NAME}_mapped.bam"
        samtools view "${NAME}.bam" -F 0x2 -o "${NAME}_unmapped.bam"
      {% endif %}

      samtools sort \
            -@ {{ requirements.resources.cores }} \
            -m {{ (requirements.resources.memory * 1024 * 1024 / requirements.resources.cores * 0.8) | int }} \
            -o "${NAME}_sorted.bam" \
            "${NAME}_mapped.bam"
      re-checkrc "Samtools sort command failed."
      
      samtools index "${NAME}_sorted.bam" "${NAME}_sorted.bam.bai"
      re-checkrc "Samtools index command failed."

      to-mr -o "${NAME}.mr" -m general "${NAME}_mapped.bam"
      re-checkrc "Conversion of bam to mr failed."

      LC_ALL=C \
      sort \
        -k 1,1 -k 2,2n -k 3,3n -k 6,6 \
        -S{{ requirements.resources.memory }}M \
        -o "${NAME}_sorted.mr" \
        "${NAME}.mr"
      re-progress 0.8

      {% if rm_dup %}
        duplicate-remover -o "${NAME}.mr" "${NAME}_sorted.mr"
        re-checkrc "Removing duplicates failed."
      {% else %}
        mv "${NAME}_sorted.mr" "${NAME}.mr"
      {% endif %}

      pigz "${NAME}.mr"
      re-progress 0.9

      mv "${NAME}.sam.mapstats" "${NAME}_report.txt"

      re-save-file bam "${NAME}_sorted.bam"
      re-save-file bai "${NAME}_sorted.bam.bai"
      re-save-file unmapped "${NAME}_unmapped.bam"
      re-save-file mr "${NAME}.mr.gz"
      re-save-file stats "${NAME}_report.txt"
      re-save species {{ genome.species }}
      re-save build {{ genome.build }}
      bamtobigwig.sh "${NAME}_sorted.bam" {{ genome.species }} {{ requirements.resources.cores }} 
