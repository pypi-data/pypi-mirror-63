# coding: utf-8

"""
    Flip API

    Flip  # noqa: E501

    The version of the OpenAPI document: 3.1
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_flip.configuration import Configuration


class CreateVideoBody(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source_url': 'str',
        'profiles': 'str',
        'payload': 'str',
        'pipeline': 'str',
        'subtitle_files': 'list[str]',
        'extra_files': 'dict(str, list[str])',
        'extra_variables': 'dict(str, str)',
        'path_format': 'str',
        'clip_end': 'str',
        'clip_length': 'str',
        'clip_offset': 'str',
        'starting_timecode': 'str',
        'store_id': 'str'
    }

    attribute_map = {
        'source_url': 'source_url',
        'profiles': 'profiles',
        'payload': 'payload',
        'pipeline': 'pipeline',
        'subtitle_files': 'subtitle_files',
        'extra_files': 'extra_files',
        'extra_variables': 'extra_variables',
        'path_format': 'path_format',
        'clip_end': 'clip_end',
        'clip_length': 'clip_length',
        'clip_offset': 'clip_offset',
        'starting_timecode': 'starting_timecode',
        'store_id': 'store_id'
    }

    def __init__(self, source_url=None, profiles=None, payload=None, pipeline=None, subtitle_files=None, extra_files=None, extra_variables=None, path_format=None, clip_end=None, clip_length=None, clip_offset=None, starting_timecode=None, store_id=None, local_vars_configuration=None):  # noqa: E501
        """CreateVideoBody - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._source_url = None
        self._profiles = None
        self._payload = None
        self._pipeline = None
        self._subtitle_files = None
        self._extra_files = None
        self._extra_variables = None
        self._path_format = None
        self._clip_end = None
        self._clip_length = None
        self._clip_offset = None
        self._starting_timecode = None
        self._store_id = None
        self.discriminator = None

        if source_url is not None:
            self.source_url = source_url
        if profiles is not None:
            self.profiles = profiles
        if payload is not None:
            self.payload = payload
        if pipeline is not None:
            self.pipeline = pipeline
        if subtitle_files is not None:
            self.subtitle_files = subtitle_files
        if extra_files is not None:
            self.extra_files = extra_files
        if extra_variables is not None:
            self.extra_variables = extra_variables
        if path_format is not None:
            self.path_format = path_format
        if clip_end is not None:
            self.clip_end = clip_end
        if clip_length is not None:
            self.clip_length = clip_length
        if clip_offset is not None:
            self.clip_offset = clip_offset
        if starting_timecode is not None:
            self.starting_timecode = starting_timecode
        if store_id is not None:
            self.store_id = store_id

    @property
    def source_url(self):
        """Gets the source_url of this CreateVideoBody.  # noqa: E501

        An URL pointing to a source file.  # noqa: E501

        :return: The source_url of this CreateVideoBody.  # noqa: E501
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this CreateVideoBody.

        An URL pointing to a source file.  # noqa: E501

        :param source_url: The source_url of this CreateVideoBody.  # noqa: E501
        :type: str
        """

        self._source_url = source_url

    @property
    def profiles(self):
        """Gets the profiles of this CreateVideoBody.  # noqa: E501

        Comma-separated list of profile names or IDs to be used during encoding. Alternatively, specify none so no encodings are created yet.  # noqa: E501

        :return: The profiles of this CreateVideoBody.  # noqa: E501
        :rtype: str
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this CreateVideoBody.

        Comma-separated list of profile names or IDs to be used during encoding. Alternatively, specify none so no encodings are created yet.  # noqa: E501

        :param profiles: The profiles of this CreateVideoBody.  # noqa: E501
        :type: str
        """

        self._profiles = profiles

    @property
    def payload(self):
        """Gets the payload of this CreateVideoBody.  # noqa: E501

        Arbitrary string stored along the Video object.  # noqa: E501

        :return: The payload of this CreateVideoBody.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this CreateVideoBody.

        Arbitrary string stored along the Video object.  # noqa: E501

        :param payload: The payload of this CreateVideoBody.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def pipeline(self):
        """Gets the pipeline of this CreateVideoBody.  # noqa: E501

        String-encoded JSON describing profiles pipeline.  # noqa: E501

        :return: The pipeline of this CreateVideoBody.  # noqa: E501
        :rtype: str
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline):
        """Sets the pipeline of this CreateVideoBody.

        String-encoded JSON describing profiles pipeline.  # noqa: E501

        :param pipeline: The pipeline of this CreateVideoBody.  # noqa: E501
        :type: str
        """

        self._pipeline = pipeline

    @property
    def subtitle_files(self):
        """Gets the subtitle_files of this CreateVideoBody.  # noqa: E501

        A list of urls pointing to remote subtitle files.  # noqa: E501

        :return: The subtitle_files of this CreateVideoBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._subtitle_files

    @subtitle_files.setter
    def subtitle_files(self, subtitle_files):
        """Sets the subtitle_files of this CreateVideoBody.

        A list of urls pointing to remote subtitle files.  # noqa: E501

        :param subtitle_files: The subtitle_files of this CreateVideoBody.  # noqa: E501
        :type: list[str]
        """

        self._subtitle_files = subtitle_files

    @property
    def extra_files(self):
        """Gets the extra_files of this CreateVideoBody.  # noqa: E501


        :return: The extra_files of this CreateVideoBody.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._extra_files

    @extra_files.setter
    def extra_files(self, extra_files):
        """Sets the extra_files of this CreateVideoBody.


        :param extra_files: The extra_files of this CreateVideoBody.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._extra_files = extra_files

    @property
    def extra_variables(self):
        """Gets the extra_variables of this CreateVideoBody.  # noqa: E501


        :return: The extra_variables of this CreateVideoBody.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extra_variables

    @extra_variables.setter
    def extra_variables(self, extra_variables):
        """Sets the extra_variables of this CreateVideoBody.


        :param extra_variables: The extra_variables of this CreateVideoBody.  # noqa: E501
        :type: dict(str, str)
        """

        self._extra_variables = extra_variables

    @property
    def path_format(self):
        """Gets the path_format of this CreateVideoBody.  # noqa: E501


        :return: The path_format of this CreateVideoBody.  # noqa: E501
        :rtype: str
        """
        return self._path_format

    @path_format.setter
    def path_format(self, path_format):
        """Sets the path_format of this CreateVideoBody.


        :param path_format: The path_format of this CreateVideoBody.  # noqa: E501
        :type: str
        """

        self._path_format = path_format

    @property
    def clip_end(self):
        """Gets the clip_end of this CreateVideoBody.  # noqa: E501

        Clip ends at a specific time (timecode).  # noqa: E501

        :return: The clip_end of this CreateVideoBody.  # noqa: E501
        :rtype: str
        """
        return self._clip_end

    @clip_end.setter
    def clip_end(self, clip_end):
        """Sets the clip_end of this CreateVideoBody.

        Clip ends at a specific time (timecode).  # noqa: E501

        :param clip_end: The clip_end of this CreateVideoBody.  # noqa: E501
        :type: str
        """

        self._clip_end = clip_end

    @property
    def clip_length(self):
        """Gets the clip_length of this CreateVideoBody.  # noqa: E501

        A clip’s duration.  # noqa: E501

        :return: The clip_length of this CreateVideoBody.  # noqa: E501
        :rtype: str
        """
        return self._clip_length

    @clip_length.setter
    def clip_length(self, clip_length):
        """Sets the clip_length of this CreateVideoBody.

        A clip’s duration.  # noqa: E501

        :param clip_length: The clip_length of this CreateVideoBody.  # noqa: E501
        :type: str
        """

        self._clip_length = clip_length

    @property
    def clip_offset(self):
        """Gets the clip_offset of this CreateVideoBody.  # noqa: E501

        Clip starts at a specific offset.  # noqa: E501

        :return: The clip_offset of this CreateVideoBody.  # noqa: E501
        :rtype: str
        """
        return self._clip_offset

    @clip_offset.setter
    def clip_offset(self, clip_offset):
        """Sets the clip_offset of this CreateVideoBody.

        Clip starts at a specific offset.  # noqa: E501

        :param clip_offset: The clip_offset of this CreateVideoBody.  # noqa: E501
        :type: str
        """

        self._clip_offset = clip_offset

    @property
    def starting_timecode(self):
        """Gets the starting_timecode of this CreateVideoBody.  # noqa: E501


        :return: The starting_timecode of this CreateVideoBody.  # noqa: E501
        :rtype: str
        """
        return self._starting_timecode

    @starting_timecode.setter
    def starting_timecode(self, starting_timecode):
        """Sets the starting_timecode of this CreateVideoBody.


        :param starting_timecode: The starting_timecode of this CreateVideoBody.  # noqa: E501
        :type: str
        """

        self._starting_timecode = starting_timecode

    @property
    def store_id(self):
        """Gets the store_id of this CreateVideoBody.  # noqa: E501

        An individual store_id for this video processing. If provided will replace store_id from cloud factory but must match underlying cloud provider and region.  # noqa: E501

        :return: The store_id of this CreateVideoBody.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this CreateVideoBody.

        An individual store_id for this video processing. If provided will replace store_id from cloud factory but must match underlying cloud provider and region.  # noqa: E501

        :param store_id: The store_id of this CreateVideoBody.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateVideoBody):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateVideoBody):
            return True

        return self.to_dict() != other.to_dict()
