# coding: utf-8

"""
    Flip API

    Flip  # noqa: E501

    The version of the OpenAPI document: 3.1
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_flip.configuration import Configuration


class Profile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'advanced_fps_conversion': 'str',
        'aspect_mode': 'str',
        'aspect_ratio': 'str',
        'audio_bitrate': 'int',
        'audio_channels': 'int',
        'audio_channels_layout': 'str',
        'audio_channels_per_track': 'int',
        'audio_codec': 'str',
        'audio_format': 'str',
        'audio_map': 'str',
        'audio_pid': 'str',
        'audio_profile': 'str',
        'audio_sample_rate': 'int',
        'audio_stream_id': 'int',
        'audio_streams': 'int',
        'avcintra_class': 'str',
        'buffer_size': 'float',
        'buffer_size_in_packets': 'str',
        'bumpers': 'list[str]',
        'byte_range_requests': 'bool',
        'pixel_format': 'str',
        'clip_end': 'str',
        'clip_length': 'str',
        'clip_offset': 'str',
        'closed_captions': 'str',
        'codec_preset': 'str',
        'color_metadata': 'bool',
        'created_at': 'str',
        'crop_input_bottom': 'str',
        'crop_input_height': 'str',
        'crop_input_left': 'str',
        'crop_input_right': 'str',
        'crop_input_top': 'str',
        'crop_input_width': 'float',
        'dash_profile': 'str',
        'deinterlace': 'str',
        'deinterlace_frames': 'str',
        'description': 'str',
        'dnxhd_type': 'str',
        'encryption': 'bool',
        'extname': 'str',
        'fps': 'float',
        'frame_count': 'int',
        'frame_interval': 'str',
        'frame_offsets': 'str',
        'h264_level': 'str',
        'h264_profile': 'str',
        'h264_tune': 'str',
        'height': 'int',
        'id': 'str',
        'imx_type': 'str',
        'inputs': 'object',
        'interlace': 'str',
        'keyframe_interval': 'int',
        'keyframe_rate': 'float',
        'lang': 'str',
        'max_rate': 'int',
        'merge_audio_streams': 'str',
        'mute_audio_tracks': 'bool',
        'name': 'str',
        'outputs': 'object',
        'outputs_path_format': 'str',
        'playlist_type': 'str',
        'pmt_pid': 'str',
        'preset_name': 'str',
        'prores_format': 'str',
        'segment_time': 'int',
        'stack': 'str',
        'starting_timecode': 'str',
        'sws_flags': 'str',
        'telestream_block_size': 'str',
        'telestream_blur_scaler': 'float',
        'telestream_cost_scaler': 'float',
        'telestream_search_length_scaler': 'int',
        'telestream_subpel_mode': 'bool',
        'time_code': 'str',
        'title': 'str',
        'trailers': 'list[str]',
        'transport_rate': 'str',
        'ts_pids': 'str',
        'updated_at': 'str',
        'upscale': 'bool',
        'use_editlist': 'bool',
        'variants': 'str',
        'video_bitrate': 'int',
        'video_pid': 'str',
        'watermark_bottom': 'str',
        'watermark_bumpers': 'bool',
        'watermark_height': 'str',
        'watermark_left': 'str',
        'watermark_right': 'str',
        'watermark_top': 'str',
        'watermark_trailers': 'bool',
        'watermark_url': 'str',
        'watermark_width': 'str',
        'width': 'int',
        'x264_options': 'str',
        'x265_options': 'str',
        'xdcam_format': 'str',
        'tachyon_allow_remove_pulldown': 'bool',
        'tachyon_enable_post_pulldown_filter': 'bool',
        'tachyon_media_hint_is_cartoon': 'bool',
        'tachyon_media_hint_has_chroma_noise': 'bool',
        'tachyon_more_sensitive_remove_pulldown': 'bool',
        'tachyon_allow_add_standard_pd': 'bool',
        'tachyon_allow_add_2_2pd': 'bool',
        'tachyon_allow_add_4_4pd': 'bool',
        'tachyon_allow_add_4_6pd': 'bool',
        'tachyon_allow_add_euro_pd': 'bool',
        'tachyon_allow_add_adaptive_pd': 'bool',
        'tachyon_motion_amount': 'str',
        'tachyon_fallback_size': 'str',
        'tachyon_mblock_size': 'str',
        'tachyon_cut_detection_sensitivity': 'float',
        'eac3_evolution_enable': 'bool',
        'eac3_bitstream_mode': 'str',
        'eac3_ninety_degree_phase_shift': 'bool',
        'eac3_three_decibel_attenuation': 'bool',
        'eac3_enable_lfe_low_pass_filter': 'bool',
        'eac3_analog_to_digital_converter_type': 'str',
        'eac3_stereo_downmix_preference': 'str',
        'eac3_lt_rt_center_mix_level': 'str',
        'eac3_lt_rt_surround_mix_level': 'str',
        'eac3_lo_ro_center_mix_level': 'str',
        'eac3_lo_ro_surround_mix_level': 'str',
        'eac3_surround_ex_mode': 'str',
        'eac3_drc_line_mode_profile': 'str',
        'eac3_drc_rf_mode_profile': 'str',
        'eac3_dialog_normalization': 'int',
        'eac3_room_type': 'str',
        'eac3_mixing_level': 'int',
        'eac3_copyright_protected': 'bool',
        'eac3_original_bitstream': 'bool'
    }

    attribute_map = {
        'advanced_fps_conversion': 'advanced_fps_conversion',
        'aspect_mode': 'aspect_mode',
        'aspect_ratio': 'aspect_ratio',
        'audio_bitrate': 'audio_bitrate',
        'audio_channels': 'audio_channels',
        'audio_channels_layout': 'audio_channels_layout',
        'audio_channels_per_track': 'audio_channels_per_track',
        'audio_codec': 'audio_codec',
        'audio_format': 'audio_format',
        'audio_map': 'audio_map',
        'audio_pid': 'audio_pid',
        'audio_profile': 'audio_profile',
        'audio_sample_rate': 'audio_sample_rate',
        'audio_stream_id': 'audio_stream_id',
        'audio_streams': 'audio_streams',
        'avcintra_class': 'avcintra_class',
        'buffer_size': 'buffer_size',
        'buffer_size_in_packets': 'buffer_size_in_packets',
        'bumpers': 'bumpers',
        'byte_range_requests': 'byte_range_requests',
        'pixel_format': 'pixel_format',
        'clip_end': 'clip_end',
        'clip_length': 'clip_length',
        'clip_offset': 'clip_offset',
        'closed_captions': 'closed_captions',
        'codec_preset': 'codec_preset',
        'color_metadata': 'color_metadata',
        'created_at': 'created_at',
        'crop_input_bottom': 'crop_input_bottom',
        'crop_input_height': 'crop_input_height',
        'crop_input_left': 'crop_input_left',
        'crop_input_right': 'crop_input_right',
        'crop_input_top': 'crop_input_top',
        'crop_input_width': 'crop_input_width',
        'dash_profile': 'dash_profile',
        'deinterlace': 'deinterlace',
        'deinterlace_frames': 'deinterlace_frames',
        'description': 'description',
        'dnxhd_type': 'dnxhd_type',
        'encryption': 'encryption',
        'extname': 'extname',
        'fps': 'fps',
        'frame_count': 'frame_count',
        'frame_interval': 'frame_interval',
        'frame_offsets': 'frame_offsets',
        'h264_level': 'h264_level',
        'h264_profile': 'h264_profile',
        'h264_tune': 'h264_tune',
        'height': 'height',
        'id': 'id',
        'imx_type': 'imx_type',
        'inputs': 'inputs',
        'interlace': 'interlace',
        'keyframe_interval': 'keyframe_interval',
        'keyframe_rate': 'keyframe_rate',
        'lang': 'lang',
        'max_rate': 'max_rate',
        'merge_audio_streams': 'merge_audio_streams',
        'mute_audio_tracks': 'mute_audio_tracks',
        'name': 'name',
        'outputs': 'outputs',
        'outputs_path_format': 'outputs_path_format',
        'playlist_type': 'playlist_type',
        'pmt_pid': 'pmt_pid',
        'preset_name': 'preset_name',
        'prores_format': 'prores_format',
        'segment_time': 'segment_time',
        'stack': 'stack',
        'starting_timecode': 'starting_timecode',
        'sws_flags': 'sws_flags',
        'telestream_block_size': 'telestream_block_size',
        'telestream_blur_scaler': 'telestream_blur_scaler',
        'telestream_cost_scaler': 'telestream_cost_scaler',
        'telestream_search_length_scaler': 'telestream_search_length_scaler',
        'telestream_subpel_mode': 'telestream_subpel_mode',
        'time_code': 'time_code',
        'title': 'title',
        'trailers': 'trailers',
        'transport_rate': 'transport_rate',
        'ts_pids': 'ts_pids',
        'updated_at': 'updated_at',
        'upscale': 'upscale',
        'use_editlist': 'use_editlist',
        'variants': 'variants',
        'video_bitrate': 'video_bitrate',
        'video_pid': 'video_pid',
        'watermark_bottom': 'watermark_bottom',
        'watermark_bumpers': 'watermark_bumpers',
        'watermark_height': 'watermark_height',
        'watermark_left': 'watermark_left',
        'watermark_right': 'watermark_right',
        'watermark_top': 'watermark_top',
        'watermark_trailers': 'watermark_trailers',
        'watermark_url': 'watermark_url',
        'watermark_width': 'watermark_width',
        'width': 'width',
        'x264_options': 'x264_options',
        'x265_options': 'x265_options',
        'xdcam_format': 'xdcam_format',
        'tachyon_allow_remove_pulldown': 'tachyon_allow_remove_pulldown',
        'tachyon_enable_post_pulldown_filter': 'tachyon_enable_post_pulldown_filter',
        'tachyon_media_hint_is_cartoon': 'tachyon_media_hint_is_cartoon',
        'tachyon_media_hint_has_chroma_noise': 'tachyon_media_hint_has_chroma_noise',
        'tachyon_more_sensitive_remove_pulldown': 'tachyon_more_sensitive_remove_pulldown',
        'tachyon_allow_add_standard_pd': 'tachyon_allow_add_standard_pd',
        'tachyon_allow_add_2_2pd': 'tachyon_allow_add_2_2pd',
        'tachyon_allow_add_4_4pd': 'tachyon_allow_add_4_4pd',
        'tachyon_allow_add_4_6pd': 'tachyon_allow_add_4_6pd',
        'tachyon_allow_add_euro_pd': 'tachyon_allow_add_euro_pd',
        'tachyon_allow_add_adaptive_pd': 'tachyon_allow_add_adaptive_pd',
        'tachyon_motion_amount': 'tachyon_motion_amount',
        'tachyon_fallback_size': 'tachyon_fallback_size',
        'tachyon_mblock_size': 'tachyon_mblock_size',
        'tachyon_cut_detection_sensitivity': 'tachyon_cut_detection_sensitivity',
        'eac3_evolution_enable': 'eac3_evolution_enable',
        'eac3_bitstream_mode': 'eac3_bitstream_mode',
        'eac3_ninety_degree_phase_shift': 'eac3_ninety_degree_phase_shift',
        'eac3_three_decibel_attenuation': 'eac3_three_decibel_attenuation',
        'eac3_enable_lfe_low_pass_filter': 'eac3_enable_lfe_low_pass_filter',
        'eac3_analog_to_digital_converter_type': 'eac3_analog_to_digital_converter_type',
        'eac3_stereo_downmix_preference': 'eac3_stereo_downmix_preference',
        'eac3_lt_rt_center_mix_level': 'eac3_lt_rt_center_mix_level',
        'eac3_lt_rt_surround_mix_level': 'eac3_lt_rt_surround_mix_level',
        'eac3_lo_ro_center_mix_level': 'eac3_lo_ro_center_mix_level',
        'eac3_lo_ro_surround_mix_level': 'eac3_lo_ro_surround_mix_level',
        'eac3_surround_ex_mode': 'eac3_surround_ex_mode',
        'eac3_drc_line_mode_profile': 'eac3_drc_line_mode_profile',
        'eac3_drc_rf_mode_profile': 'eac3_drc_rf_mode_profile',
        'eac3_dialog_normalization': 'eac3_dialog_normalization',
        'eac3_room_type': 'eac3_room_type',
        'eac3_mixing_level': 'eac3_mixing_level',
        'eac3_copyright_protected': 'eac3_copyright_protected',
        'eac3_original_bitstream': 'eac3_original_bitstream'
    }

    def __init__(self, advanced_fps_conversion=None, aspect_mode=None, aspect_ratio=None, audio_bitrate=None, audio_channels=None, audio_channels_layout=None, audio_channels_per_track=None, audio_codec=None, audio_format=None, audio_map=None, audio_pid=None, audio_profile=None, audio_sample_rate=None, audio_stream_id=None, audio_streams=None, avcintra_class=None, buffer_size=None, buffer_size_in_packets=None, bumpers=None, byte_range_requests=None, pixel_format=None, clip_end=None, clip_length=None, clip_offset=None, closed_captions=None, codec_preset=None, color_metadata=None, created_at=None, crop_input_bottom=None, crop_input_height=None, crop_input_left=None, crop_input_right=None, crop_input_top=None, crop_input_width=None, dash_profile=None, deinterlace=None, deinterlace_frames=None, description=None, dnxhd_type=None, encryption=None, extname=None, fps=None, frame_count=None, frame_interval=None, frame_offsets=None, h264_level=None, h264_profile=None, h264_tune=None, height=None, id=None, imx_type=None, inputs=None, interlace=None, keyframe_interval=None, keyframe_rate=None, lang=None, max_rate=None, merge_audio_streams=None, mute_audio_tracks=None, name=None, outputs=None, outputs_path_format=None, playlist_type=None, pmt_pid=None, preset_name=None, prores_format=None, segment_time=None, stack=None, starting_timecode=None, sws_flags=None, telestream_block_size=None, telestream_blur_scaler=None, telestream_cost_scaler=None, telestream_search_length_scaler=None, telestream_subpel_mode=None, time_code=None, title=None, trailers=None, transport_rate=None, ts_pids=None, updated_at=None, upscale=None, use_editlist=None, variants=None, video_bitrate=None, video_pid=None, watermark_bottom=None, watermark_bumpers=None, watermark_height=None, watermark_left=None, watermark_right=None, watermark_top=None, watermark_trailers=None, watermark_url=None, watermark_width=None, width=None, x264_options=None, x265_options=None, xdcam_format=None, tachyon_allow_remove_pulldown=None, tachyon_enable_post_pulldown_filter=None, tachyon_media_hint_is_cartoon=None, tachyon_media_hint_has_chroma_noise=None, tachyon_more_sensitive_remove_pulldown=None, tachyon_allow_add_standard_pd=None, tachyon_allow_add_2_2pd=None, tachyon_allow_add_4_4pd=None, tachyon_allow_add_4_6pd=None, tachyon_allow_add_euro_pd=None, tachyon_allow_add_adaptive_pd=None, tachyon_motion_amount=None, tachyon_fallback_size=None, tachyon_mblock_size=None, tachyon_cut_detection_sensitivity=None, eac3_evolution_enable=None, eac3_bitstream_mode=None, eac3_ninety_degree_phase_shift=None, eac3_three_decibel_attenuation=None, eac3_enable_lfe_low_pass_filter=None, eac3_analog_to_digital_converter_type=None, eac3_stereo_downmix_preference=None, eac3_lt_rt_center_mix_level=None, eac3_lt_rt_surround_mix_level=None, eac3_lo_ro_center_mix_level=None, eac3_lo_ro_surround_mix_level=None, eac3_surround_ex_mode=None, eac3_drc_line_mode_profile=None, eac3_drc_rf_mode_profile=None, eac3_dialog_normalization=None, eac3_room_type=None, eac3_mixing_level=None, eac3_copyright_protected=None, eac3_original_bitstream=None, local_vars_configuration=None):  # noqa: E501
        """Profile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._advanced_fps_conversion = None
        self._aspect_mode = None
        self._aspect_ratio = None
        self._audio_bitrate = None
        self._audio_channels = None
        self._audio_channels_layout = None
        self._audio_channels_per_track = None
        self._audio_codec = None
        self._audio_format = None
        self._audio_map = None
        self._audio_pid = None
        self._audio_profile = None
        self._audio_sample_rate = None
        self._audio_stream_id = None
        self._audio_streams = None
        self._avcintra_class = None
        self._buffer_size = None
        self._buffer_size_in_packets = None
        self._bumpers = None
        self._byte_range_requests = None
        self._pixel_format = None
        self._clip_end = None
        self._clip_length = None
        self._clip_offset = None
        self._closed_captions = None
        self._codec_preset = None
        self._color_metadata = None
        self._created_at = None
        self._crop_input_bottom = None
        self._crop_input_height = None
        self._crop_input_left = None
        self._crop_input_right = None
        self._crop_input_top = None
        self._crop_input_width = None
        self._dash_profile = None
        self._deinterlace = None
        self._deinterlace_frames = None
        self._description = None
        self._dnxhd_type = None
        self._encryption = None
        self._extname = None
        self._fps = None
        self._frame_count = None
        self._frame_interval = None
        self._frame_offsets = None
        self._h264_level = None
        self._h264_profile = None
        self._h264_tune = None
        self._height = None
        self._id = None
        self._imx_type = None
        self._inputs = None
        self._interlace = None
        self._keyframe_interval = None
        self._keyframe_rate = None
        self._lang = None
        self._max_rate = None
        self._merge_audio_streams = None
        self._mute_audio_tracks = None
        self._name = None
        self._outputs = None
        self._outputs_path_format = None
        self._playlist_type = None
        self._pmt_pid = None
        self._preset_name = None
        self._prores_format = None
        self._segment_time = None
        self._stack = None
        self._starting_timecode = None
        self._sws_flags = None
        self._telestream_block_size = None
        self._telestream_blur_scaler = None
        self._telestream_cost_scaler = None
        self._telestream_search_length_scaler = None
        self._telestream_subpel_mode = None
        self._time_code = None
        self._title = None
        self._trailers = None
        self._transport_rate = None
        self._ts_pids = None
        self._updated_at = None
        self._upscale = None
        self._use_editlist = None
        self._variants = None
        self._video_bitrate = None
        self._video_pid = None
        self._watermark_bottom = None
        self._watermark_bumpers = None
        self._watermark_height = None
        self._watermark_left = None
        self._watermark_right = None
        self._watermark_top = None
        self._watermark_trailers = None
        self._watermark_url = None
        self._watermark_width = None
        self._width = None
        self._x264_options = None
        self._x265_options = None
        self._xdcam_format = None
        self._tachyon_allow_remove_pulldown = None
        self._tachyon_enable_post_pulldown_filter = None
        self._tachyon_media_hint_is_cartoon = None
        self._tachyon_media_hint_has_chroma_noise = None
        self._tachyon_more_sensitive_remove_pulldown = None
        self._tachyon_allow_add_standard_pd = None
        self._tachyon_allow_add_2_2pd = None
        self._tachyon_allow_add_4_4pd = None
        self._tachyon_allow_add_4_6pd = None
        self._tachyon_allow_add_euro_pd = None
        self._tachyon_allow_add_adaptive_pd = None
        self._tachyon_motion_amount = None
        self._tachyon_fallback_size = None
        self._tachyon_mblock_size = None
        self._tachyon_cut_detection_sensitivity = None
        self._eac3_evolution_enable = None
        self._eac3_bitstream_mode = None
        self._eac3_ninety_degree_phase_shift = None
        self._eac3_three_decibel_attenuation = None
        self._eac3_enable_lfe_low_pass_filter = None
        self._eac3_analog_to_digital_converter_type = None
        self._eac3_stereo_downmix_preference = None
        self._eac3_lt_rt_center_mix_level = None
        self._eac3_lt_rt_surround_mix_level = None
        self._eac3_lo_ro_center_mix_level = None
        self._eac3_lo_ro_surround_mix_level = None
        self._eac3_surround_ex_mode = None
        self._eac3_drc_line_mode_profile = None
        self._eac3_drc_rf_mode_profile = None
        self._eac3_dialog_normalization = None
        self._eac3_room_type = None
        self._eac3_mixing_level = None
        self._eac3_copyright_protected = None
        self._eac3_original_bitstream = None
        self.discriminator = None

        if advanced_fps_conversion is not None:
            self.advanced_fps_conversion = advanced_fps_conversion
        if aspect_mode is not None:
            self.aspect_mode = aspect_mode
        if aspect_ratio is not None:
            self.aspect_ratio = aspect_ratio
        if audio_bitrate is not None:
            self.audio_bitrate = audio_bitrate
        if audio_channels is not None:
            self.audio_channels = audio_channels
        if audio_channels_layout is not None:
            self.audio_channels_layout = audio_channels_layout
        if audio_channels_per_track is not None:
            self.audio_channels_per_track = audio_channels_per_track
        if audio_codec is not None:
            self.audio_codec = audio_codec
        if audio_format is not None:
            self.audio_format = audio_format
        if audio_map is not None:
            self.audio_map = audio_map
        if audio_pid is not None:
            self.audio_pid = audio_pid
        if audio_profile is not None:
            self.audio_profile = audio_profile
        if audio_sample_rate is not None:
            self.audio_sample_rate = audio_sample_rate
        if audio_stream_id is not None:
            self.audio_stream_id = audio_stream_id
        if audio_streams is not None:
            self.audio_streams = audio_streams
        if avcintra_class is not None:
            self.avcintra_class = avcintra_class
        if buffer_size is not None:
            self.buffer_size = buffer_size
        if buffer_size_in_packets is not None:
            self.buffer_size_in_packets = buffer_size_in_packets
        if bumpers is not None:
            self.bumpers = bumpers
        if byte_range_requests is not None:
            self.byte_range_requests = byte_range_requests
        if pixel_format is not None:
            self.pixel_format = pixel_format
        if clip_end is not None:
            self.clip_end = clip_end
        if clip_length is not None:
            self.clip_length = clip_length
        if clip_offset is not None:
            self.clip_offset = clip_offset
        if closed_captions is not None:
            self.closed_captions = closed_captions
        if codec_preset is not None:
            self.codec_preset = codec_preset
        if color_metadata is not None:
            self.color_metadata = color_metadata
        if created_at is not None:
            self.created_at = created_at
        if crop_input_bottom is not None:
            self.crop_input_bottom = crop_input_bottom
        if crop_input_height is not None:
            self.crop_input_height = crop_input_height
        if crop_input_left is not None:
            self.crop_input_left = crop_input_left
        if crop_input_right is not None:
            self.crop_input_right = crop_input_right
        if crop_input_top is not None:
            self.crop_input_top = crop_input_top
        if crop_input_width is not None:
            self.crop_input_width = crop_input_width
        if dash_profile is not None:
            self.dash_profile = dash_profile
        if deinterlace is not None:
            self.deinterlace = deinterlace
        if deinterlace_frames is not None:
            self.deinterlace_frames = deinterlace_frames
        if description is not None:
            self.description = description
        if dnxhd_type is not None:
            self.dnxhd_type = dnxhd_type
        if encryption is not None:
            self.encryption = encryption
        if extname is not None:
            self.extname = extname
        if fps is not None:
            self.fps = fps
        if frame_count is not None:
            self.frame_count = frame_count
        if frame_interval is not None:
            self.frame_interval = frame_interval
        if frame_offsets is not None:
            self.frame_offsets = frame_offsets
        if h264_level is not None:
            self.h264_level = h264_level
        if h264_profile is not None:
            self.h264_profile = h264_profile
        if h264_tune is not None:
            self.h264_tune = h264_tune
        if height is not None:
            self.height = height
        if id is not None:
            self.id = id
        if imx_type is not None:
            self.imx_type = imx_type
        if inputs is not None:
            self.inputs = inputs
        if interlace is not None:
            self.interlace = interlace
        if keyframe_interval is not None:
            self.keyframe_interval = keyframe_interval
        if keyframe_rate is not None:
            self.keyframe_rate = keyframe_rate
        if lang is not None:
            self.lang = lang
        if max_rate is not None:
            self.max_rate = max_rate
        if merge_audio_streams is not None:
            self.merge_audio_streams = merge_audio_streams
        if mute_audio_tracks is not None:
            self.mute_audio_tracks = mute_audio_tracks
        if name is not None:
            self.name = name
        if outputs is not None:
            self.outputs = outputs
        if outputs_path_format is not None:
            self.outputs_path_format = outputs_path_format
        if playlist_type is not None:
            self.playlist_type = playlist_type
        if pmt_pid is not None:
            self.pmt_pid = pmt_pid
        if preset_name is not None:
            self.preset_name = preset_name
        if prores_format is not None:
            self.prores_format = prores_format
        if segment_time is not None:
            self.segment_time = segment_time
        if stack is not None:
            self.stack = stack
        if starting_timecode is not None:
            self.starting_timecode = starting_timecode
        if sws_flags is not None:
            self.sws_flags = sws_flags
        if telestream_block_size is not None:
            self.telestream_block_size = telestream_block_size
        if telestream_blur_scaler is not None:
            self.telestream_blur_scaler = telestream_blur_scaler
        if telestream_cost_scaler is not None:
            self.telestream_cost_scaler = telestream_cost_scaler
        if telestream_search_length_scaler is not None:
            self.telestream_search_length_scaler = telestream_search_length_scaler
        if telestream_subpel_mode is not None:
            self.telestream_subpel_mode = telestream_subpel_mode
        if time_code is not None:
            self.time_code = time_code
        if title is not None:
            self.title = title
        if trailers is not None:
            self.trailers = trailers
        if transport_rate is not None:
            self.transport_rate = transport_rate
        if ts_pids is not None:
            self.ts_pids = ts_pids
        if updated_at is not None:
            self.updated_at = updated_at
        if upscale is not None:
            self.upscale = upscale
        if use_editlist is not None:
            self.use_editlist = use_editlist
        if variants is not None:
            self.variants = variants
        if video_bitrate is not None:
            self.video_bitrate = video_bitrate
        if video_pid is not None:
            self.video_pid = video_pid
        if watermark_bottom is not None:
            self.watermark_bottom = watermark_bottom
        if watermark_bumpers is not None:
            self.watermark_bumpers = watermark_bumpers
        if watermark_height is not None:
            self.watermark_height = watermark_height
        if watermark_left is not None:
            self.watermark_left = watermark_left
        if watermark_right is not None:
            self.watermark_right = watermark_right
        if watermark_top is not None:
            self.watermark_top = watermark_top
        if watermark_trailers is not None:
            self.watermark_trailers = watermark_trailers
        if watermark_url is not None:
            self.watermark_url = watermark_url
        if watermark_width is not None:
            self.watermark_width = watermark_width
        if width is not None:
            self.width = width
        if x264_options is not None:
            self.x264_options = x264_options
        if x265_options is not None:
            self.x265_options = x265_options
        if xdcam_format is not None:
            self.xdcam_format = xdcam_format
        if tachyon_allow_remove_pulldown is not None:
            self.tachyon_allow_remove_pulldown = tachyon_allow_remove_pulldown
        if tachyon_enable_post_pulldown_filter is not None:
            self.tachyon_enable_post_pulldown_filter = tachyon_enable_post_pulldown_filter
        if tachyon_media_hint_is_cartoon is not None:
            self.tachyon_media_hint_is_cartoon = tachyon_media_hint_is_cartoon
        if tachyon_media_hint_has_chroma_noise is not None:
            self.tachyon_media_hint_has_chroma_noise = tachyon_media_hint_has_chroma_noise
        if tachyon_more_sensitive_remove_pulldown is not None:
            self.tachyon_more_sensitive_remove_pulldown = tachyon_more_sensitive_remove_pulldown
        if tachyon_allow_add_standard_pd is not None:
            self.tachyon_allow_add_standard_pd = tachyon_allow_add_standard_pd
        if tachyon_allow_add_2_2pd is not None:
            self.tachyon_allow_add_2_2pd = tachyon_allow_add_2_2pd
        if tachyon_allow_add_4_4pd is not None:
            self.tachyon_allow_add_4_4pd = tachyon_allow_add_4_4pd
        if tachyon_allow_add_4_6pd is not None:
            self.tachyon_allow_add_4_6pd = tachyon_allow_add_4_6pd
        if tachyon_allow_add_euro_pd is not None:
            self.tachyon_allow_add_euro_pd = tachyon_allow_add_euro_pd
        if tachyon_allow_add_adaptive_pd is not None:
            self.tachyon_allow_add_adaptive_pd = tachyon_allow_add_adaptive_pd
        if tachyon_motion_amount is not None:
            self.tachyon_motion_amount = tachyon_motion_amount
        if tachyon_fallback_size is not None:
            self.tachyon_fallback_size = tachyon_fallback_size
        if tachyon_mblock_size is not None:
            self.tachyon_mblock_size = tachyon_mblock_size
        if tachyon_cut_detection_sensitivity is not None:
            self.tachyon_cut_detection_sensitivity = tachyon_cut_detection_sensitivity
        if eac3_evolution_enable is not None:
            self.eac3_evolution_enable = eac3_evolution_enable
        if eac3_bitstream_mode is not None:
            self.eac3_bitstream_mode = eac3_bitstream_mode
        if eac3_ninety_degree_phase_shift is not None:
            self.eac3_ninety_degree_phase_shift = eac3_ninety_degree_phase_shift
        if eac3_three_decibel_attenuation is not None:
            self.eac3_three_decibel_attenuation = eac3_three_decibel_attenuation
        if eac3_enable_lfe_low_pass_filter is not None:
            self.eac3_enable_lfe_low_pass_filter = eac3_enable_lfe_low_pass_filter
        if eac3_analog_to_digital_converter_type is not None:
            self.eac3_analog_to_digital_converter_type = eac3_analog_to_digital_converter_type
        if eac3_stereo_downmix_preference is not None:
            self.eac3_stereo_downmix_preference = eac3_stereo_downmix_preference
        if eac3_lt_rt_center_mix_level is not None:
            self.eac3_lt_rt_center_mix_level = eac3_lt_rt_center_mix_level
        if eac3_lt_rt_surround_mix_level is not None:
            self.eac3_lt_rt_surround_mix_level = eac3_lt_rt_surround_mix_level
        if eac3_lo_ro_center_mix_level is not None:
            self.eac3_lo_ro_center_mix_level = eac3_lo_ro_center_mix_level
        if eac3_lo_ro_surround_mix_level is not None:
            self.eac3_lo_ro_surround_mix_level = eac3_lo_ro_surround_mix_level
        if eac3_surround_ex_mode is not None:
            self.eac3_surround_ex_mode = eac3_surround_ex_mode
        if eac3_drc_line_mode_profile is not None:
            self.eac3_drc_line_mode_profile = eac3_drc_line_mode_profile
        if eac3_drc_rf_mode_profile is not None:
            self.eac3_drc_rf_mode_profile = eac3_drc_rf_mode_profile
        if eac3_dialog_normalization is not None:
            self.eac3_dialog_normalization = eac3_dialog_normalization
        if eac3_room_type is not None:
            self.eac3_room_type = eac3_room_type
        if eac3_mixing_level is not None:
            self.eac3_mixing_level = eac3_mixing_level
        if eac3_copyright_protected is not None:
            self.eac3_copyright_protected = eac3_copyright_protected
        if eac3_original_bitstream is not None:
            self.eac3_original_bitstream = eac3_original_bitstream

    @property
    def advanced_fps_conversion(self):
        """Gets the advanced_fps_conversion of this Profile.  # noqa: E501

        todo  # noqa: E501

        :return: The advanced_fps_conversion of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._advanced_fps_conversion

    @advanced_fps_conversion.setter
    def advanced_fps_conversion(self, advanced_fps_conversion):
        """Sets the advanced_fps_conversion of this Profile.

        todo  # noqa: E501

        :param advanced_fps_conversion: The advanced_fps_conversion of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["telestream", "tachyon"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and advanced_fps_conversion not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `advanced_fps_conversion` ({0}), must be one of {1}"  # noqa: E501
                .format(advanced_fps_conversion, allowed_values)
            )

        self._advanced_fps_conversion = advanced_fps_conversion

    @property
    def aspect_mode(self):
        """Gets the aspect_mode of this Profile.  # noqa: E501

        Specifies an aspect mode for output videos. The following options are available:   - preserve   - constrain   - letterbox   - pad   - fill (crop)   - stretch   - center Default is \"letterbox\".  # noqa: E501

        :return: The aspect_mode of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._aspect_mode

    @aspect_mode.setter
    def aspect_mode(self, aspect_mode):
        """Sets the aspect_mode of this Profile.

        Specifies an aspect mode for output videos. The following options are available:   - preserve   - constrain   - letterbox   - pad   - fill (crop)   - stretch   - center Default is \"letterbox\".  # noqa: E501

        :param aspect_mode: The aspect_mode of this Profile.  # noqa: E501
        :type: str
        """

        self._aspect_mode = aspect_mode

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this Profile.  # noqa: E501

        A display aspect ratio. By default it is not set.  # noqa: E501

        :return: The aspect_ratio of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this Profile.

        A display aspect ratio. By default it is not set.  # noqa: E501

        :param aspect_ratio: The aspect_ratio of this Profile.  # noqa: E501
        :type: str
        """

        self._aspect_ratio = aspect_ratio

    @property
    def audio_bitrate(self):
        """Gets the audio_bitrate of this Profile.  # noqa: E501

        audio bitrate (in bits/s)  # noqa: E501

        :return: The audio_bitrate of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._audio_bitrate

    @audio_bitrate.setter
    def audio_bitrate(self, audio_bitrate):
        """Sets the audio_bitrate of this Profile.

        audio bitrate (in bits/s)  # noqa: E501

        :param audio_bitrate: The audio_bitrate of this Profile.  # noqa: E501
        :type: int
        """

        self._audio_bitrate = audio_bitrate

    @property
    def audio_channels(self):
        """Gets the audio_channels of this Profile.  # noqa: E501

        A number of audio channels. By default it is not set.  # noqa: E501

        :return: The audio_channels of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._audio_channels

    @audio_channels.setter
    def audio_channels(self, audio_channels):
        """Sets the audio_channels of this Profile.

        A number of audio channels. By default it is not set.  # noqa: E501

        :param audio_channels: The audio_channels of this Profile.  # noqa: E501
        :type: int
        """

        self._audio_channels = audio_channels

    @property
    def audio_channels_layout(self):
        """Gets the audio_channels_layout of this Profile.  # noqa: E501

        A channel layout specifies the spatial disposition of the channels in a multi-channel audio stream.  # noqa: E501

        :return: The audio_channels_layout of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._audio_channels_layout

    @audio_channels_layout.setter
    def audio_channels_layout(self, audio_channels_layout):
        """Sets the audio_channels_layout of this Profile.

        A channel layout specifies the spatial disposition of the channels in a multi-channel audio stream.  # noqa: E501

        :param audio_channels_layout: The audio_channels_layout of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["1", "2", "2.1", "3", "3.0(back)", "3.1", "4", "4.1", "quad", "5", "5.0(side)", "5.1(side)", "6", "6.1", "7", "7.1", "mono", "stereo"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and audio_channels_layout not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `audio_channels_layout` ({0}), must be one of {1}"  # noqa: E501
                .format(audio_channels_layout, allowed_values)
            )

        self._audio_channels_layout = audio_channels_layout

    @property
    def audio_channels_per_track(self):
        """Gets the audio_channels_per_track of this Profile.  # noqa: E501

        A number of audio channels per track.  # noqa: E501

        :return: The audio_channels_per_track of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._audio_channels_per_track

    @audio_channels_per_track.setter
    def audio_channels_per_track(self, audio_channels_per_track):
        """Sets the audio_channels_per_track of this Profile.

        A number of audio channels per track.  # noqa: E501

        :param audio_channels_per_track: The audio_channels_per_track of this Profile.  # noqa: E501
        :type: int
        """

        self._audio_channels_per_track = audio_channels_per_track

    @property
    def audio_codec(self):
        """Gets the audio_codec of this Profile.  # noqa: E501

        Audio codec that will be used by the profile. Available codecs are: `libmp3lame`, `libvorbis`, `libfdk_aac`, `dib_ac3, `pcm_s16le`, `mp2`, `ac3`, `eac3`.  # noqa: E501

        :return: The audio_codec of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._audio_codec

    @audio_codec.setter
    def audio_codec(self, audio_codec):
        """Sets the audio_codec of this Profile.

        Audio codec that will be used by the profile. Available codecs are: `libmp3lame`, `libvorbis`, `libfdk_aac`, `dib_ac3, `pcm_s16le`, `mp2`, `ac3`, `eac3`.  # noqa: E501

        :param audio_codec: The audio_codec of this Profile.  # noqa: E501
        :type: str
        """

        self._audio_codec = audio_codec

    @property
    def audio_format(self):
        """Gets the audio_format of this Profile.  # noqa: E501

        Specifies an audio container.  # noqa: E501

        :return: The audio_format of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._audio_format

    @audio_format.setter
    def audio_format(self, audio_format):
        """Sets the audio_format of this Profile.

        Specifies an audio container.  # noqa: E501

        :param audio_format: The audio_format of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["pcm_s24le", "pcm_s16le"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and audio_format not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `audio_format` ({0}), must be one of {1}"  # noqa: E501
                .format(audio_format, allowed_values)
            )

        self._audio_format = audio_format

    @property
    def audio_map(self):
        """Gets the audio_map of this Profile.  # noqa: E501


        :return: The audio_map of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._audio_map

    @audio_map.setter
    def audio_map(self, audio_map):
        """Sets the audio_map of this Profile.


        :param audio_map: The audio_map of this Profile.  # noqa: E501
        :type: str
        """

        self._audio_map = audio_map

    @property
    def audio_pid(self):
        """Gets the audio_pid of this Profile.  # noqa: E501

        Packet identifier used by MPEG formats.  # noqa: E501

        :return: The audio_pid of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._audio_pid

    @audio_pid.setter
    def audio_pid(self, audio_pid):
        """Sets the audio_pid of this Profile.

        Packet identifier used by MPEG formats.  # noqa: E501

        :param audio_pid: The audio_pid of this Profile.  # noqa: E501
        :type: str
        """

        self._audio_pid = audio_pid

    @property
    def audio_profile(self):
        """Gets the audio_profile of this Profile.  # noqa: E501

        Specifies an audio profile.  # noqa: E501

        :return: The audio_profile of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._audio_profile

    @audio_profile.setter
    def audio_profile(self, audio_profile):
        """Sets the audio_profile of this Profile.

        Specifies an audio profile.  # noqa: E501

        :param audio_profile: The audio_profile of this Profile.  # noqa: E501
        :type: str
        """

        self._audio_profile = audio_profile

    @property
    def audio_sample_rate(self):
        """Gets the audio_sample_rate of this Profile.  # noqa: E501

        The number of samples of audio carried per second.  # noqa: E501

        :return: The audio_sample_rate of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._audio_sample_rate

    @audio_sample_rate.setter
    def audio_sample_rate(self, audio_sample_rate):
        """Sets the audio_sample_rate of this Profile.

        The number of samples of audio carried per second.  # noqa: E501

        :param audio_sample_rate: The audio_sample_rate of this Profile.  # noqa: E501
        :type: int
        """

        self._audio_sample_rate = audio_sample_rate

    @property
    def audio_stream_id(self):
        """Gets the audio_stream_id of this Profile.  # noqa: E501


        :return: The audio_stream_id of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._audio_stream_id

    @audio_stream_id.setter
    def audio_stream_id(self, audio_stream_id):
        """Sets the audio_stream_id of this Profile.


        :param audio_stream_id: The audio_stream_id of this Profile.  # noqa: E501
        :type: int
        """

        self._audio_stream_id = audio_stream_id

    @property
    def audio_streams(self):
        """Gets the audio_streams of this Profile.  # noqa: E501

        A number of audio streams.  # noqa: E501

        :return: The audio_streams of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._audio_streams

    @audio_streams.setter
    def audio_streams(self, audio_streams):
        """Sets the audio_streams of this Profile.

        A number of audio streams.  # noqa: E501

        :param audio_streams: The audio_streams of this Profile.  # noqa: E501
        :type: int
        """

        self._audio_streams = audio_streams

    @property
    def avcintra_class(self):
        """Gets the avcintra_class of this Profile.  # noqa: E501

        A class of the AVC-Intra video coding.  # noqa: E501

        :return: The avcintra_class of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._avcintra_class

    @avcintra_class.setter
    def avcintra_class(self, avcintra_class):
        """Sets the avcintra_class of this Profile.

        A class of the AVC-Intra video coding.  # noqa: E501

        :param avcintra_class: The avcintra_class of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["50", "100"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and avcintra_class not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `avcintra_class` ({0}), must be one of {1}"  # noqa: E501
                .format(avcintra_class, allowed_values)
            )

        self._avcintra_class = avcintra_class

    @property
    def buffer_size(self):
        """Gets the buffer_size of this Profile.  # noqa: E501

        Determines the size of the PulseAudio buffer. by default it is not set.  # noqa: E501

        :return: The buffer_size of this Profile.  # noqa: E501
        :rtype: float
        """
        return self._buffer_size

    @buffer_size.setter
    def buffer_size(self, buffer_size):
        """Sets the buffer_size of this Profile.

        Determines the size of the PulseAudio buffer. by default it is not set.  # noqa: E501

        :param buffer_size: The buffer_size of this Profile.  # noqa: E501
        :type: float
        """

        self._buffer_size = buffer_size

    @property
    def buffer_size_in_packets(self):
        """Gets the buffer_size_in_packets of this Profile.  # noqa: E501

        todo  # noqa: E501

        :return: The buffer_size_in_packets of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._buffer_size_in_packets

    @buffer_size_in_packets.setter
    def buffer_size_in_packets(self, buffer_size_in_packets):
        """Sets the buffer_size_in_packets of this Profile.

        todo  # noqa: E501

        :param buffer_size_in_packets: The buffer_size_in_packets of this Profile.  # noqa: E501
        :type: str
        """

        self._buffer_size_in_packets = buffer_size_in_packets

    @property
    def bumpers(self):
        """Gets the bumpers of this Profile.  # noqa: E501


        :return: The bumpers of this Profile.  # noqa: E501
        :rtype: list[str]
        """
        return self._bumpers

    @bumpers.setter
    def bumpers(self, bumpers):
        """Sets the bumpers of this Profile.


        :param bumpers: The bumpers of this Profile.  # noqa: E501
        :type: list[str]
        """

        self._bumpers = bumpers

    @property
    def byte_range_requests(self):
        """Gets the byte_range_requests of this Profile.  # noqa: E501


        :return: The byte_range_requests of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._byte_range_requests

    @byte_range_requests.setter
    def byte_range_requests(self, byte_range_requests):
        """Sets the byte_range_requests of this Profile.


        :param byte_range_requests: The byte_range_requests of this Profile.  # noqa: E501
        :type: bool
        """

        self._byte_range_requests = byte_range_requests

    @property
    def pixel_format(self):
        """Gets the pixel_format of this Profile.  # noqa: E501


        :return: The pixel_format of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._pixel_format

    @pixel_format.setter
    def pixel_format(self, pixel_format):
        """Sets the pixel_format of this Profile.


        :param pixel_format: The pixel_format of this Profile.  # noqa: E501
        :type: str
        """

        self._pixel_format = pixel_format

    @property
    def clip_end(self):
        """Gets the clip_end of this Profile.  # noqa: E501

        Clip ends at a specific time (timecode).  # noqa: E501

        :return: The clip_end of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._clip_end

    @clip_end.setter
    def clip_end(self, clip_end):
        """Sets the clip_end of this Profile.

        Clip ends at a specific time (timecode).  # noqa: E501

        :param clip_end: The clip_end of this Profile.  # noqa: E501
        :type: str
        """

        self._clip_end = clip_end

    @property
    def clip_length(self):
        """Gets the clip_length of this Profile.  # noqa: E501

        A clip’s duration.  # noqa: E501

        :return: The clip_length of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._clip_length

    @clip_length.setter
    def clip_length(self, clip_length):
        """Sets the clip_length of this Profile.

        A clip’s duration.  # noqa: E501

        :param clip_length: The clip_length of this Profile.  # noqa: E501
        :type: str
        """

        self._clip_length = clip_length

    @property
    def clip_offset(self):
        """Gets the clip_offset of this Profile.  # noqa: E501

        Clip starts at a specific offset.  # noqa: E501

        :return: The clip_offset of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._clip_offset

    @clip_offset.setter
    def clip_offset(self, clip_offset):
        """Sets the clip_offset of this Profile.

        Clip starts at a specific offset.  # noqa: E501

        :param clip_offset: The clip_offset of this Profile.  # noqa: E501
        :type: str
        """

        self._clip_offset = clip_offset

    @property
    def closed_captions(self):
        """Gets the closed_captions of this Profile.  # noqa: E501

        One of add (adds captions as a separate streams) or burn (burns captions on video stream using the first subtitle file). By default it is not set.  # noqa: E501

        :return: The closed_captions of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._closed_captions

    @closed_captions.setter
    def closed_captions(self, closed_captions):
        """Sets the closed_captions of this Profile.

        One of add (adds captions as a separate streams) or burn (burns captions on video stream using the first subtitle file). By default it is not set.  # noqa: E501

        :param closed_captions: The closed_captions of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["add", "burn"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and closed_captions not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `closed_captions` ({0}), must be one of {1}"  # noqa: E501
                .format(closed_captions, allowed_values)
            )

        self._closed_captions = closed_captions

    @property
    def codec_preset(self):
        """Gets the codec_preset of this Profile.  # noqa: E501

        Determines a preset that is used by encoders.  # noqa: E501

        :return: The codec_preset of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._codec_preset

    @codec_preset.setter
    def codec_preset(self, codec_preset):
        """Sets the codec_preset of this Profile.

        Determines a preset that is used by encoders.  # noqa: E501

        :param codec_preset: The codec_preset of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ultrafast", "superfast", "veryfast", "faster", "fast", "medium", "slow", "slower", "veryslow", "placebo"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and codec_preset not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `codec_preset` ({0}), must be one of {1}"  # noqa: E501
                .format(codec_preset, allowed_values)
            )

        self._codec_preset = codec_preset

    @property
    def color_metadata(self):
        """Gets the color_metadata of this Profile.  # noqa: E501


        :return: The color_metadata of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._color_metadata

    @color_metadata.setter
    def color_metadata(self, color_metadata):
        """Sets the color_metadata of this Profile.


        :param color_metadata: The color_metadata of this Profile.  # noqa: E501
        :type: bool
        """

        self._color_metadata = color_metadata

    @property
    def created_at(self):
        """Gets the created_at of this Profile.  # noqa: E501

        A date and time when the Profile has been created.  # noqa: E501

        :return: The created_at of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Profile.

        A date and time when the Profile has been created.  # noqa: E501

        :param created_at: The created_at of this Profile.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def crop_input_bottom(self):
        """Gets the crop_input_bottom of this Profile.  # noqa: E501

        Distance (in pixels) from the bottom edge of the screen from which you want your crop to be done.  # noqa: E501

        :return: The crop_input_bottom of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._crop_input_bottom

    @crop_input_bottom.setter
    def crop_input_bottom(self, crop_input_bottom):
        """Sets the crop_input_bottom of this Profile.

        Distance (in pixels) from the bottom edge of the screen from which you want your crop to be done.  # noqa: E501

        :param crop_input_bottom: The crop_input_bottom of this Profile.  # noqa: E501
        :type: str
        """

        self._crop_input_bottom = crop_input_bottom

    @property
    def crop_input_height(self):
        """Gets the crop_input_height of this Profile.  # noqa: E501

        Width of the cropped image in pixels.  # noqa: E501

        :return: The crop_input_height of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._crop_input_height

    @crop_input_height.setter
    def crop_input_height(self, crop_input_height):
        """Sets the crop_input_height of this Profile.

        Width of the cropped image in pixels.  # noqa: E501

        :param crop_input_height: The crop_input_height of this Profile.  # noqa: E501
        :type: str
        """

        self._crop_input_height = crop_input_height

    @property
    def crop_input_left(self):
        """Gets the crop_input_left of this Profile.  # noqa: E501

        Distance (in pixels) from the left edge of the screen from which you want your crop to be done.  # noqa: E501

        :return: The crop_input_left of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._crop_input_left

    @crop_input_left.setter
    def crop_input_left(self, crop_input_left):
        """Sets the crop_input_left of this Profile.

        Distance (in pixels) from the left edge of the screen from which you want your crop to be done.  # noqa: E501

        :param crop_input_left: The crop_input_left of this Profile.  # noqa: E501
        :type: str
        """

        self._crop_input_left = crop_input_left

    @property
    def crop_input_right(self):
        """Gets the crop_input_right of this Profile.  # noqa: E501

        Distance (in pixels) from the right edge of the screen from which you want your crop to be done.  # noqa: E501

        :return: The crop_input_right of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._crop_input_right

    @crop_input_right.setter
    def crop_input_right(self, crop_input_right):
        """Sets the crop_input_right of this Profile.

        Distance (in pixels) from the right edge of the screen from which you want your crop to be done.  # noqa: E501

        :param crop_input_right: The crop_input_right of this Profile.  # noqa: E501
        :type: str
        """

        self._crop_input_right = crop_input_right

    @property
    def crop_input_top(self):
        """Gets the crop_input_top of this Profile.  # noqa: E501

        Distance (in pixels) from the top edge of the screen from which you want your crop to be done.  # noqa: E501

        :return: The crop_input_top of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._crop_input_top

    @crop_input_top.setter
    def crop_input_top(self, crop_input_top):
        """Sets the crop_input_top of this Profile.

        Distance (in pixels) from the top edge of the screen from which you want your crop to be done.  # noqa: E501

        :param crop_input_top: The crop_input_top of this Profile.  # noqa: E501
        :type: str
        """

        self._crop_input_top = crop_input_top

    @property
    def crop_input_width(self):
        """Gets the crop_input_width of this Profile.  # noqa: E501

        Height of the cropped image in pixels.  # noqa: E501

        :return: The crop_input_width of this Profile.  # noqa: E501
        :rtype: float
        """
        return self._crop_input_width

    @crop_input_width.setter
    def crop_input_width(self, crop_input_width):
        """Sets the crop_input_width of this Profile.

        Height of the cropped image in pixels.  # noqa: E501

        :param crop_input_width: The crop_input_width of this Profile.  # noqa: E501
        :type: float
        """

        self._crop_input_width = crop_input_width

    @property
    def dash_profile(self):
        """Gets the dash_profile of this Profile.  # noqa: E501


        :return: The dash_profile of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._dash_profile

    @dash_profile.setter
    def dash_profile(self, dash_profile):
        """Sets the dash_profile of this Profile.


        :param dash_profile: The dash_profile of this Profile.  # noqa: E501
        :type: str
        """

        self._dash_profile = dash_profile

    @property
    def deinterlace(self):
        """Gets the deinterlace of this Profile.  # noqa: E501

        One of `keep_fps` or `double_fps`. By default it is not set.  # noqa: E501

        :return: The deinterlace of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._deinterlace

    @deinterlace.setter
    def deinterlace(self, deinterlace):
        """Sets the deinterlace of this Profile.

        One of `keep_fps` or `double_fps`. By default it is not set.  # noqa: E501

        :param deinterlace: The deinterlace of this Profile.  # noqa: E501
        :type: str
        """

        self._deinterlace = deinterlace

    @property
    def deinterlace_frames(self):
        """Gets the deinterlace_frames of this Profile.  # noqa: E501


        :return: The deinterlace_frames of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._deinterlace_frames

    @deinterlace_frames.setter
    def deinterlace_frames(self, deinterlace_frames):
        """Sets the deinterlace_frames of this Profile.


        :param deinterlace_frames: The deinterlace_frames of this Profile.  # noqa: E501
        :type: str
        """

        self._deinterlace_frames = deinterlace_frames

    @property
    def description(self):
        """Gets the description of this Profile.  # noqa: E501

        Description of the profile.  # noqa: E501

        :return: The description of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Profile.

        Description of the profile.  # noqa: E501

        :param description: The description of this Profile.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dnxhd_type(self):
        """Gets the dnxhd_type of this Profile.  # noqa: E501


        :return: The dnxhd_type of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._dnxhd_type

    @dnxhd_type.setter
    def dnxhd_type(self, dnxhd_type):
        """Sets the dnxhd_type of this Profile.


        :param dnxhd_type: The dnxhd_type of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["36", "45", "60", "75", "90", "90x", "110", "115", "120", "145", "175x", "175", "185x", "185", "220x", "220"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and dnxhd_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `dnxhd_type` ({0}), must be one of {1}"  # noqa: E501
                .format(dnxhd_type, allowed_values)
            )

        self._dnxhd_type = dnxhd_type

    @property
    def encryption(self):
        """Gets the encryption of this Profile.  # noqa: E501


        :return: The encryption of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this Profile.


        :param encryption: The encryption of this Profile.  # noqa: E501
        :type: bool
        """

        self._encryption = encryption

    @property
    def extname(self):
        """Gets the extname of this Profile.  # noqa: E501

        File extension.  # noqa: E501

        :return: The extname of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._extname

    @extname.setter
    def extname(self, extname):
        """Sets the extname of this Profile.

        File extension.  # noqa: E501

        :param extname: The extname of this Profile.  # noqa: E501
        :type: str
        """

        self._extname = extname

    @property
    def fps(self):
        """Gets the fps of this Profile.  # noqa: E501

        Null value copy the original fps. By default it is not set.  # noqa: E501

        :return: The fps of this Profile.  # noqa: E501
        :rtype: float
        """
        return self._fps

    @fps.setter
    def fps(self, fps):
        """Sets the fps of this Profile.

        Null value copy the original fps. By default it is not set.  # noqa: E501

        :param fps: The fps of this Profile.  # noqa: E501
        :type: float
        """

        self._fps = fps

    @property
    def frame_count(self):
        """Gets the frame_count of this Profile.  # noqa: E501

        Evenly spaced number of generated screenshots. By default it is not set.  # noqa: E501

        :return: The frame_count of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._frame_count

    @frame_count.setter
    def frame_count(self, frame_count):
        """Sets the frame_count of this Profile.

        Evenly spaced number of generated screenshots. By default it is not set.  # noqa: E501

        :param frame_count: The frame_count of this Profile.  # noqa: E501
        :type: int
        """

        self._frame_count = frame_count

    @property
    def frame_interval(self):
        """Gets the frame_interval of this Profile.  # noqa: E501

        Thumbnail interval (Frames or seconds).  # noqa: E501

        :return: The frame_interval of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._frame_interval

    @frame_interval.setter
    def frame_interval(self, frame_interval):
        """Sets the frame_interval of this Profile.

        Thumbnail interval (Frames or seconds).  # noqa: E501

        :param frame_interval: The frame_interval of this Profile.  # noqa: E501
        :type: str
        """

        self._frame_interval = frame_interval

    @property
    def frame_offsets(self):
        """Gets the frame_offsets of this Profile.  # noqa: E501

        Array of offsets (Frames or seconds).  # noqa: E501

        :return: The frame_offsets of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._frame_offsets

    @frame_offsets.setter
    def frame_offsets(self, frame_offsets):
        """Sets the frame_offsets of this Profile.

        Array of offsets (Frames or seconds).  # noqa: E501

        :param frame_offsets: The frame_offsets of this Profile.  # noqa: E501
        :type: str
        """

        self._frame_offsets = frame_offsets

    @property
    def h264_level(self):
        """Gets the h264_level of this Profile.  # noqa: E501

        A specified set of constraints that indicate a degree of required decoder performance for a profile. Available options are:   - 1   - 1b   - 1.1   - 1.2   - 1.3   - 2   - 2.1   - 2.2   - 3   - 3.1   - 3.2   - 4   - 4.1   - 4.2   - 5   - 5.1  # noqa: E501

        :return: The h264_level of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._h264_level

    @h264_level.setter
    def h264_level(self, h264_level):
        """Sets the h264_level of this Profile.

        A specified set of constraints that indicate a degree of required decoder performance for a profile. Available options are:   - 1   - 1b   - 1.1   - 1.2   - 1.3   - 2   - 2.1   - 2.2   - 3   - 3.1   - 3.2   - 4   - 4.1   - 4.2   - 5   - 5.1  # noqa: E501

        :param h264_level: The h264_level of this Profile.  # noqa: E501
        :type: str
        """

        self._h264_level = h264_level

    @property
    def h264_profile(self):
        """Gets the h264_profile of this Profile.  # noqa: E501

        Profiles represent a sub-set of the encoding techniques available in H.264.  # noqa: E501

        :return: The h264_profile of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._h264_profile

    @h264_profile.setter
    def h264_profile(self, h264_profile):
        """Sets the h264_profile of this Profile.

        Profiles represent a sub-set of the encoding techniques available in H.264.  # noqa: E501

        :param h264_profile: The h264_profile of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["baseline", "main", "high", "high10", "high422", "high444"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and h264_profile not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `h264_profile` ({0}), must be one of {1}"  # noqa: E501
                .format(h264_profile, allowed_values)
            )

        self._h264_profile = h264_profile

    @property
    def h264_tune(self):
        """Gets the h264_tune of this Profile.  # noqa: E501

        Specifies a h264 tuning option.  # noqa: E501

        :return: The h264_tune of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._h264_tune

    @h264_tune.setter
    def h264_tune(self, h264_tune):
        """Sets the h264_tune of this Profile.

        Specifies a h264 tuning option.  # noqa: E501

        :param h264_tune: The h264_tune of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["film", "animation", "grain", "psnr", "ssim", "fastdecode", "zerolatency"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and h264_tune not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `h264_tune` ({0}), must be one of {1}"  # noqa: E501
                .format(h264_tune, allowed_values)
            )

        self._h264_tune = h264_tune

    @property
    def height(self):
        """Gets the height of this Profile.  # noqa: E501

        Height in pixels.  # noqa: E501

        :return: The height of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Profile.

        Height in pixels.  # noqa: E501

        :param height: The height of this Profile.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def id(self):
        """Gets the id of this Profile.  # noqa: E501


        :return: The id of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Profile.


        :param id: The id of this Profile.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def imx_type(self):
        """Gets the imx_type of this Profile.  # noqa: E501


        :return: The imx_type of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._imx_type

    @imx_type.setter
    def imx_type(self, imx_type):
        """Sets the imx_type of this Profile.


        :param imx_type: The imx_type of this Profile.  # noqa: E501
        :type: str
        """

        self._imx_type = imx_type

    @property
    def inputs(self):
        """Gets the inputs of this Profile.  # noqa: E501


        :return: The inputs of this Profile.  # noqa: E501
        :rtype: object
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this Profile.


        :param inputs: The inputs of this Profile.  # noqa: E501
        :type: object
        """

        self._inputs = inputs

    @property
    def interlace(self):
        """Gets the interlace of this Profile.  # noqa: E501


        :return: The interlace of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._interlace

    @interlace.setter
    def interlace(self, interlace):
        """Sets the interlace of this Profile.


        :param interlace: The interlace of this Profile.  # noqa: E501
        :type: str
        """

        self._interlace = interlace

    @property
    def keyframe_interval(self):
        """Gets the keyframe_interval of this Profile.  # noqa: E501

        Adds a key frame every N frames. Default is 250, adds a key frame every 250 frames.  # noqa: E501

        :return: The keyframe_interval of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._keyframe_interval

    @keyframe_interval.setter
    def keyframe_interval(self, keyframe_interval):
        """Sets the keyframe_interval of this Profile.

        Adds a key frame every N frames. Default is 250, adds a key frame every 250 frames.  # noqa: E501

        :param keyframe_interval: The keyframe_interval of this Profile.  # noqa: E501
        :type: int
        """

        self._keyframe_interval = keyframe_interval

    @property
    def keyframe_rate(self):
        """Gets the keyframe_rate of this Profile.  # noqa: E501


        :return: The keyframe_rate of this Profile.  # noqa: E501
        :rtype: float
        """
        return self._keyframe_rate

    @keyframe_rate.setter
    def keyframe_rate(self, keyframe_rate):
        """Sets the keyframe_rate of this Profile.


        :param keyframe_rate: The keyframe_rate of this Profile.  # noqa: E501
        :type: float
        """

        self._keyframe_rate = keyframe_rate

    @property
    def lang(self):
        """Gets the lang of this Profile.  # noqa: E501


        :return: The lang of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this Profile.


        :param lang: The lang of this Profile.  # noqa: E501
        :type: str
        """

        self._lang = lang

    @property
    def max_rate(self):
        """Gets the max_rate of this Profile.  # noqa: E501

        A max bitrate tolerance (in bits/s). By default this is not set.  # noqa: E501

        :return: The max_rate of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._max_rate

    @max_rate.setter
    def max_rate(self, max_rate):
        """Sets the max_rate of this Profile.

        A max bitrate tolerance (in bits/s). By default this is not set.  # noqa: E501

        :param max_rate: The max_rate of this Profile.  # noqa: E501
        :type: int
        """

        self._max_rate = max_rate

    @property
    def merge_audio_streams(self):
        """Gets the merge_audio_streams of this Profile.  # noqa: E501


        :return: The merge_audio_streams of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._merge_audio_streams

    @merge_audio_streams.setter
    def merge_audio_streams(self, merge_audio_streams):
        """Sets the merge_audio_streams of this Profile.


        :param merge_audio_streams: The merge_audio_streams of this Profile.  # noqa: E501
        :type: str
        """

        self._merge_audio_streams = merge_audio_streams

    @property
    def mute_audio_tracks(self):
        """Gets the mute_audio_tracks of this Profile.  # noqa: E501

        Remove audio from input video file. By default it is set to `false`.  # noqa: E501

        :return: The mute_audio_tracks of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._mute_audio_tracks

    @mute_audio_tracks.setter
    def mute_audio_tracks(self, mute_audio_tracks):
        """Sets the mute_audio_tracks of this Profile.

        Remove audio from input video file. By default it is set to `false`.  # noqa: E501

        :param mute_audio_tracks: The mute_audio_tracks of this Profile.  # noqa: E501
        :type: bool
        """

        self._mute_audio_tracks = mute_audio_tracks

    @property
    def name(self):
        """Gets the name of this Profile.  # noqa: E501

        A unique machine-readable name that will identify the profile. Helpful later on for filtering encodings by profile.  # noqa: E501

        :return: The name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Profile.

        A unique machine-readable name that will identify the profile. Helpful later on for filtering encodings by profile.  # noqa: E501

        :param name: The name of this Profile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def outputs(self):
        """Gets the outputs of this Profile.  # noqa: E501


        :return: The outputs of this Profile.  # noqa: E501
        :rtype: object
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this Profile.


        :param outputs: The outputs of this Profile.  # noqa: E501
        :type: object
        """

        self._outputs = outputs

    @property
    def outputs_path_format(self):
        """Gets the outputs_path_format of this Profile.  # noqa: E501

        Specify the directory where the output files should be stored. By default it is not set. More information about this [here](https://cloud.telestream.net/docs#path-format---know-how).  # noqa: E501

        :return: The outputs_path_format of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._outputs_path_format

    @outputs_path_format.setter
    def outputs_path_format(self, outputs_path_format):
        """Sets the outputs_path_format of this Profile.

        Specify the directory where the output files should be stored. By default it is not set. More information about this [here](https://cloud.telestream.net/docs#path-format---know-how).  # noqa: E501

        :param outputs_path_format: The outputs_path_format of this Profile.  # noqa: E501
        :type: str
        """

        self._outputs_path_format = outputs_path_format

    @property
    def playlist_type(self):
        """Gets the playlist_type of this Profile.  # noqa: E501


        :return: The playlist_type of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._playlist_type

    @playlist_type.setter
    def playlist_type(self, playlist_type):
        """Sets the playlist_type of this Profile.


        :param playlist_type: The playlist_type of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["iframe", "iframe-only"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and playlist_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `playlist_type` ({0}), must be one of {1}"  # noqa: E501
                .format(playlist_type, allowed_values)
            )

        self._playlist_type = playlist_type

    @property
    def pmt_pid(self):
        """Gets the pmt_pid of this Profile.  # noqa: E501


        :return: The pmt_pid of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._pmt_pid

    @pmt_pid.setter
    def pmt_pid(self, pmt_pid):
        """Sets the pmt_pid of this Profile.


        :param pmt_pid: The pmt_pid of this Profile.  # noqa: E501
        :type: str
        """

        self._pmt_pid = pmt_pid

    @property
    def preset_name(self):
        """Gets the preset_name of this Profile.  # noqa: E501

        A name of a preset that a profile will use. Available options are:   - aac   - avc.intra   - dash.variant   - dash.variant.audio   - dash.variant.webvtt   - dash.variant.ttml   - dash.variant.playlist   - dash.variant.nvenc   - dash.muxer   - dash.muxer.audio   - dnxhd   - h264   - h264.baseline   - h264.nvenc.telestream.mov   - h264.nvenc   - h265   - h265.4K   - hls.muxer   - hls.muxer.audio   - hls.variant   - hls.variant.audio   - hls.variant.playlist   - hls.variant.nvenc   - hls.variant.webvtt   - hss   - hss.variant   - hss.variant.audio   - hss.variant.playlist   - imx   - iphone_and_ipad   - jpeg   - m4a   - mp3   - mpeg2   - mpegps   - mpegts.h264   - mpegts.mpeg2   - oga   - ogg   - png   - prores422   - quick_one_thumbnail   - thumbnail   - vorbis   - webm   - webm.vp8   - webm.vp9   - xdcam  # noqa: E501

        :return: The preset_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._preset_name

    @preset_name.setter
    def preset_name(self, preset_name):
        """Sets the preset_name of this Profile.

        A name of a preset that a profile will use. Available options are:   - aac   - avc.intra   - dash.variant   - dash.variant.audio   - dash.variant.webvtt   - dash.variant.ttml   - dash.variant.playlist   - dash.variant.nvenc   - dash.muxer   - dash.muxer.audio   - dnxhd   - h264   - h264.baseline   - h264.nvenc.telestream.mov   - h264.nvenc   - h265   - h265.4K   - hls.muxer   - hls.muxer.audio   - hls.variant   - hls.variant.audio   - hls.variant.playlist   - hls.variant.nvenc   - hls.variant.webvtt   - hss   - hss.variant   - hss.variant.audio   - hss.variant.playlist   - imx   - iphone_and_ipad   - jpeg   - m4a   - mp3   - mpeg2   - mpegps   - mpegts.h264   - mpegts.mpeg2   - oga   - ogg   - png   - prores422   - quick_one_thumbnail   - thumbnail   - vorbis   - webm   - webm.vp8   - webm.vp9   - xdcam  # noqa: E501

        :param preset_name: The preset_name of this Profile.  # noqa: E501
        :type: str
        """

        self._preset_name = preset_name

    @property
    def prores_format(self):
        """Gets the prores_format of this Profile.  # noqa: E501


        :return: The prores_format of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._prores_format

    @prores_format.setter
    def prores_format(self, prores_format):
        """Sets the prores_format of this Profile.


        :param prores_format: The prores_format of this Profile.  # noqa: E501
        :type: str
        """

        self._prores_format = prores_format

    @property
    def segment_time(self):
        """Gets the segment_time of this Profile.  # noqa: E501

        Minimum value is 2, maximum is 60.  # noqa: E501

        :return: The segment_time of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._segment_time

    @segment_time.setter
    def segment_time(self, segment_time):
        """Sets the segment_time of this Profile.

        Minimum value is 2, maximum is 60.  # noqa: E501

        :param segment_time: The segment_time of this Profile.  # noqa: E501
        :type: int
        """

        self._segment_time = segment_time

    @property
    def stack(self):
        """Gets the stack of this Profile.  # noqa: E501


        :return: The stack of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._stack

    @stack.setter
    def stack(self, stack):
        """Sets the stack of this Profile.


        :param stack: The stack of this Profile.  # noqa: E501
        :type: str
        """

        self._stack = stack

    @property
    def starting_timecode(self):
        """Gets the starting_timecode of this Profile.  # noqa: E501


        :return: The starting_timecode of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._starting_timecode

    @starting_timecode.setter
    def starting_timecode(self, starting_timecode):
        """Sets the starting_timecode of this Profile.


        :param starting_timecode: The starting_timecode of this Profile.  # noqa: E501
        :type: str
        """

        self._starting_timecode = starting_timecode

    @property
    def sws_flags(self):
        """Gets the sws_flags of this Profile.  # noqa: E501


        :return: The sws_flags of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._sws_flags

    @sws_flags.setter
    def sws_flags(self, sws_flags):
        """Sets the sws_flags of this Profile.


        :param sws_flags: The sws_flags of this Profile.  # noqa: E501
        :type: str
        """

        self._sws_flags = sws_flags

    @property
    def telestream_block_size(self):
        """Gets the telestream_block_size of this Profile.  # noqa: E501


        :return: The telestream_block_size of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._telestream_block_size

    @telestream_block_size.setter
    def telestream_block_size(self, telestream_block_size):
        """Sets the telestream_block_size of this Profile.


        :param telestream_block_size: The telestream_block_size of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["16x16", "24x24", "32x32"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and telestream_block_size not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `telestream_block_size` ({0}), must be one of {1}"  # noqa: E501
                .format(telestream_block_size, allowed_values)
            )

        self._telestream_block_size = telestream_block_size

    @property
    def telestream_blur_scaler(self):
        """Gets the telestream_blur_scaler of this Profile.  # noqa: E501

        Minimum value is 0, maximum is 4.  # noqa: E501

        :return: The telestream_blur_scaler of this Profile.  # noqa: E501
        :rtype: float
        """
        return self._telestream_blur_scaler

    @telestream_blur_scaler.setter
    def telestream_blur_scaler(self, telestream_blur_scaler):
        """Sets the telestream_blur_scaler of this Profile.

        Minimum value is 0, maximum is 4.  # noqa: E501

        :param telestream_blur_scaler: The telestream_blur_scaler of this Profile.  # noqa: E501
        :type: float
        """

        self._telestream_blur_scaler = telestream_blur_scaler

    @property
    def telestream_cost_scaler(self):
        """Gets the telestream_cost_scaler of this Profile.  # noqa: E501

        Minimum value is 0, maximum is 4.  # noqa: E501

        :return: The telestream_cost_scaler of this Profile.  # noqa: E501
        :rtype: float
        """
        return self._telestream_cost_scaler

    @telestream_cost_scaler.setter
    def telestream_cost_scaler(self, telestream_cost_scaler):
        """Sets the telestream_cost_scaler of this Profile.

        Minimum value is 0, maximum is 4.  # noqa: E501

        :param telestream_cost_scaler: The telestream_cost_scaler of this Profile.  # noqa: E501
        :type: float
        """

        self._telestream_cost_scaler = telestream_cost_scaler

    @property
    def telestream_search_length_scaler(self):
        """Gets the telestream_search_length_scaler of this Profile.  # noqa: E501

        Minimum value is 0, maximum is 2.  # noqa: E501

        :return: The telestream_search_length_scaler of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._telestream_search_length_scaler

    @telestream_search_length_scaler.setter
    def telestream_search_length_scaler(self, telestream_search_length_scaler):
        """Sets the telestream_search_length_scaler of this Profile.

        Minimum value is 0, maximum is 2.  # noqa: E501

        :param telestream_search_length_scaler: The telestream_search_length_scaler of this Profile.  # noqa: E501
        :type: int
        """

        self._telestream_search_length_scaler = telestream_search_length_scaler

    @property
    def telestream_subpel_mode(self):
        """Gets the telestream_subpel_mode of this Profile.  # noqa: E501


        :return: The telestream_subpel_mode of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._telestream_subpel_mode

    @telestream_subpel_mode.setter
    def telestream_subpel_mode(self, telestream_subpel_mode):
        """Sets the telestream_subpel_mode of this Profile.


        :param telestream_subpel_mode: The telestream_subpel_mode of this Profile.  # noqa: E501
        :type: bool
        """

        self._telestream_subpel_mode = telestream_subpel_mode

    @property
    def time_code(self):
        """Gets the time_code of this Profile.  # noqa: E501

        If set, timestamps will be added to your videos. By default this is not set.  # noqa: E501

        :return: The time_code of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._time_code

    @time_code.setter
    def time_code(self, time_code):
        """Sets the time_code of this Profile.

        If set, timestamps will be added to your videos. By default this is not set.  # noqa: E501

        :param time_code: The time_code of this Profile.  # noqa: E501
        :type: str
        """

        self._time_code = time_code

    @property
    def title(self):
        """Gets the title of this Profile.  # noqa: E501

        Human-readable name.  # noqa: E501

        :return: The title of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Profile.

        Human-readable name.  # noqa: E501

        :param title: The title of this Profile.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def trailers(self):
        """Gets the trailers of this Profile.  # noqa: E501


        :return: The trailers of this Profile.  # noqa: E501
        :rtype: list[str]
        """
        return self._trailers

    @trailers.setter
    def trailers(self, trailers):
        """Sets the trailers of this Profile.


        :param trailers: The trailers of this Profile.  # noqa: E501
        :type: list[str]
        """

        self._trailers = trailers

    @property
    def transport_rate(self):
        """Gets the transport_rate of this Profile.  # noqa: E501


        :return: The transport_rate of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._transport_rate

    @transport_rate.setter
    def transport_rate(self, transport_rate):
        """Sets the transport_rate of this Profile.


        :param transport_rate: The transport_rate of this Profile.  # noqa: E501
        :type: str
        """

        self._transport_rate = transport_rate

    @property
    def ts_pids(self):
        """Gets the ts_pids of this Profile.  # noqa: E501


        :return: The ts_pids of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._ts_pids

    @ts_pids.setter
    def ts_pids(self, ts_pids):
        """Sets the ts_pids of this Profile.


        :param ts_pids: The ts_pids of this Profile.  # noqa: E501
        :type: str
        """

        self._ts_pids = ts_pids

    @property
    def updated_at(self):
        """Gets the updated_at of this Profile.  # noqa: E501


        :return: The updated_at of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Profile.


        :param updated_at: The updated_at of this Profile.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def upscale(self):
        """Gets the upscale of this Profile.  # noqa: E501

        Upscale the video resolution to match your profile. Default is `true`.  # noqa: E501

        :return: The upscale of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._upscale

    @upscale.setter
    def upscale(self, upscale):
        """Sets the upscale of this Profile.

        Upscale the video resolution to match your profile. Default is `true`.  # noqa: E501

        :param upscale: The upscale of this Profile.  # noqa: E501
        :type: bool
        """

        self._upscale = upscale

    @property
    def use_editlist(self):
        """Gets the use_editlist of this Profile.  # noqa: E501


        :return: The use_editlist of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._use_editlist

    @use_editlist.setter
    def use_editlist(self, use_editlist):
        """Sets the use_editlist of this Profile.


        :param use_editlist: The use_editlist of this Profile.  # noqa: E501
        :type: bool
        """

        self._use_editlist = use_editlist

    @property
    def variants(self):
        """Gets the variants of this Profile.  # noqa: E501

        Pattern utilised to match HLS.Variant presets by name. Default is hls.*.  # noqa: E501

        :return: The variants of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this Profile.

        Pattern utilised to match HLS.Variant presets by name. Default is hls.*.  # noqa: E501

        :param variants: The variants of this Profile.  # noqa: E501
        :type: str
        """

        self._variants = variants

    @property
    def video_bitrate(self):
        """Gets the video_bitrate of this Profile.  # noqa: E501


        :return: The video_bitrate of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._video_bitrate

    @video_bitrate.setter
    def video_bitrate(self, video_bitrate):
        """Sets the video_bitrate of this Profile.


        :param video_bitrate: The video_bitrate of this Profile.  # noqa: E501
        :type: int
        """

        self._video_bitrate = video_bitrate

    @property
    def video_pid(self):
        """Gets the video_pid of this Profile.  # noqa: E501


        :return: The video_pid of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._video_pid

    @video_pid.setter
    def video_pid(self, video_pid):
        """Sets the video_pid of this Profile.


        :param video_pid: The video_pid of this Profile.  # noqa: E501
        :type: str
        """

        self._video_pid = video_pid

    @property
    def watermark_bottom(self):
        """Gets the watermark_bottom of this Profile.  # noqa: E501

        Distance from the bottom of the video frame in pixels or percentage of video frame height. Works like CSS. Default is `0`.  # noqa: E501

        :return: The watermark_bottom of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._watermark_bottom

    @watermark_bottom.setter
    def watermark_bottom(self, watermark_bottom):
        """Sets the watermark_bottom of this Profile.

        Distance from the bottom of the video frame in pixels or percentage of video frame height. Works like CSS. Default is `0`.  # noqa: E501

        :param watermark_bottom: The watermark_bottom of this Profile.  # noqa: E501
        :type: str
        """

        self._watermark_bottom = watermark_bottom

    @property
    def watermark_bumpers(self):
        """Gets the watermark_bumpers of this Profile.  # noqa: E501


        :return: The watermark_bumpers of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._watermark_bumpers

    @watermark_bumpers.setter
    def watermark_bumpers(self, watermark_bumpers):
        """Sets the watermark_bumpers of this Profile.


        :param watermark_bumpers: The watermark_bumpers of this Profile.  # noqa: E501
        :type: bool
        """

        self._watermark_bumpers = watermark_bumpers

    @property
    def watermark_height(self):
        """Gets the watermark_height of this Profile.  # noqa: E501

        Height of the watermark image in pixels or percentage of video frame height. Default is no resizing  # noqa: E501

        :return: The watermark_height of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._watermark_height

    @watermark_height.setter
    def watermark_height(self, watermark_height):
        """Sets the watermark_height of this Profile.

        Height of the watermark image in pixels or percentage of video frame height. Default is no resizing  # noqa: E501

        :param watermark_height: The watermark_height of this Profile.  # noqa: E501
        :type: str
        """

        self._watermark_height = watermark_height

    @property
    def watermark_left(self):
        """Gets the watermark_left of this Profile.  # noqa: E501

        Distance from the left of the video frame in pixels or percentage of video frame width. Works like CSS. Default is `0`.  # noqa: E501

        :return: The watermark_left of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._watermark_left

    @watermark_left.setter
    def watermark_left(self, watermark_left):
        """Sets the watermark_left of this Profile.

        Distance from the left of the video frame in pixels or percentage of video frame width. Works like CSS. Default is `0`.  # noqa: E501

        :param watermark_left: The watermark_left of this Profile.  # noqa: E501
        :type: str
        """

        self._watermark_left = watermark_left

    @property
    def watermark_right(self):
        """Gets the watermark_right of this Profile.  # noqa: E501

        Distance from the right of the video frame in pixels or percentage of video frame width. Works like CSS. Default is `0`.  # noqa: E501

        :return: The watermark_right of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._watermark_right

    @watermark_right.setter
    def watermark_right(self, watermark_right):
        """Sets the watermark_right of this Profile.

        Distance from the right of the video frame in pixels or percentage of video frame width. Works like CSS. Default is `0`.  # noqa: E501

        :param watermark_right: The watermark_right of this Profile.  # noqa: E501
        :type: str
        """

        self._watermark_right = watermark_right

    @property
    def watermark_top(self):
        """Gets the watermark_top of this Profile.  # noqa: E501

        Distance from the top of the video frame in pixels or percentage of video frame height. Works like CSS. Default is `0`.  # noqa: E501

        :return: The watermark_top of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._watermark_top

    @watermark_top.setter
    def watermark_top(self, watermark_top):
        """Sets the watermark_top of this Profile.

        Distance from the top of the video frame in pixels or percentage of video frame height. Works like CSS. Default is `0`.  # noqa: E501

        :param watermark_top: The watermark_top of this Profile.  # noqa: E501
        :type: str
        """

        self._watermark_top = watermark_top

    @property
    def watermark_trailers(self):
        """Gets the watermark_trailers of this Profile.  # noqa: E501


        :return: The watermark_trailers of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._watermark_trailers

    @watermark_trailers.setter
    def watermark_trailers(self, watermark_trailers):
        """Sets the watermark_trailers of this Profile.


        :param watermark_trailers: The watermark_trailers of this Profile.  # noqa: E501
        :type: bool
        """

        self._watermark_trailers = watermark_trailers

    @property
    def watermark_url(self):
        """Gets the watermark_url of this Profile.  # noqa: E501

        Url of a watermark image.  # noqa: E501

        :return: The watermark_url of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._watermark_url

    @watermark_url.setter
    def watermark_url(self, watermark_url):
        """Sets the watermark_url of this Profile.

        Url of a watermark image.  # noqa: E501

        :param watermark_url: The watermark_url of this Profile.  # noqa: E501
        :type: str
        """

        self._watermark_url = watermark_url

    @property
    def watermark_width(self):
        """Gets the watermark_width of this Profile.  # noqa: E501

        Width of the watermark image in pixels or percentage of video frame width. Default is `no resizing`.  # noqa: E501

        :return: The watermark_width of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._watermark_width

    @watermark_width.setter
    def watermark_width(self, watermark_width):
        """Sets the watermark_width of this Profile.

        Width of the watermark image in pixels or percentage of video frame width. Default is `no resizing`.  # noqa: E501

        :param watermark_width: The watermark_width of this Profile.  # noqa: E501
        :type: str
        """

        self._watermark_width = watermark_width

    @property
    def width(self):
        """Gets the width of this Profile.  # noqa: E501

        Width in pixels.  # noqa: E501

        :return: The width of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Profile.

        Width in pixels.  # noqa: E501

        :param width: The width of this Profile.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def x264_options(self):
        """Gets the x264_options of this Profile.  # noqa: E501


        :return: The x264_options of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._x264_options

    @x264_options.setter
    def x264_options(self, x264_options):
        """Sets the x264_options of this Profile.


        :param x264_options: The x264_options of this Profile.  # noqa: E501
        :type: str
        """

        self._x264_options = x264_options

    @property
    def x265_options(self):
        """Gets the x265_options of this Profile.  # noqa: E501


        :return: The x265_options of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._x265_options

    @x265_options.setter
    def x265_options(self, x265_options):
        """Sets the x265_options of this Profile.


        :param x265_options: The x265_options of this Profile.  # noqa: E501
        :type: str
        """

        self._x265_options = x265_options

    @property
    def xdcam_format(self):
        """Gets the xdcam_format of this Profile.  # noqa: E501


        :return: The xdcam_format of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._xdcam_format

    @xdcam_format.setter
    def xdcam_format(self, xdcam_format):
        """Sets the xdcam_format of this Profile.


        :param xdcam_format: The xdcam_format of this Profile.  # noqa: E501
        :type: str
        """

        self._xdcam_format = xdcam_format

    @property
    def tachyon_allow_remove_pulldown(self):
        """Gets the tachyon_allow_remove_pulldown of this Profile.  # noqa: E501

        Enable more sensitive pulldown removal algorithm.  # noqa: E501

        :return: The tachyon_allow_remove_pulldown of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._tachyon_allow_remove_pulldown

    @tachyon_allow_remove_pulldown.setter
    def tachyon_allow_remove_pulldown(self, tachyon_allow_remove_pulldown):
        """Sets the tachyon_allow_remove_pulldown of this Profile.

        Enable more sensitive pulldown removal algorithm.  # noqa: E501

        :param tachyon_allow_remove_pulldown: The tachyon_allow_remove_pulldown of this Profile.  # noqa: E501
        :type: bool
        """

        self._tachyon_allow_remove_pulldown = tachyon_allow_remove_pulldown

    @property
    def tachyon_enable_post_pulldown_filter(self):
        """Gets the tachyon_enable_post_pulldown_filter of this Profile.  # noqa: E501

        If the images you are converting are composited 29.976, but the pulldown pattern was not adhered to when performing the composite, this setting is required to remove combing artifacts. It will also remove combing artifacts related to very poor 3:2 cadence.  # noqa: E501

        :return: The tachyon_enable_post_pulldown_filter of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._tachyon_enable_post_pulldown_filter

    @tachyon_enable_post_pulldown_filter.setter
    def tachyon_enable_post_pulldown_filter(self, tachyon_enable_post_pulldown_filter):
        """Sets the tachyon_enable_post_pulldown_filter of this Profile.

        If the images you are converting are composited 29.976, but the pulldown pattern was not adhered to when performing the composite, this setting is required to remove combing artifacts. It will also remove combing artifacts related to very poor 3:2 cadence.  # noqa: E501

        :param tachyon_enable_post_pulldown_filter: The tachyon_enable_post_pulldown_filter of this Profile.  # noqa: E501
        :type: bool
        """

        self._tachyon_enable_post_pulldown_filter = tachyon_enable_post_pulldown_filter

    @property
    def tachyon_media_hint_is_cartoon(self):
        """Gets the tachyon_media_hint_is_cartoon of this Profile.  # noqa: E501


        :return: The tachyon_media_hint_is_cartoon of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._tachyon_media_hint_is_cartoon

    @tachyon_media_hint_is_cartoon.setter
    def tachyon_media_hint_is_cartoon(self, tachyon_media_hint_is_cartoon):
        """Sets the tachyon_media_hint_is_cartoon of this Profile.


        :param tachyon_media_hint_is_cartoon: The tachyon_media_hint_is_cartoon of this Profile.  # noqa: E501
        :type: bool
        """

        self._tachyon_media_hint_is_cartoon = tachyon_media_hint_is_cartoon

    @property
    def tachyon_media_hint_has_chroma_noise(self):
        """Gets the tachyon_media_hint_has_chroma_noise of this Profile.  # noqa: E501

        Remove chroma noise during the analysis of a video.  # noqa: E501

        :return: The tachyon_media_hint_has_chroma_noise of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._tachyon_media_hint_has_chroma_noise

    @tachyon_media_hint_has_chroma_noise.setter
    def tachyon_media_hint_has_chroma_noise(self, tachyon_media_hint_has_chroma_noise):
        """Sets the tachyon_media_hint_has_chroma_noise of this Profile.

        Remove chroma noise during the analysis of a video.  # noqa: E501

        :param tachyon_media_hint_has_chroma_noise: The tachyon_media_hint_has_chroma_noise of this Profile.  # noqa: E501
        :type: bool
        """

        self._tachyon_media_hint_has_chroma_noise = tachyon_media_hint_has_chroma_noise

    @property
    def tachyon_more_sensitive_remove_pulldown(self):
        """Gets the tachyon_more_sensitive_remove_pulldown of this Profile.  # noqa: E501

        When pulldown is not achieved due to extremely broken cadence, or other factors like highly mixed content or if chroma noise masks motion, the pulldown engine may fall back to de-interlacing rather than removing telecine. If that's a case, a more sensitive pulldown pattern can be used. This algorithm favors inverse telecine and with lower thresholds for triggering pulldown identification, will maximize the number of progressive frames created from the video.  # noqa: E501

        :return: The tachyon_more_sensitive_remove_pulldown of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._tachyon_more_sensitive_remove_pulldown

    @tachyon_more_sensitive_remove_pulldown.setter
    def tachyon_more_sensitive_remove_pulldown(self, tachyon_more_sensitive_remove_pulldown):
        """Sets the tachyon_more_sensitive_remove_pulldown of this Profile.

        When pulldown is not achieved due to extremely broken cadence, or other factors like highly mixed content or if chroma noise masks motion, the pulldown engine may fall back to de-interlacing rather than removing telecine. If that's a case, a more sensitive pulldown pattern can be used. This algorithm favors inverse telecine and with lower thresholds for triggering pulldown identification, will maximize the number of progressive frames created from the video.  # noqa: E501

        :param tachyon_more_sensitive_remove_pulldown: The tachyon_more_sensitive_remove_pulldown of this Profile.  # noqa: E501
        :type: bool
        """

        self._tachyon_more_sensitive_remove_pulldown = tachyon_more_sensitive_remove_pulldown

    @property
    def tachyon_allow_add_standard_pd(self):
        """Gets the tachyon_allow_add_standard_pd of this Profile.  # noqa: E501


        :return: The tachyon_allow_add_standard_pd of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._tachyon_allow_add_standard_pd

    @tachyon_allow_add_standard_pd.setter
    def tachyon_allow_add_standard_pd(self, tachyon_allow_add_standard_pd):
        """Sets the tachyon_allow_add_standard_pd of this Profile.


        :param tachyon_allow_add_standard_pd: The tachyon_allow_add_standard_pd of this Profile.  # noqa: E501
        :type: bool
        """

        self._tachyon_allow_add_standard_pd = tachyon_allow_add_standard_pd

    @property
    def tachyon_allow_add_2_2pd(self):
        """Gets the tachyon_allow_add_2_2pd of this Profile.  # noqa: E501

        Allows 2:2 (PSF) Insertion. Creates a new series of frames which are based on duplicating the field an interlacing it into top/bottom field. Maintains a film-look.  # noqa: E501

        :return: The tachyon_allow_add_2_2pd of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._tachyon_allow_add_2_2pd

    @tachyon_allow_add_2_2pd.setter
    def tachyon_allow_add_2_2pd(self, tachyon_allow_add_2_2pd):
        """Sets the tachyon_allow_add_2_2pd of this Profile.

        Allows 2:2 (PSF) Insertion. Creates a new series of frames which are based on duplicating the field an interlacing it into top/bottom field. Maintains a film-look.  # noqa: E501

        :param tachyon_allow_add_2_2pd: The tachyon_allow_add_2_2pd of this Profile.  # noqa: E501
        :type: bool
        """

        self._tachyon_allow_add_2_2pd = tachyon_allow_add_2_2pd

    @property
    def tachyon_allow_add_4_4pd(self):
        """Gets the tachyon_allow_add_4_4pd of this Profile.  # noqa: E501

        Allows 4:4 Insertion. Repeats each progressive frame twice on output (motion rate is halved). This setting is used when you want to convert to high progressive frame rates (i.e. 50p/59.94p/60p) but want to preserve film qualities (low motion rate, such as 24p).  # noqa: E501

        :return: The tachyon_allow_add_4_4pd of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._tachyon_allow_add_4_4pd

    @tachyon_allow_add_4_4pd.setter
    def tachyon_allow_add_4_4pd(self, tachyon_allow_add_4_4pd):
        """Sets the tachyon_allow_add_4_4pd of this Profile.

        Allows 4:4 Insertion. Repeats each progressive frame twice on output (motion rate is halved). This setting is used when you want to convert to high progressive frame rates (i.e. 50p/59.94p/60p) but want to preserve film qualities (low motion rate, such as 24p).  # noqa: E501

        :param tachyon_allow_add_4_4pd: The tachyon_allow_add_4_4pd of this Profile.  # noqa: E501
        :type: bool
        """

        self._tachyon_allow_add_4_4pd = tachyon_allow_add_4_4pd

    @property
    def tachyon_allow_add_4_6pd(self):
        """Gets the tachyon_allow_add_4_6pd of this Profile.  # noqa: E501

        2:3 Insertion. inserts a standard 2:3 telecine pattern to 23.976p video stream to achieve a 29.97i frame rate  # noqa: E501

        :return: The tachyon_allow_add_4_6pd of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._tachyon_allow_add_4_6pd

    @tachyon_allow_add_4_6pd.setter
    def tachyon_allow_add_4_6pd(self, tachyon_allow_add_4_6pd):
        """Sets the tachyon_allow_add_4_6pd of this Profile.

        2:3 Insertion. inserts a standard 2:3 telecine pattern to 23.976p video stream to achieve a 29.97i frame rate  # noqa: E501

        :param tachyon_allow_add_4_6pd: The tachyon_allow_add_4_6pd of this Profile.  # noqa: E501
        :type: bool
        """

        self._tachyon_allow_add_4_6pd = tachyon_allow_add_4_6pd

    @property
    def tachyon_allow_add_euro_pd(self):
        """Gets the tachyon_allow_add_euro_pd of this Profile.  # noqa: E501

        Allows Euro Insertion. For field based interpolation rather than pixel-based. This is designed for interlaced or progressive integer frame rate conversions that are being converted to interlaced outputs. This method is valid for 24p to 50i conversions only.  # noqa: E501

        :return: The tachyon_allow_add_euro_pd of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._tachyon_allow_add_euro_pd

    @tachyon_allow_add_euro_pd.setter
    def tachyon_allow_add_euro_pd(self, tachyon_allow_add_euro_pd):
        """Sets the tachyon_allow_add_euro_pd of this Profile.

        Allows Euro Insertion. For field based interpolation rather than pixel-based. This is designed for interlaced or progressive integer frame rate conversions that are being converted to interlaced outputs. This method is valid for 24p to 50i conversions only.  # noqa: E501

        :param tachyon_allow_add_euro_pd: The tachyon_allow_add_euro_pd of this Profile.  # noqa: E501
        :type: bool
        """

        self._tachyon_allow_add_euro_pd = tachyon_allow_add_euro_pd

    @property
    def tachyon_allow_add_adaptive_pd(self):
        """Gets the tachyon_allow_add_adaptive_pd of this Profile.  # noqa: E501

        Allows Adaptive Insertion. For field-based interpolation rather than using pixel-based interpolation. This algorithm is designed for both integer and non-integer frame rate conversion targets - as long as one of them is a non-integer rate (23.976, 29.97, 59.94, etc). This creates NTSC-PAL conversions clean of motion artifacts at the expense of potential slight stutter. Stutter is most noticeable with material that has smooth and uniform motion.  # noqa: E501

        :return: The tachyon_allow_add_adaptive_pd of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._tachyon_allow_add_adaptive_pd

    @tachyon_allow_add_adaptive_pd.setter
    def tachyon_allow_add_adaptive_pd(self, tachyon_allow_add_adaptive_pd):
        """Sets the tachyon_allow_add_adaptive_pd of this Profile.

        Allows Adaptive Insertion. For field-based interpolation rather than using pixel-based interpolation. This algorithm is designed for both integer and non-integer frame rate conversion targets - as long as one of them is a non-integer rate (23.976, 29.97, 59.94, etc). This creates NTSC-PAL conversions clean of motion artifacts at the expense of potential slight stutter. Stutter is most noticeable with material that has smooth and uniform motion.  # noqa: E501

        :param tachyon_allow_add_adaptive_pd: The tachyon_allow_add_adaptive_pd of this Profile.  # noqa: E501
        :type: bool
        """

        self._tachyon_allow_add_adaptive_pd = tachyon_allow_add_adaptive_pd

    @property
    def tachyon_motion_amount(self):
        """Gets the tachyon_motion_amount of this Profile.  # noqa: E501

        This setting determines how much Tachyon will trust motion vectors in the creation of new images  # noqa: E501

        :return: The tachyon_motion_amount of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._tachyon_motion_amount

    @tachyon_motion_amount.setter
    def tachyon_motion_amount(self, tachyon_motion_amount):
        """Sets the tachyon_motion_amount of this Profile.

        This setting determines how much Tachyon will trust motion vectors in the creation of new images  # noqa: E501

        :param tachyon_motion_amount: The tachyon_motion_amount of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["xlow", "low", "medium", "high", "xhigh", "auto"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and tachyon_motion_amount not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `tachyon_motion_amount` ({0}), must be one of {1}"  # noqa: E501
                .format(tachyon_motion_amount, allowed_values)
            )

        self._tachyon_motion_amount = tachyon_motion_amount

    @property
    def tachyon_fallback_size(self):
        """Gets the tachyon_fallback_size of this Profile.  # noqa: E501

        This option specifies the transition region size between fallback areas and motion compensated areas. A larger fallback size allows more blending (feathering) to occur between the regions.  # noqa: E501

        :return: The tachyon_fallback_size of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._tachyon_fallback_size

    @tachyon_fallback_size.setter
    def tachyon_fallback_size(self, tachyon_fallback_size):
        """Sets the tachyon_fallback_size of this Profile.

        This option specifies the transition region size between fallback areas and motion compensated areas. A larger fallback size allows more blending (feathering) to occur between the regions.  # noqa: E501

        :param tachyon_fallback_size: The tachyon_fallback_size of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["small", "medium", "large", "xlarge", "auto"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and tachyon_fallback_size not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `tachyon_fallback_size` ({0}), must be one of {1}"  # noqa: E501
                .format(tachyon_fallback_size, allowed_values)
            )

        self._tachyon_fallback_size = tachyon_fallback_size

    @property
    def tachyon_mblock_size(self):
        """Gets the tachyon_mblock_size of this Profile.  # noqa: E501

        This option specifies the size of a motion block.  # noqa: E501

        :return: The tachyon_mblock_size of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._tachyon_mblock_size

    @tachyon_mblock_size.setter
    def tachyon_mblock_size(self, tachyon_mblock_size):
        """Sets the tachyon_mblock_size of this Profile.

        This option specifies the size of a motion block.  # noqa: E501

        :param tachyon_mblock_size: The tachyon_mblock_size of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["mb16", "mb32", "mb64", "mb128", "mb256", "auto"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and tachyon_mblock_size not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `tachyon_mblock_size` ({0}), must be one of {1}"  # noqa: E501
                .format(tachyon_mblock_size, allowed_values)
            )

        self._tachyon_mblock_size = tachyon_mblock_size

    @property
    def tachyon_cut_detection_sensitivity(self):
        """Gets the tachyon_cut_detection_sensitivity of this Profile.  # noqa: E501


        :return: The tachyon_cut_detection_sensitivity of this Profile.  # noqa: E501
        :rtype: float
        """
        return self._tachyon_cut_detection_sensitivity

    @tachyon_cut_detection_sensitivity.setter
    def tachyon_cut_detection_sensitivity(self, tachyon_cut_detection_sensitivity):
        """Sets the tachyon_cut_detection_sensitivity of this Profile.


        :param tachyon_cut_detection_sensitivity: The tachyon_cut_detection_sensitivity of this Profile.  # noqa: E501
        :type: float
        """

        self._tachyon_cut_detection_sensitivity = tachyon_cut_detection_sensitivity

    @property
    def eac3_evolution_enable(self):
        """Gets the eac3_evolution_enable of this Profile.  # noqa: E501

        Enables the trusted metadata framework.  # noqa: E501

        :return: The eac3_evolution_enable of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._eac3_evolution_enable

    @eac3_evolution_enable.setter
    def eac3_evolution_enable(self, eac3_evolution_enable):
        """Sets the eac3_evolution_enable of this Profile.

        Enables the trusted metadata framework.  # noqa: E501

        :param eac3_evolution_enable: The eac3_evolution_enable of this Profile.  # noqa: E501
        :type: bool
        """

        self._eac3_evolution_enable = eac3_evolution_enable

    @property
    def eac3_bitstream_mode(self):
        """Gets the eac3_bitstream_mode of this Profile.  # noqa: E501

        Selects the type of audio service. **For 1/0 Voiceover will be used when Voiceover/Karaoke is selected. For 2/0 and above Karaoke will be used.  # noqa: E501

        :return: The eac3_bitstream_mode of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._eac3_bitstream_mode

    @eac3_bitstream_mode.setter
    def eac3_bitstream_mode(self, eac3_bitstream_mode):
        """Sets the eac3_bitstream_mode of this Profile.

        Selects the type of audio service. **For 1/0 Voiceover will be used when Voiceover/Karaoke is selected. For 2/0 and above Karaoke will be used.  # noqa: E501

        :param eac3_bitstream_mode: The eac3_bitstream_mode of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["m0", "m1", "m2", "m3", "m4", "m5", "m6", "m7"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and eac3_bitstream_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `eac3_bitstream_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(eac3_bitstream_mode, allowed_values)
            )

        self._eac3_bitstream_mode = eac3_bitstream_mode

    @property
    def eac3_ninety_degree_phase_shift(self):
        """Gets the eac3_ninety_degree_phase_shift of this Profile.  # noqa: E501

        Applies a 90-degree phase shift to the surround channels; necessary if the output file is being decoded by a Dolby Surround Pro Logic or Pro Logic II decoder.  # noqa: E501

        :return: The eac3_ninety_degree_phase_shift of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._eac3_ninety_degree_phase_shift

    @eac3_ninety_degree_phase_shift.setter
    def eac3_ninety_degree_phase_shift(self, eac3_ninety_degree_phase_shift):
        """Sets the eac3_ninety_degree_phase_shift of this Profile.

        Applies a 90-degree phase shift to the surround channels; necessary if the output file is being decoded by a Dolby Surround Pro Logic or Pro Logic II decoder.  # noqa: E501

        :param eac3_ninety_degree_phase_shift: The eac3_ninety_degree_phase_shift of this Profile.  # noqa: E501
        :type: bool
        """

        self._eac3_ninety_degree_phase_shift = eac3_ninety_degree_phase_shift

    @property
    def eac3_three_decibel_attenuation(self):
        """Gets the eac3_three_decibel_attenuation of this Profile.  # noqa: E501

        Attenuates the surround channels by 3 dB before encoding.  # noqa: E501

        :return: The eac3_three_decibel_attenuation of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._eac3_three_decibel_attenuation

    @eac3_three_decibel_attenuation.setter
    def eac3_three_decibel_attenuation(self, eac3_three_decibel_attenuation):
        """Sets the eac3_three_decibel_attenuation of this Profile.

        Attenuates the surround channels by 3 dB before encoding.  # noqa: E501

        :param eac3_three_decibel_attenuation: The eac3_three_decibel_attenuation of this Profile.  # noqa: E501
        :type: bool
        """

        self._eac3_three_decibel_attenuation = eac3_three_decibel_attenuation

    @property
    def eac3_enable_lfe_low_pass_filter(self):
        """Gets the eac3_enable_lfe_low_pass_filter of this Profile.  # noqa: E501

        Applies a 120 Hz eighth order lowpass filter to the LFE input prior to encoding.  # noqa: E501

        :return: The eac3_enable_lfe_low_pass_filter of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._eac3_enable_lfe_low_pass_filter

    @eac3_enable_lfe_low_pass_filter.setter
    def eac3_enable_lfe_low_pass_filter(self, eac3_enable_lfe_low_pass_filter):
        """Sets the eac3_enable_lfe_low_pass_filter of this Profile.

        Applies a 120 Hz eighth order lowpass filter to the LFE input prior to encoding.  # noqa: E501

        :param eac3_enable_lfe_low_pass_filter: The eac3_enable_lfe_low_pass_filter of this Profile.  # noqa: E501
        :type: bool
        """

        self._eac3_enable_lfe_low_pass_filter = eac3_enable_lfe_low_pass_filter

    @property
    def eac3_analog_to_digital_converter_type(self):
        """Gets the eac3_analog_to_digital_converter_type of this Profile.  # noqa: E501

        Allows audio that has passed through an A/D conversion stage to be marked as such.  # noqa: E501

        :return: The eac3_analog_to_digital_converter_type of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._eac3_analog_to_digital_converter_type

    @eac3_analog_to_digital_converter_type.setter
    def eac3_analog_to_digital_converter_type(self, eac3_analog_to_digital_converter_type):
        """Sets the eac3_analog_to_digital_converter_type of this Profile.

        Allows audio that has passed through an A/D conversion stage to be marked as such.  # noqa: E501

        :param eac3_analog_to_digital_converter_type: The eac3_analog_to_digital_converter_type of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["standard", "hdcd"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and eac3_analog_to_digital_converter_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `eac3_analog_to_digital_converter_type` ({0}), must be one of {1}"  # noqa: E501
                .format(eac3_analog_to_digital_converter_type, allowed_values)
            )

        self._eac3_analog_to_digital_converter_type = eac3_analog_to_digital_converter_type

    @property
    def eac3_stereo_downmix_preference(self):
        """Gets the eac3_stereo_downmix_preference of this Profile.  # noqa: E501


        :return: The eac3_stereo_downmix_preference of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._eac3_stereo_downmix_preference

    @eac3_stereo_downmix_preference.setter
    def eac3_stereo_downmix_preference(self, eac3_stereo_downmix_preference):
        """Sets the eac3_stereo_downmix_preference of this Profile.


        :param eac3_stereo_downmix_preference: The eac3_stereo_downmix_preference of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["m0", "m1", "m2", "m3"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and eac3_stereo_downmix_preference not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `eac3_stereo_downmix_preference` ({0}), must be one of {1}"  # noqa: E501
                .format(eac3_stereo_downmix_preference, allowed_values)
            )

        self._eac3_stereo_downmix_preference = eac3_stereo_downmix_preference

    @property
    def eac3_lt_rt_center_mix_level(self):
        """Gets the eac3_lt_rt_center_mix_level of this Profile.  # noqa: E501

        Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lt/Rt output.  # noqa: E501

        :return: The eac3_lt_rt_center_mix_level of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._eac3_lt_rt_center_mix_level

    @eac3_lt_rt_center_mix_level.setter
    def eac3_lt_rt_center_mix_level(self, eac3_lt_rt_center_mix_level):
        """Sets the eac3_lt_rt_center_mix_level of this Profile.

        Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lt/Rt output.  # noqa: E501

        :param eac3_lt_rt_center_mix_level: The eac3_lt_rt_center_mix_level of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and eac3_lt_rt_center_mix_level not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `eac3_lt_rt_center_mix_level` ({0}), must be one of {1}"  # noqa: E501
                .format(eac3_lt_rt_center_mix_level, allowed_values)
            )

        self._eac3_lt_rt_center_mix_level = eac3_lt_rt_center_mix_level

    @property
    def eac3_lt_rt_surround_mix_level(self):
        """Gets the eac3_lt_rt_surround_mix_level of this Profile.  # noqa: E501

        Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lt/Rt output.  # noqa: E501

        :return: The eac3_lt_rt_surround_mix_level of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._eac3_lt_rt_surround_mix_level

    @eac3_lt_rt_surround_mix_level.setter
    def eac3_lt_rt_surround_mix_level(self, eac3_lt_rt_surround_mix_level):
        """Sets the eac3_lt_rt_surround_mix_level of this Profile.

        Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lt/Rt output.  # noqa: E501

        :param eac3_lt_rt_surround_mix_level: The eac3_lt_rt_surround_mix_level of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["c3", "c4", "c5", "c6", "c7"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and eac3_lt_rt_surround_mix_level not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `eac3_lt_rt_surround_mix_level` ({0}), must be one of {1}"  # noqa: E501
                .format(eac3_lt_rt_surround_mix_level, allowed_values)
            )

        self._eac3_lt_rt_surround_mix_level = eac3_lt_rt_surround_mix_level

    @property
    def eac3_lo_ro_center_mix_level(self):
        """Gets the eac3_lo_ro_center_mix_level of this Profile.  # noqa: E501

        Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lo/Ro output.  # noqa: E501

        :return: The eac3_lo_ro_center_mix_level of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._eac3_lo_ro_center_mix_level

    @eac3_lo_ro_center_mix_level.setter
    def eac3_lo_ro_center_mix_level(self, eac3_lo_ro_center_mix_level):
        """Sets the eac3_lo_ro_center_mix_level of this Profile.

        Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lo/Ro output.  # noqa: E501

        :param eac3_lo_ro_center_mix_level: The eac3_lo_ro_center_mix_level of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and eac3_lo_ro_center_mix_level not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `eac3_lo_ro_center_mix_level` ({0}), must be one of {1}"  # noqa: E501
                .format(eac3_lo_ro_center_mix_level, allowed_values)
            )

        self._eac3_lo_ro_center_mix_level = eac3_lo_ro_center_mix_level

    @property
    def eac3_lo_ro_surround_mix_level(self):
        """Gets the eac3_lo_ro_surround_mix_level of this Profile.  # noqa: E501

        Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lo/Ro output.  # noqa: E501

        :return: The eac3_lo_ro_surround_mix_level of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._eac3_lo_ro_surround_mix_level

    @eac3_lo_ro_surround_mix_level.setter
    def eac3_lo_ro_surround_mix_level(self, eac3_lo_ro_surround_mix_level):
        """Sets the eac3_lo_ro_surround_mix_level of this Profile.

        Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lo/Ro output.  # noqa: E501

        :param eac3_lo_ro_surround_mix_level: The eac3_lo_ro_surround_mix_level of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["c3", "c4", "c5", "c6", "c7"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and eac3_lo_ro_surround_mix_level not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `eac3_lo_ro_surround_mix_level` ({0}), must be one of {1}"  # noqa: E501
                .format(eac3_lo_ro_surround_mix_level, allowed_values)
            )

        self._eac3_lo_ro_surround_mix_level = eac3_lo_ro_surround_mix_level

    @property
    def eac3_surround_ex_mode(self):
        """Gets the eac3_surround_ex_mode of this Profile.  # noqa: E501

        Indicates whether the audio stream was encoded using Dolby EX.  # noqa: E501

        :return: The eac3_surround_ex_mode of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._eac3_surround_ex_mode

    @eac3_surround_ex_mode.setter
    def eac3_surround_ex_mode(self, eac3_surround_ex_mode):
        """Sets the eac3_surround_ex_mode of this Profile.

        Indicates whether the audio stream was encoded using Dolby EX.  # noqa: E501

        :param eac3_surround_ex_mode: The eac3_surround_ex_mode of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["m0", "m1", "m2"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and eac3_surround_ex_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `eac3_surround_ex_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(eac3_surround_ex_mode, allowed_values)
            )

        self._eac3_surround_ex_mode = eac3_surround_ex_mode

    @property
    def eac3_drc_line_mode_profile(self):
        """Gets the eac3_drc_line_mode_profile of this Profile.  # noqa: E501

        Dynamic Range Control for Line Mode.  # noqa: E501

        :return: The eac3_drc_line_mode_profile of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._eac3_drc_line_mode_profile

    @eac3_drc_line_mode_profile.setter
    def eac3_drc_line_mode_profile(self, eac3_drc_line_mode_profile):
        """Sets the eac3_drc_line_mode_profile of this Profile.

        Dynamic Range Control for Line Mode.  # noqa: E501

        :param eac3_drc_line_mode_profile: The eac3_drc_line_mode_profile of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["p0", "p1", "p2", "p3", "p4", "p5"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and eac3_drc_line_mode_profile not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `eac3_drc_line_mode_profile` ({0}), must be one of {1}"  # noqa: E501
                .format(eac3_drc_line_mode_profile, allowed_values)
            )

        self._eac3_drc_line_mode_profile = eac3_drc_line_mode_profile

    @property
    def eac3_drc_rf_mode_profile(self):
        """Gets the eac3_drc_rf_mode_profile of this Profile.  # noqa: E501

        Dynamic Range Control for RF Mode.  # noqa: E501

        :return: The eac3_drc_rf_mode_profile of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._eac3_drc_rf_mode_profile

    @eac3_drc_rf_mode_profile.setter
    def eac3_drc_rf_mode_profile(self, eac3_drc_rf_mode_profile):
        """Sets the eac3_drc_rf_mode_profile of this Profile.

        Dynamic Range Control for RF Mode.  # noqa: E501

        :param eac3_drc_rf_mode_profile: The eac3_drc_rf_mode_profile of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["p0", "p1", "p2", "p3", "p4", "p5"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and eac3_drc_rf_mode_profile not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `eac3_drc_rf_mode_profile` ({0}), must be one of {1}"  # noqa: E501
                .format(eac3_drc_rf_mode_profile, allowed_values)
            )

        self._eac3_drc_rf_mode_profile = eac3_drc_rf_mode_profile

    @property
    def eac3_dialog_normalization(self):
        """Gets the eac3_dialog_normalization of this Profile.  # noqa: E501

        Represents the volume level of dialog in the audio stream which can be used by a Dolby Digital decoder. This aids the decoder in matching volume between program sources. Minimum value is 1, maximum is 31.  # noqa: E501

        :return: The eac3_dialog_normalization of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._eac3_dialog_normalization

    @eac3_dialog_normalization.setter
    def eac3_dialog_normalization(self, eac3_dialog_normalization):
        """Sets the eac3_dialog_normalization of this Profile.

        Represents the volume level of dialog in the audio stream which can be used by a Dolby Digital decoder. This aids the decoder in matching volume between program sources. Minimum value is 1, maximum is 31.  # noqa: E501

        :param eac3_dialog_normalization: The eac3_dialog_normalization of this Profile.  # noqa: E501
        :type: int
        """

        self._eac3_dialog_normalization = eac3_dialog_normalization

    @property
    def eac3_room_type(self):
        """Gets the eac3_room_type of this Profile.  # noqa: E501


        :return: The eac3_room_type of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._eac3_room_type

    @eac3_room_type.setter
    def eac3_room_type(self, eac3_room_type):
        """Sets the eac3_room_type of this Profile.


        :param eac3_room_type: The eac3_room_type of this Profile.  # noqa: E501
        :type: str
        """
        allowed_values = ["m0", "m1", "m2"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and eac3_room_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `eac3_room_type` ({0}), must be one of {1}"  # noqa: E501
                .format(eac3_room_type, allowed_values)
            )

        self._eac3_room_type = eac3_room_type

    @property
    def eac3_mixing_level(self):
        """Gets the eac3_mixing_level of this Profile.  # noqa: E501

        Minimum value is 80, maximum is 111.  # noqa: E501

        :return: The eac3_mixing_level of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._eac3_mixing_level

    @eac3_mixing_level.setter
    def eac3_mixing_level(self, eac3_mixing_level):
        """Sets the eac3_mixing_level of this Profile.

        Minimum value is 80, maximum is 111.  # noqa: E501

        :param eac3_mixing_level: The eac3_mixing_level of this Profile.  # noqa: E501
        :type: int
        """

        self._eac3_mixing_level = eac3_mixing_level

    @property
    def eac3_copyright_protected(self):
        """Gets the eac3_copyright_protected of this Profile.  # noqa: E501

        Indicates whether the encoded bitstream is copyright protected.  # noqa: E501

        :return: The eac3_copyright_protected of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._eac3_copyright_protected

    @eac3_copyright_protected.setter
    def eac3_copyright_protected(self, eac3_copyright_protected):
        """Sets the eac3_copyright_protected of this Profile.

        Indicates whether the encoded bitstream is copyright protected.  # noqa: E501

        :param eac3_copyright_protected: The eac3_copyright_protected of this Profile.  # noqa: E501
        :type: bool
        """

        self._eac3_copyright_protected = eac3_copyright_protected

    @property
    def eac3_original_bitstream(self):
        """Gets the eac3_original_bitstream of this Profile.  # noqa: E501

        Indicates whether the encoded bitstream is the master version, or a copy.  # noqa: E501

        :return: The eac3_original_bitstream of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._eac3_original_bitstream

    @eac3_original_bitstream.setter
    def eac3_original_bitstream(self, eac3_original_bitstream):
        """Sets the eac3_original_bitstream of this Profile.

        Indicates whether the encoded bitstream is the master version, or a copy.  # noqa: E501

        :param eac3_original_bitstream: The eac3_original_bitstream of this Profile.  # noqa: E501
        :type: bool
        """

        self._eac3_original_bitstream = eac3_original_bitstream

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Profile):
            return True

        return self.to_dict() != other.to_dict()
