# coding: utf-8

"""
    Flip API

    Flip  # noqa: E501

    The version of the OpenAPI document: 3.1
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_flip.configuration import Configuration


class Factory(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'url': 'str',
        'server_side_encryption': 'bool',
        'outputs_path_format': 'str',
        'store_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'url': 'url',
        'server_side_encryption': 'server_side_encryption',
        'outputs_path_format': 'outputs_path_format',
        'store_id': 'store_id'
    }

    def __init__(self, id=None, name=None, created_at=None, updated_at=None, url=None, server_side_encryption=None, outputs_path_format=None, store_id=None, local_vars_configuration=None):  # noqa: E501
        """Factory - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._created_at = None
        self._updated_at = None
        self._url = None
        self._server_side_encryption = None
        self._outputs_path_format = None
        self._store_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if url is not None:
            self.url = url
        if server_side_encryption is not None:
            self.server_side_encryption = server_side_encryption
        if outputs_path_format is not None:
            self.outputs_path_format = outputs_path_format
        if store_id is not None:
            self.store_id = store_id

    @property
    def id(self):
        """Gets the id of this Factory.  # noqa: E501

        A unique identifier of a Factory.  # noqa: E501

        :return: The id of this Factory.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Factory.

        A unique identifier of a Factory.  # noqa: E501

        :param id: The id of this Factory.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Factory.  # noqa: E501

        Human-readable identifier of a Factory.  # noqa: E501

        :return: The name of this Factory.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Factory.

        Human-readable identifier of a Factory.  # noqa: E501

        :param name: The name of this Factory.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def created_at(self):
        """Gets the created_at of this Factory.  # noqa: E501

        A date and time when a Factory has been created.  # noqa: E501

        :return: The created_at of this Factory.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Factory.

        A date and time when a Factory has been created.  # noqa: E501

        :param created_at: The created_at of this Factory.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Factory.  # noqa: E501

        A date and time when a Factory has been updated last time.  # noqa: E501

        :return: The updated_at of this Factory.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Factory.

        A date and time when a Factory has been updated last time.  # noqa: E501

        :param updated_at: The updated_at of this Factory.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this Factory.  # noqa: E501

        An URL pointing to the output_bucket_name.  # noqa: E501

        :return: The url of this Factory.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Factory.

        An URL pointing to the output_bucket_name.  # noqa: E501

        :param url: The url of this Factory.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def server_side_encryption(self):
        """Gets the server_side_encryption of this Factory.  # noqa: E501

        Specify if you want to use multi-factor server-side 256-bit AES-256 data encryption with Amazon S3-managed encryption keys (SSE-S3). Each object is encrypted using a unique key which as an additional safeguard is encrypted itself with a master key that S3 regularly rotates. By default this is not set.  # noqa: E501

        :return: The server_side_encryption of this Factory.  # noqa: E501
        :rtype: bool
        """
        return self._server_side_encryption

    @server_side_encryption.setter
    def server_side_encryption(self, server_side_encryption):
        """Sets the server_side_encryption of this Factory.

        Specify if you want to use multi-factor server-side 256-bit AES-256 data encryption with Amazon S3-managed encryption keys (SSE-S3). Each object is encrypted using a unique key which as an additional safeguard is encrypted itself with a master key that S3 regularly rotates. By default this is not set.  # noqa: E501

        :param server_side_encryption: The server_side_encryption of this Factory.  # noqa: E501
        :type: bool
        """

        self._server_side_encryption = server_side_encryption

    @property
    def outputs_path_format(self):
        """Gets the outputs_path_format of this Factory.  # noqa: E501

        Specify the directory where the output files should be stored. By default it is not set. More info [here](https://cloud.telestream.net/docs#path-format---know-how).  # noqa: E501

        :return: The outputs_path_format of this Factory.  # noqa: E501
        :rtype: str
        """
        return self._outputs_path_format

    @outputs_path_format.setter
    def outputs_path_format(self, outputs_path_format):
        """Sets the outputs_path_format of this Factory.

        Specify the directory where the output files should be stored. By default it is not set. More info [here](https://cloud.telestream.net/docs#path-format---know-how).  # noqa: E501

        :param outputs_path_format: The outputs_path_format of this Factory.  # noqa: E501
        :type: str
        """

        self._outputs_path_format = outputs_path_format

    @property
    def store_id(self):
        """Gets the store_id of this Factory.  # noqa: E501

        Unique ID of a store defined in the stores service that will be used as a destination for all of the outputs created  # noqa: E501

        :return: The store_id of this Factory.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this Factory.

        Unique ID of a store defined in the stores service that will be used as a destination for all of the outputs created  # noqa: E501

        :param store_id: The store_id of this Factory.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Factory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Factory):
            return True

        return self.to_dict() != other.to_dict()
