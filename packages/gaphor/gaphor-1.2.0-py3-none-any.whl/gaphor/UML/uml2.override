comment
  This is a file with custom definitions for Gaphor's data model.

  Parts are separated by '%%' (no training spaces) on a line.
  Comment parts start with 'comment' on the line below the percentage
  symbols, 'override' is used to define a overridden variable.

  Overrides may in their turn derive from other properties, in that case
  the 'derives' keyword may be used. It's only useful to declare the
  associations (and other derived properties) an overridden value depends
  on, since attributes have been written anyway. Note that no smart things
  wrt inheritance is done.
%%
override Element
from gaphor.UML.element import Element
%%
override Diagram
class Diagram(PackageableElement, Namespace):
    """Diagrams may contain model elements and can be owned by a Package.
    """

    package: relation_one[Package]

    def __init__(self, id, model):
        """Initialize the diagram with an optional id and element model.
        The diagram also has a canvas."""

        super().__init__(id, model)
        self.canvas = DiagramCanvas(self)

    def save(self, save_func):
        """Apply the supplied save function to this diagram and the canvas."""

        super().save(save_func)
        save_func("canvas", self.canvas)

    def postload(self):
        """Handle post-load functionality for the diagram canvas."""
        super().postload()
        self.canvas.postload()

    def create(self, type, parent=None, subject=None):
        """Create a new canvas item on the canvas. It is created with
        a unique ID and it is attached to the diagram's root item.  The type
        parameter is the element class to create.  The new element also has an
        optional parent and subject."""

        return self.create_as(type, str(uuid.uuid1()), parent, subject)

    def create_as(self, type, id, parent=None, subject=None):
        item = type(id, self.model)
        if subject:
            item.subject = subject
        self.canvas.add(item, parent)
        self.model.handle(DiagramItemCreated(self.model, item))
        return item

    def unlink(self):
        """Unlink all canvas items then unlink this diagram."""

        for item in self.canvas.get_all_items():
            try:
                item.unlink()
            except (AttributeError, KeyError):
                pass

        super().unlink()
%%
override Presentation
# defined in gaphor.UML.presentation
%%
override Element.presentation
# defined in uml2overrides.py
%%
override Presentation.subject
# Presentation.subject is directly defined in the Presentation class
%%
override Transition
# Invert order of superclasses to avoid MRO issues
class Transition(RedefinableElement, NamedElement):
    kind: enumeration
    container: relation_one[Region]
    source: relation_one[Vertex]
    target: relation_one[Vertex]
    effect: relation_one[Behavior]
    guard: relation_one[Constraint]
    redefinitionContext: relation_many[Classifier]
    redefinedTransition: relation_many[Transition]
%%
override MultiplicityElement.lower(MultiplicityElement.lowerValue): attribute[str]
MultiplicityElement.lower = MultiplicityElement.lowerValue
%%
override MultiplicityElement.upper(MultiplicityElement.upperValue): attribute[str]
MultiplicityElement.upper = MultiplicityElement.upperValue
%%
override NamedElement.qualifiedName(NamedElement.namespace): derived[List[str]]
# defined in uml2overrides.py
%%
override Association.endType(Association.memberEnd, Property.type): derived[Type]

# References the classifiers that are used as types of the ends of the
# association.

Association.endType = derived(Association, 'endType', Type, 0, '*', lambda self: [end.type for end in self.memberEnd if end])

%%
override Class.extension(Extension.metaclass): property
# See https://www.omg.org/spec/UML/2.5/PDF, section 11.8.3.6, page 219
# It defines `Extension.allInstances()`, which basically means we have to query the element factory.

# TODO: use those as soon as Extension.metaclass can be used.
#Class.extension = derived(Class, 'extension', Extension, 0, '*', class_extension, Extension.metaclass)

Class.extension = property(lambda self: self.model.lselect(lambda e: e.isKindOf(Extension) and self is e.metaclass), doc=\
"""References the Extensions that specify additional properties of the
metaclass. The property is derived from the extensions whose memberEnds
are typed by the Class.""")
%%
override Extension.metaclass(Extension.ownedEnd, Association.memberEnd): property
# defined in uml2overrides.py
%%
override Classifier.inheritedMember: derivedunion[NamedElement]
Classifier.inheritedMember = derivedunion(Classifier, 'inheritedMember', NamedElement, 0, '*')
%%
override Classifier.general(Generalization.general): derived[Classifier]
Classifier.general = derived(Classifier, 'general', Classifier, 0, '*', lambda self: [g.general for g in self.generalization])
%%
override Class.superClass: derived[Classifier]
Class.superClass = Classifier.general
%%
override Namespace.importedMember: derivedunion[PackageableElement]
Namespace.importedMember = derivedunion(Namespace, 'importedMember', PackageableElement, 0, '*')
%%
override Property.opposite(Property.association, Association.memberEnd): relation_one[Optional[Property]]
# defined in uml2overrides.py
%%
override Property.isComposite(Property.aggregation): derived[bool]
Property.isComposite = derived(Property, 'isComposite', bool, 0, 1, lambda obj: [obj.aggregation == 'composite'])
%%
override Constraint.context: derivedunion[Namespace]
Constraint.context = derivedunion(Constraint, 'context', Namespace, 0, 1)
%%
override Property.navigability(Property.opposite, Property.association): derived[Optional[bool]]
# defined in uml2overrides.py
%%
override Operation.type: derivedunion[DataType]
Operation.type = derivedunion(Operation, 'type', DataType, 0, 1)
%%
override Lifeline.parse: Callable[[Lifeline, str], None]
# defined in uml2overrides.py
%%
override Lifeline.render: Callable[[Lifeline], str]
# defined in uml2overrides.py
%%
override Component.provided: property
# defined in uml2overrides.py
%%
override Component.required: property
# defined in uml2overrides.py
%%
override Message.messageKind: property
# defined in uml2overrides.py
%%
override StructuredClassifier.part: property
StructuredClassifier.part = property(lambda self: tuple(a for a in self.ownedAttribute if a.isComposite), doc="""
    Properties owned by a classifier by composition.
""")
%%
override ExecutionSpecification.start(ExecutionSpecification.executionOccurrenceSpecification): relation_one[ExecutionOccurrenceSpecification]
ExecutionSpecification.start = derived(ExecutionSpecification, 'start', OccurrenceSpecification, 0, 1,
    lambda obj: [eos for i, eos in enumerate(obj.executionOccurrenceSpecification) if i == 0])
%%
override ExecutionSpecification.finish(ExecutionSpecification.executionOccurrenceSpecification): relation_one[ExecutionOccurrenceSpecification]
ExecutionSpecification.finish = derived(ExecutionSpecification, 'finish', OccurrenceSpecification, 0, 1,
    lambda obj: [eos for i, eos in enumerate(obj.executionOccurrenceSpecification) if i == 1])
