Metadata-Version: 1.1
Name: h26x-extractor
Version: 0.3
Summary: Extract NAL units from H.264 bitstreams
Home-page: https://github.com/slhck/h26x-extractor
Author: Werner Robitza
Author-email: werner.robitza@gmail.com
License: MIT
Description: h26x-extractor
        ==============
        
        Author: Werner Robitza
        
        Extracts NAL units from H.264 bitstreams and decodes their type and
        content, if supported.
        
        **Note:** This is not a replacement for a proper tool like
        `h264bitstream <https://github.com/aizvorski/h264bitstream>`__.
        ``h26x-extractor`` is not fast and not robust, but rather a playground
        for parsing bitstreams. Use with caution!
        
        Installation
        ============
        
        Python 2.7:
        
        ::
        
           pip install h26x-extractor
        
        Python 3.x:
        
        ::
        
           pip3 install h26x-extractor
        
        Status
        ======
        
        Currently supported:
        
        -  Parsing of H.264 bitstreams
        -  Parsing of NALU
        -  Parsing of AUD
        -  Parsing of CodedSliceIDR
        -  Parsing of CodedSliceNonIDR
        -  Parsing of SPS
        -  Parsing of PPS
        
        Currently planned:
        
        -  Parsing of SEI
        -  Parsing of VUI
        -  Parsing of H.265 bitstreams
        
        Usage
        =====
        
        ::
        
           h26x-extractor [options] <input-file>...
        
        You can pass the ``-v`` flag to enable verbose output, e.g. the
        following. You will get, for each NAL unit:
        
        -  The bye position range
        -  The offset from the start of the stream
        -  The overall length including start code
        -  The type (also translated in plaintext)
        -  Its content in raw bytes, encoded as hex
        -  Its RBSP content
        -  A table with its content decoded, if supported
        
        Example:
        
        ::
        
           NALU bytepos:   [0, 28]
           NALU offset:    0 Bytes
           NALU length:    29 Bytes (including start code)
           NALU type:      7 (Sequence parameter set)
           NALU bytes:     0x0000000167f4000d919b28283f6022000003000200000300641e28532c
           NALU RBSP:      0xf4000d919b28283f602200000002000000641e28532c
        
           SPS (payload size: 22.0 Bytes)
           +--------------------------------------+---------+
           | field                                | value   |
           +======================================+=========+
           | constraint_set0_flag                 | 0       |
           +--------------------------------------+---------+
           | constraint_set1_flag                 | 0       |
           +--------------------------------------+---------+
           ....
        
        Programmatic usage
        ==================
        
        You can also use this library in your code, e.g.:
        
        ::
        
           from h26x_extractor.h26x_parser import H26xParser
        
           H26xParser.set_callback("nalu", do_something)
           H26xParser.parse()
           def do_something(bytes):
             # do something with the NALU bytes
        
        Valid callbacks are:
        
        -  ``sps``
        -  ``pps``
        -  ``slice``
        -  ``aud``
        -  ``nalu``
        
        Raw data for all callbacks includes the RBSP.
        
        You can also call the ``nalutypes`` classes to decode the individual
        fields, e.g. ``nalutypes.SPS``.
        
        License
        =======
        
        The MIT License (MIT)
        
        Copyright (c) 2017 Werner Robitza
        
        Permission is hereby granted, free of charge, to any person obtaining a
        copy of this software and associated documentation files (the
        “Software”), to deal in the Software without restriction, including
        without limitation the rights to use, copy, modify, merge, publish,
        distribute, sublicense, and/or sell copies of the Software, and to
        permit persons to whom the Software is furnished to do so, subject to
        the following conditions:
        
        The above copyright notice and this permission notice shall be included
        in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS
        OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
        IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
        CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
        TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
        SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        
        
        Changelog
        ~~~~~~~~~
        
        All notable changes to this project will be documented in this file.
        Dates are displayed in UTC.
        
        Generated by
        ```auto-changelog`` <https://github.com/CookPete/auto-changelog>`__.
        
        Unreleased
        ^^^^^^^^^^
        
        -  many updates
           ```b839642`` <https://github.com/slhck/h26x-extractor/commit/b8396422d559aa83b680bb159ca21d82f76a093d>`__
        -  initial commit
           ```8e89e56`` <https://github.com/slhck/h26x-extractor/commit/8e89e563a0ea5ec7059b6f64c13a8d2b5339e801>`__
        -  add release script
           ```feddde6`` <https://github.com/slhck/h26x-extractor/commit/feddde646ac5758a9708670671debd49a7658366>`__
        
Keywords: video,h264
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Multimedia :: Video
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
