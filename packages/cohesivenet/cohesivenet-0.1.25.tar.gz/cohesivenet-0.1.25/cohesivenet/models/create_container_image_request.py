# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateContainerImageRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "name": "str",
        "url": "str",
        "buildurl": "str",
        "localbuild": "str",
        "localimage": "str",
        "description": "str",
    }

    attribute_map = {
        "name": "name",
        "url": "url",
        "buildurl": "buildurl",
        "localbuild": "localbuild",
        "localimage": "localimage",
        "description": "description",
    }

    def __init__(
        self,
        name=None,
        url=None,
        buildurl=None,
        localbuild=None,
        localimage=None,
        description=None,
    ):  # noqa: E501
        """CreateContainerImageRequest - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._url = None
        self._buildurl = None
        self._localbuild = None
        self._localimage = None
        self._description = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if buildurl is not None:
            self.buildurl = buildurl
        if localbuild is not None:
            self.localbuild = localbuild
        if localimage is not None:
            self.localimage = localimage
        if description is not None:
            self.description = description

    @property
    def name(self):
        """Gets the name of this CreateContainerImageRequest.  # noqa: E501

        Name of the image  # noqa: E501

        :return: The name of this CreateContainerImageRequest.  # noqa: E501
        :rtype: str
        """
        return self._expires

    @name.setter
    def name(self, name):
        """Sets the name of this CreateContainerImageRequest.

        Name of the image  # noqa: E501

        :param name: The name of this CreateContainerImageRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def url(self):
        """Gets the url of this CreateContainerImageRequest.  # noqa: E501

        URL of the image file to be imported # noqa: E501

        :return: The url of this CreateContainerImageRequest.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the URL of this CreateContainerImageRequest.

        URL of the image file to be imported  # noqa: E501

        :param url: The url of this CreateContainerImageRequest.  # noqa: E501
        :type: str
        """
        self._url = url

    @property
    def buildurl(self):
        """Gets the buildurl of this CreateContainerImageRequest.  # noqa: E501

        URL of a dockerfile that will be used to build the image # noqa: E501

        :return: The buildurl of this CreateContainerImageRequest.  # noqa: E501
        :rtype: str
        """
        return self._url

    @buildurl.setter
    def buildurl(self, buildurl):
        """Sets the buildurl of this CreateContainerImageRequest.

        URL of a dockerfile that will be used to build the image  # noqa: E501

        :param buildurl: The buildurl of this CreateContainerImageRequest.  # noqa: E501
        :type: str
        """
        self._buildurl = buildurl

    @property
    def localbuild(self):
        """Gets the localbuild of this CreateContainerImageRequest.  # noqa: E501

        Local build file to create new image # noqa: E501

        :return: The localbuild of this CreateContainerImageRequest.  # noqa: E501
        :rtype: str
        """
        return self._localbuild

    @localbuild.setter
    def localbuild(self, localbuild):
        """Sets the localbuild of this CreateContainerImageRequest.

        Local build file to create new image  # noqa: E501

        :param localbuild: The localbuild of this CreateContainerImageRequest.  # noqa: E501
        :type: str
        """
        self._localbuild = localbuild

    @property
    def localimage(self):
        """Gets the localimage of this CreateContainerImageRequest.  # noqa: E501

        Local image to tag # noqa: E501

        :return: The localimage of this CreateContainerImageRequest.  # noqa: E501
        :rtype: str
        """
        return self._localimage

    @localimage.setter
    def localimage(self, localimage):
        """Sets the localimage of this CreateContainerImageRequest.

        Local image to tag  # noqa: E501

        :param localimage: The localimage of this CreateContainerImageRequest.  # noqa: E501
        :type: str
        """
        self._localimage = localimage

    @property
    def description(self):
        """Gets the description of this CreateContainerImageRequest.  # noqa: E501

        # noqa: E501

        :return: The description of this CreateContainerImageRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateContainerImageRequest.

         # noqa: E501

        :param description: The description of this CreateContainerImageRequest.  # noqa: E501
        :type: str
        """
        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateContainerImageRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
