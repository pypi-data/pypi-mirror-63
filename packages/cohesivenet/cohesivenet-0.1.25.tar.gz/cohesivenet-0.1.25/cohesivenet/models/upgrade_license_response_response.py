# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UpgradeLicenseResponseResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "finalized": "bool",
        "uniq": "str",
        "license": "str",
        "new_clientpacks": "int",
        "new_managers": "int",
    }

    attribute_map = {
        "finalized": "finalized",
        "uniq": "uniq",
        "license": "license",
        "new_clientpacks": "new_clientpacks",
        "new_managers": "new_managers",
    }

    def __init__(
        self,
        finalized=None,
        uniq=None,
        license=None,
        new_clientpacks=None,
        new_managers=None,
    ):  # noqa: E501
        """UpgradeLicenseResponseResponse - a model defined in OpenAPI"""  # noqa: E501

        self._finalized = None
        self._uniq = None
        self._license = None
        self._new_clientpacks = None
        self._new_managers = None
        self.discriminator = None

        if finalized is not None:
            self.finalized = finalized
        if uniq is not None:
            self.uniq = uniq
        if license is not None:
            self.license = license
        if new_clientpacks is not None:
            self.new_clientpacks = new_clientpacks
        if new_managers is not None:
            self.new_managers = new_managers

    @property
    def finalized(self):
        """Gets the finalized of this UpgradeLicenseResponseResponse.  # noqa: E501


        :return: The finalized of this UpgradeLicenseResponseResponse.  # noqa: E501
        :rtype: bool
        """
        return self._finalized

    @finalized.setter
    def finalized(self, finalized):
        """Sets the finalized of this UpgradeLicenseResponseResponse.


        :param finalized: The finalized of this UpgradeLicenseResponseResponse.  # noqa: E501
        :type: bool
        """

        self._finalized = finalized

    @property
    def uniq(self):
        """Gets the uniq of this UpgradeLicenseResponseResponse.  # noqa: E501

        new sha1 hash of license  # noqa: E501

        :return: The uniq of this UpgradeLicenseResponseResponse.  # noqa: E501
        :rtype: str
        """
        return self._uniq

    @uniq.setter
    def uniq(self, uniq):
        """Sets the uniq of this UpgradeLicenseResponseResponse.

        new sha1 hash of license  # noqa: E501

        :param uniq: The uniq of this UpgradeLicenseResponseResponse.  # noqa: E501
        :type: str
        """

        self._uniq = uniq

    @property
    def license(self):
        """Gets the license of this UpgradeLicenseResponseResponse.  # noqa: E501

        State of license, accepted, in-progress, failed  # noqa: E501

        :return: The license of this UpgradeLicenseResponseResponse.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this UpgradeLicenseResponseResponse.

        State of license, accepted, in-progress, failed  # noqa: E501

        :param license: The license of this UpgradeLicenseResponseResponse.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def new_clientpacks(self):
        """Gets the new_clientpacks of this UpgradeLicenseResponseResponse.  # noqa: E501


        :return: The new_clientpacks of this UpgradeLicenseResponseResponse.  # noqa: E501
        :rtype: int
        """
        return self._new_clientpacks

    @new_clientpacks.setter
    def new_clientpacks(self, new_clientpacks):
        """Sets the new_clientpacks of this UpgradeLicenseResponseResponse.


        :param new_clientpacks: The new_clientpacks of this UpgradeLicenseResponseResponse.  # noqa: E501
        :type: int
        """

        self._new_clientpacks = new_clientpacks

    @property
    def new_managers(self):
        """Gets the new_managers of this UpgradeLicenseResponseResponse.  # noqa: E501


        :return: The new_managers of this UpgradeLicenseResponseResponse.  # noqa: E501
        :rtype: int
        """
        return self._new_managers

    @new_managers.setter
    def new_managers(self, new_managers):
        """Sets the new_managers of this UpgradeLicenseResponseResponse.


        :param new_managers: The new_managers of this UpgradeLicenseResponseResponse.  # noqa: E501
        :type: int
        """

        self._new_managers = new_managers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeLicenseResponseResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
