# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class License(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "capabilities": "list[str]",
        "finalized": "bool",
        "license": "str",
        "license_present": "bool",
        "sha1_checksum": "str",
        "uploaded_at": "str",
        "custom_addressing": "bool",
        "uploaded_at_i": "int",
        "container_details": "LicenseContainerDetails",
        "topology": "Topology",
    }

    attribute_map = {
        "capabilities": "capabilities",
        "finalized": "finalized",
        "license": "license",
        "license_present": "license_present",
        "sha1_checksum": "sha1_checksum",
        "uploaded_at": "uploaded_at",
        "custom_addressing": "custom_addressing",
        "uploaded_at_i": "uploaded_at_i",
        "container_details": "container_details",
        "topology": "topology",
    }

    def __init__(
        self,
        capabilities=None,
        finalized=None,
        license=None,
        license_present=None,
        sha1_checksum=None,
        uploaded_at=None,
        custom_addressing=None,
        uploaded_at_i=None,
        container_details=None,
        topology=None,
    ):  # noqa: E501
        """License - a model defined in OpenAPI"""  # noqa: E501

        self._capabilities = None
        self._finalized = None
        self._license = None
        self._license_present = None
        self._sha1_checksum = None
        self._uploaded_at = None
        self._custom_addressing = None
        self._uploaded_at_i = None
        self._container_details = None
        self._topology = None
        self.discriminator = None

        if capabilities is not None:
            self.capabilities = capabilities
        if finalized is not None:
            self.finalized = finalized
        if license is not None:
            self.license = license
        if license_present is not None:
            self.license_present = license_present
        if sha1_checksum is not None:
            self.sha1_checksum = sha1_checksum
        if uploaded_at is not None:
            self.uploaded_at = uploaded_at
        if custom_addressing is not None:
            self.custom_addressing = custom_addressing
        if uploaded_at_i is not None:
            self.uploaded_at_i = uploaded_at_i
        if container_details is not None:
            self.container_details = container_details
        if topology is not None:
            self.topology = topology

    @property
    def capabilities(self):
        """Gets the capabilities of this License.  # noqa: E501

        Features available such as eBGP, CloudWAN etc.  # noqa: E501

        :return: The capabilities of this License.  # noqa: E501
        :rtype: list[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this License.

        Features available such as eBGP, CloudWAN etc.  # noqa: E501

        :param capabilities: The capabilities of this License.  # noqa: E501
        :type: list[str]
        """

        self._capabilities = capabilities

    @property
    def finalized(self):
        """Gets the finalized of this License.  # noqa: E501


        :return: The finalized of this License.  # noqa: E501
        :rtype: bool
        """
        return self._finalized

    @finalized.setter
    def finalized(self, finalized):
        """Sets the finalized of this License.


        :param finalized: The finalized of this License.  # noqa: E501
        :type: bool
        """

        self._finalized = finalized

    @property
    def license(self):
        """Gets the license of this License.  # noqa: E501

        State of license, accepted, in-progress, failed  # noqa: E501

        :return: The license of this License.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this License.

        State of license, accepted, in-progress, failed  # noqa: E501

        :param license: The license of this License.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def license_present(self):
        """Gets the license_present of this License.  # noqa: E501


        :return: The license_present of this License.  # noqa: E501
        :rtype: bool
        """
        return self._license_present

    @license_present.setter
    def license_present(self, license_present):
        """Sets the license_present of this License.


        :param license_present: The license_present of this License.  # noqa: E501
        :type: bool
        """

        self._license_present = license_present

    @property
    def sha1_checksum(self):
        """Gets the sha1_checksum of this License.  # noqa: E501


        :return: The sha1_checksum of this License.  # noqa: E501
        :rtype: str
        """
        return self._sha1_checksum

    @sha1_checksum.setter
    def sha1_checksum(self, sha1_checksum):
        """Sets the sha1_checksum of this License.


        :param sha1_checksum: The sha1_checksum of this License.  # noqa: E501
        :type: str
        """

        self._sha1_checksum = sha1_checksum

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this License.  # noqa: E501


        :return: The uploaded_at of this License.  # noqa: E501
        :rtype: str
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this License.


        :param uploaded_at: The uploaded_at of this License.  # noqa: E501
        :type: str
        """

        self._uploaded_at = uploaded_at

    @property
    def custom_addressing(self):
        """Gets the custom_addressing of this License.  # noqa: E501


        :return: The custom_addressing of this License.  # noqa: E501
        :rtype: bool
        """
        return self._custom_addressing

    @custom_addressing.setter
    def custom_addressing(self, custom_addressing):
        """Sets the custom_addressing of this License.


        :param custom_addressing: The custom_addressing of this License.  # noqa: E501
        :type: bool
        """

        self._custom_addressing = custom_addressing

    @property
    def uploaded_at_i(self):
        """Gets the uploaded_at_i of this License.  # noqa: E501


        :return: The uploaded_at_i of this License.  # noqa: E501
        :rtype: int
        """
        return self._uploaded_at_i

    @uploaded_at_i.setter
    def uploaded_at_i(self, uploaded_at_i):
        """Sets the uploaded_at_i of this License.


        :param uploaded_at_i: The uploaded_at_i of this License.  # noqa: E501
        :type: int
        """

        self._uploaded_at_i = uploaded_at_i

    @property
    def container_details(self):
        """Gets the container_details of this License.  # noqa: E501


        :return: The container_details of this License.  # noqa: E501
        :rtype: LicenseContainerDetails
        """
        return self._container_details

    @container_details.setter
    def container_details(self, container_details):
        """Sets the container_details of this License.


        :param container_details: The container_details of this License.  # noqa: E501
        :type: LicenseContainerDetails
        """

        self._container_details = container_details

    @property
    def topology(self):
        """Gets the topology of this License.  # noqa: E501


        :return: The topology of this License.  # noqa: E501
        :rtype: Topology
        """
        return self._topology

    @topology.setter
    def topology(self, topology):
        """Sets the topology of this License.


        :param topology: The topology of this License.  # noqa: E501
        :type: Topology
        """

        self._topology = topology

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, License):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
