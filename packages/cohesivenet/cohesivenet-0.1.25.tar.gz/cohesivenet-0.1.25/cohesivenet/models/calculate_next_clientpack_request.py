# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CalculateNextClientpackRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"low_ip": "str", "high_ip": "str", "include_disabled": "bool"}

    attribute_map = {
        "low_ip": "low_ip",
        "high_ip": "high_ip",
        "include_disabled": "include_disabled",
    }

    def __init__(self, low_ip=None, high_ip=None, include_disabled=False):  # noqa: E501
        """CalculateNextClientpackRequest - a model defined in OpenAPI"""  # noqa: E501

        self._low_ip = None
        self._high_ip = None
        self._include_disabled = None
        self.discriminator = None

        if low_ip is not None:
            self.low_ip = low_ip
        if high_ip is not None:
            self.high_ip = high_ip
        if include_disabled is not None:
            self.include_disabled = include_disabled

    @property
    def low_ip(self):
        """Gets the low_ip of this CalculateNextClientpackRequest.  # noqa: E501

        Set the lower bound for the resulting IP  # noqa: E501

        :return: The low_ip of this CalculateNextClientpackRequest.  # noqa: E501
        :rtype: str
        """
        return self._low_ip

    @low_ip.setter
    def low_ip(self, low_ip):
        """Sets the low_ip of this CalculateNextClientpackRequest.

        Set the lower bound for the resulting IP  # noqa: E501

        :param low_ip: The low_ip of this CalculateNextClientpackRequest.  # noqa: E501
        :type: str
        """

        self._low_ip = low_ip

    @property
    def high_ip(self):
        """Gets the high_ip of this CalculateNextClientpackRequest.  # noqa: E501

        Set the upper bound for the resulting IP  # noqa: E501

        :return: The high_ip of this CalculateNextClientpackRequest.  # noqa: E501
        :rtype: str
        """
        return self._high_ip

    @high_ip.setter
    def high_ip(self, high_ip):
        """Sets the high_ip of this CalculateNextClientpackRequest.

        Set the upper bound for the resulting IP  # noqa: E501

        :param high_ip: The high_ip of this CalculateNextClientpackRequest.  # noqa: E501
        :type: str
        """

        self._high_ip = high_ip

    @property
    def include_disabled(self):
        """Gets the include_disabled of this CalculateNextClientpackRequest.  # noqa: E501

        Allows clientpack allocation from the disabled pool, for workflows where all clientpacks are disabled at the start.  # noqa: E501

        :return: The include_disabled of this CalculateNextClientpackRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_disabled

    @include_disabled.setter
    def include_disabled(self, include_disabled):
        """Sets the include_disabled of this CalculateNextClientpackRequest.

        Allows clientpack allocation from the disabled pool, for workflows where all clientpacks are disabled at the start.  # noqa: E501

        :param include_disabled: The include_disabled of this CalculateNextClientpackRequest.  # noqa: E501
        :type: bool
        """

        self._include_disabled = include_disabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalculateNextClientpackRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
