# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StartContainerRequest(object):
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    openapi_types = {
        "uuid": "str",
        "image_uuid": "str",
        "ipaddress": "str",
        "name": "str",
        "description": "str",
        "command": "str",
        "environment": "str",
    }

    attribute_map = {
        "uuid": "uuid",
        "image_uuid": "image_uuid",
        "ipaddress": "ipaddress",
        "name": "name",
        "description": "description",
        "command": "command",
        "environment": "environment",
    }

    def __init__(
        self,
        uuid=None,
        image_uuid=None,
        name=None,
        ipaddress=None,
        description=None,
        command=None,
        environment=None,
    ):  # noqa: E501
        """StartContainerRequest - a model defined in OpenAPI"""  # noqa: E501

        self._uuid = None
        self._image_uuid = None
        self._name = None
        self._ipaddress = None
        self._description = None
        self._command = None
        self._environment = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if image_uuid is not None:
            self.image_uuid = image_uuid
        if name is not None:
            self.name = name
        if ipaddress is not None:
            self.ipaddress = ipaddress
        if description is not None:
            self.description = description
        if command is not None:
            self.command = command
        if environment is not None:
            self.environment = environment

    @property
    def uuid(self):
        """Gets the uuid of this StartContainerRequest.  # noqa: E501


        :return: The uuid of this StartContainerRequest.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this StartContainerRequest.


        :param uuid: The uuid of this StartContainerRequest.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def image_uuid(self):
        """Gets the image_uuid of this StartContainerRequest.  # noqa: E501


        :return: The image_uuid of this StartContainerRequest.  # noqa: E501
        :rtype: str
        """
        return self._image_uuid

    @image_uuid.setter
    def image_uuid(self, image_uuid):
        """Sets the image_uuid of this StartContainerRequest.


        :param image_uuid: The image_uuid of this StartContainerRequest.  # noqa: E501
        :type: str
        """

        self._image_uuid = image_uuid

    @property
    def name(self):
        """Gets the name of this StartContainerRequest.  # noqa: E501


        :return: The name of this StartContainerRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StartContainerRequest.


        :param name: The name of this StartContainerRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ipaddress(self):
        """Gets the ipaddress of this StartContainerRequest.  # noqa: E501


        :return: The ipaddress of this StartContainerRequest.  # noqa: E501
        :rtype: str
        """
        return self._ipaddress

    @ipaddress.setter
    def ipaddress(self, ipaddress):
        """Sets the ipaddress of this StartContainerRequest.


        :param ipaddress: The ipaddress of this StartContainerRequest.  # noqa: E501
        :type: str
        """

        self._ipaddress = ipaddress

    @property
    def description(self):
        """Gets the description of this StartContainerRequest.  # noqa: E501


        :return: The description of this StartContainerRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StartContainerRequest.


        :param description: The description of this StartContainerRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def command(self):
        """Gets the command of this StartContainerRequest.  # noqa: E501


        :return: The command of this StartContainerRequest.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this StartContainerRequest.


        :param command: The command of this StartContainerRequest.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def environment(self):
        """Gets the environment of this StartContainerRequest.  # noqa: E501


        :return: The environment of this StartContainerRequest.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this StartContainerRequest.


        :param environment: The environment of this StartContainerRequest.  # noqa: E501
        :type: str
        """

        self._environment = environment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StartContainerRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
