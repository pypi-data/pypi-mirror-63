# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateAPITokenRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"expires": "int", "token_name": "str", "refreshes": "bool"}

    attribute_map = {
        "expires": "expires",
        "token_name": "token_name",
        "refreshes": "refreshes",
    }

    def __init__(self, expires=3600, token_name=None, refreshes=None):  # noqa: E501
        """CreateAPITokenRequest - a model defined in OpenAPI"""  # noqa: E501

        self._expires = None
        self._token_name = None
        self._refreshes = None
        self.discriminator = None

        if expires is not None:
            self.expires = expires
        if token_name is not None:
            self.token_name = token_name
        if refreshes is not None:
            self.refreshes = refreshes

    @property
    def expires(self):
        """Gets the expires of this CreateAPITokenRequest.  # noqa: E501

        Number of seconds before expiration  # noqa: E501

        :return: The expires of this CreateAPITokenRequest.  # noqa: E501
        :rtype: int
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this CreateAPITokenRequest.

        Number of seconds before expiration  # noqa: E501

        :param expires: The expires of this CreateAPITokenRequest.  # noqa: E501
        :type: int
        """
        if expires is not None and expires > 31536000:  # noqa: E501
            raise ValueError(
                "Invalid value for `expires`, must be a value less than or equal to `31536000`"
            )  # noqa: E501
        if expires is not None and expires < 60:  # noqa: E501
            raise ValueError(
                "Invalid value for `expires`, must be a value greater than or equal to `60`"
            )  # noqa: E501

        self._expires = expires

    @property
    def token_name(self):
        """Gets the token_name of this CreateAPITokenRequest.  # noqa: E501

        Optional description of token  # noqa: E501

        :return: The token_name of this CreateAPITokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._token_name

    @token_name.setter
    def token_name(self, token_name):
        """Sets the token_name of this CreateAPITokenRequest.

        Optional description of token  # noqa: E501

        :param token_name: The token_name of this CreateAPITokenRequest.  # noqa: E501
        :type: str
        """

        self._token_name = token_name

    @property
    def refreshes(self):
        """Gets the refreshes of this CreateAPITokenRequest.  # noqa: E501

        Token lifetime refreshes when used  # noqa: E501

        :return: The refreshes of this CreateAPITokenRequest.  # noqa: E501
        :rtype: bool
        """
        return self._refreshes

    @refreshes.setter
    def refreshes(self, refreshes):
        """Sets the refreshes of this CreateAPITokenRequest.

        Token lifetime refreshes when used  # noqa: E501

        :param refreshes: The refreshes of this CreateAPITokenRequest.  # noqa: E501
        :type: bool
        """

        self._refreshes = refreshes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAPITokenRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
