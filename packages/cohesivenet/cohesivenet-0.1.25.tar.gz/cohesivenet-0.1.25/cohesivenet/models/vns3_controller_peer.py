# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class VNS3ControllerPeer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "id": "int",
        "not_set": "bool",
        "_self": "bool",
        "mtu": "int",
        "reachable": "bool",
        "address": "str",
        "overlay_ipaddress": "str",
    }

    attribute_map = {
        "id": "id",
        "not_set": "not_set",
        "_self": "self",
        "mtu": "mtu",
        "reachable": "reachable",
        "address": "address",
        "overlay_ipaddress": "overlay_ipaddress",
    }

    def __init__(
        self,
        id=None,
        not_set=None,
        _self=None,
        mtu=None,
        reachable=None,
        address=None,
        overlay_ipaddress=None,
    ):  # noqa: E501
        """VNS3ControllerPeer - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._not_set = None
        self.__self = None
        self._mtu = None
        self._reachable = None
        self._address = None
        self._overlay_ipaddress = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if not_set is not None:
            self.not_set = not_set
        if _self is not None:
            self._self = _self
        if mtu is not None:
            self.mtu = mtu
        if reachable is not None:
            self.reachable = reachable
        if address is not None:
            self.address = address
        if overlay_ipaddress is not None:
            self.overlay_ipaddress = overlay_ipaddress

    @property
    def id(self):
        """Gets the id of this VNS3ControllerPeer.  # noqa: E501


        :return: The id of this VNS3ControllerPeer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VNS3ControllerPeer.


        :param id: The id of this VNS3ControllerPeer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def not_set(self):
        """Gets the not_set of this VNS3ControllerPeer.  # noqa: E501


        :return: The not_set of this VNS3ControllerPeer.  # noqa: E501
        :rtype: bool
        """
        return self._not_set

    @not_set.setter
    def not_set(self, not_set):
        """Sets the not_set of this VNS3ControllerPeer.


        :param not_set: The not_set of this VNS3ControllerPeer.  # noqa: E501
        :type: bool
        """

        self._not_set = not_set

    @property
    def _self(self):
        """Gets the _self of this VNS3ControllerPeer.  # noqa: E501


        :return: The _self of this VNS3ControllerPeer.  # noqa: E501
        :rtype: bool
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this VNS3ControllerPeer.


        :param _self: The _self of this VNS3ControllerPeer.  # noqa: E501
        :type: bool
        """

        self.__self = _self

    @property
    def mtu(self):
        """Gets the mtu of this VNS3ControllerPeer.  # noqa: E501


        :return: The mtu of this VNS3ControllerPeer.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this VNS3ControllerPeer.


        :param mtu: The mtu of this VNS3ControllerPeer.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    @property
    def reachable(self):
        """Gets the reachable of this VNS3ControllerPeer.  # noqa: E501


        :return: The reachable of this VNS3ControllerPeer.  # noqa: E501
        :rtype: bool
        """
        return self._reachable

    @reachable.setter
    def reachable(self, reachable):
        """Sets the reachable of this VNS3ControllerPeer.


        :param reachable: The reachable of this VNS3ControllerPeer.  # noqa: E501
        :type: bool
        """

        self._reachable = reachable

    @property
    def address(self):
        """Gets the address of this VNS3ControllerPeer.  # noqa: E501


        :return: The address of this VNS3ControllerPeer.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this VNS3ControllerPeer.


        :param address: The address of this VNS3ControllerPeer.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def overlay_ipaddress(self):
        """Gets the overlay_ipaddress of this VNS3ControllerPeer.  # noqa: E501


        :return: The overlay_ipaddress of this VNS3ControllerPeer.  # noqa: E501
        :rtype: str
        """
        return self._overlay_ipaddress

    @overlay_ipaddress.setter
    def overlay_ipaddress(self, overlay_ipaddress):
        """Sets the overlay_ipaddress of this VNS3ControllerPeer.


        :param overlay_ipaddress: The overlay_ipaddress of this VNS3ControllerPeer.  # noqa: E501
        :type: str
        """

        self._overlay_ipaddress = overlay_ipaddress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VNS3ControllerPeer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
