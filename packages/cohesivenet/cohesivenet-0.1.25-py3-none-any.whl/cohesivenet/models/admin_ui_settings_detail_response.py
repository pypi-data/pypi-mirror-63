# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AdminUISettingsDetailResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "enabled": "bool",
        "admin_username": "str",
        "admin_password": "str",
    }

    attribute_map = {
        "enabled": "enabled",
        "admin_username": "admin_username",
        "admin_password": "admin_password",
    }

    def __init__(
        self, enabled=None, admin_username=None, admin_password=None
    ):  # noqa: E501
        """AdminUISettingsDetailResponse - a model defined in OpenAPI"""  # noqa: E501

        self._enabled = None
        self._admin_username = None
        self._admin_password = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if admin_username is not None:
            self.admin_username = admin_username
        if admin_password is not None:
            self.admin_password = admin_password

    @property
    def enabled(self):
        """Gets the enabled of this AdminUISettingsDetailResponse.  # noqa: E501


        :return: The enabled of this AdminUISettingsDetailResponse.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AdminUISettingsDetailResponse.


        :param enabled: The enabled of this AdminUISettingsDetailResponse.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def admin_username(self):
        """Gets the admin_username of this AdminUISettingsDetailResponse.  # noqa: E501


        :return: The admin_username of this AdminUISettingsDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._admin_username

    @admin_username.setter
    def admin_username(self, admin_username):
        """Sets the admin_username of this AdminUISettingsDetailResponse.


        :param admin_username: The admin_username of this AdminUISettingsDetailResponse.  # noqa: E501
        :type: str
        """

        self._admin_username = admin_username

    @property
    def admin_password(self):
        """Gets the admin_password of this AdminUISettingsDetailResponse.  # noqa: E501


        :return: The admin_password of this AdminUISettingsDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._admin_password

    @admin_password.setter
    def admin_password(self, admin_password):
        """Sets the admin_password of this AdminUISettingsDetailResponse.


        :param admin_password: The admin_password of this AdminUISettingsDetailResponse.  # noqa: E501
        :type: str
        """

        self._admin_password = admin_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminUISettingsDetailResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
