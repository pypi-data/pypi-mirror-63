# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClientPack(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "name": "str",
        "overlay_ipaddress": "str",
        "linux_onefile": "str",
        "enabled": "bool",
        "conf_sha1": "str",
        "windows_onefile": "str",
        "ovpn_sha1": "str",
        "tarball_file": "str",
        "tarball_sha1": "str",
        "sequential_id": "int",
        "checked_out": "bool",
        "zip_sha1": "str",
        "zip_file": "str",
        "last_connect": "str",
        "last_disconnect": "str",
        "connected": "bool",
        "manager_id": "str",
        "ipaddress": "str",
        "tags": "dict(str, str)",
    }

    attribute_map = {
        "name": "name",
        "overlay_ipaddress": "overlay_ipaddress",
        "linux_onefile": "linux_onefile",
        "enabled": "enabled",
        "conf_sha1": "conf_sha1",
        "windows_onefile": "windows_onefile",
        "ovpn_sha1": "ovpn_sha1",
        "tarball_file": "tarball_file",
        "tarball_sha1": "tarball_sha1",
        "sequential_id": "sequential_id",
        "checked_out": "checked_out",
        "zip_sha1": "zip_sha1",
        "zip_file": "zip_file",
        "last_connect": "last_connect",
        "last_disconnect": "last_disconnect",
        "connected": "connected",
        "manager_id": "manager_id",
        "ipaddress": "ipaddress",
        "tags": "tags",
    }

    def __init__(
        self,
        name=None,
        overlay_ipaddress=None,
        linux_onefile=None,
        enabled=None,
        conf_sha1=None,
        windows_onefile=None,
        ovpn_sha1=None,
        tarball_file=None,
        tarball_sha1=None,
        sequential_id=None,
        checked_out=None,
        zip_sha1=None,
        zip_file=None,
        last_connect=None,
        last_disconnect=None,
        connected=None,
        manager_id=None,
        ipaddress=None,
        tags=None,
    ):  # noqa: E501
        """ClientPack - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._overlay_ipaddress = None
        self._linux_onefile = None
        self._enabled = None
        self._conf_sha1 = None
        self._windows_onefile = None
        self._ovpn_sha1 = None
        self._tarball_file = None
        self._tarball_sha1 = None
        self._sequential_id = None
        self._checked_out = None
        self._zip_sha1 = None
        self._zip_file = None
        self._last_connect = None
        self._last_disconnect = None
        self._connected = None
        self._manager_id = None
        self._ipaddress = None
        self._tags = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if overlay_ipaddress is not None:
            self.overlay_ipaddress = overlay_ipaddress
        if linux_onefile is not None:
            self.linux_onefile = linux_onefile
        if enabled is not None:
            self.enabled = enabled
        if conf_sha1 is not None:
            self.conf_sha1 = conf_sha1
        if windows_onefile is not None:
            self.windows_onefile = windows_onefile
        if ovpn_sha1 is not None:
            self.ovpn_sha1 = ovpn_sha1
        if tarball_file is not None:
            self.tarball_file = tarball_file
        if tarball_sha1 is not None:
            self.tarball_sha1 = tarball_sha1
        if sequential_id is not None:
            self.sequential_id = sequential_id
        if checked_out is not None:
            self.checked_out = checked_out
        if zip_sha1 is not None:
            self.zip_sha1 = zip_sha1
        if zip_file is not None:
            self.zip_file = zip_file
        if last_connect is not None:
            self.last_connect = last_connect
        if last_disconnect is not None:
            self.last_disconnect = last_disconnect
        if connected is not None:
            self.connected = connected
        if manager_id is not None:
            self.manager_id = manager_id
        if ipaddress is not None:
            self.ipaddress = ipaddress
        if tags is not None:
            self.tags = tags

    @property
    def name(self):
        """Gets the name of this ClientPack.  # noqa: E501


        :return: The name of this ClientPack.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClientPack.


        :param name: The name of this ClientPack.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def overlay_ipaddress(self):
        """Gets the overlay_ipaddress of this ClientPack.  # noqa: E501


        :return: The overlay_ipaddress of this ClientPack.  # noqa: E501
        :rtype: str
        """
        return self._overlay_ipaddress

    @overlay_ipaddress.setter
    def overlay_ipaddress(self, overlay_ipaddress):
        """Sets the overlay_ipaddress of this ClientPack.


        :param overlay_ipaddress: The overlay_ipaddress of this ClientPack.  # noqa: E501
        :type: str
        """

        self._overlay_ipaddress = overlay_ipaddress

    @property
    def linux_onefile(self):
        """Gets the linux_onefile of this ClientPack.  # noqa: E501


        :return: The linux_onefile of this ClientPack.  # noqa: E501
        :rtype: str
        """
        return self._linux_onefile

    @linux_onefile.setter
    def linux_onefile(self, linux_onefile):
        """Sets the linux_onefile of this ClientPack.


        :param linux_onefile: The linux_onefile of this ClientPack.  # noqa: E501
        :type: str
        """

        self._linux_onefile = linux_onefile

    @property
    def enabled(self):
        """Gets the enabled of this ClientPack.  # noqa: E501


        :return: The enabled of this ClientPack.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ClientPack.


        :param enabled: The enabled of this ClientPack.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def conf_sha1(self):
        """Gets the conf_sha1 of this ClientPack.  # noqa: E501


        :return: The conf_sha1 of this ClientPack.  # noqa: E501
        :rtype: str
        """
        return self._conf_sha1

    @conf_sha1.setter
    def conf_sha1(self, conf_sha1):
        """Sets the conf_sha1 of this ClientPack.


        :param conf_sha1: The conf_sha1 of this ClientPack.  # noqa: E501
        :type: str
        """

        self._conf_sha1 = conf_sha1

    @property
    def windows_onefile(self):
        """Gets the windows_onefile of this ClientPack.  # noqa: E501


        :return: The windows_onefile of this ClientPack.  # noqa: E501
        :rtype: str
        """
        return self._windows_onefile

    @windows_onefile.setter
    def windows_onefile(self, windows_onefile):
        """Sets the windows_onefile of this ClientPack.


        :param windows_onefile: The windows_onefile of this ClientPack.  # noqa: E501
        :type: str
        """

        self._windows_onefile = windows_onefile

    @property
    def ovpn_sha1(self):
        """Gets the ovpn_sha1 of this ClientPack.  # noqa: E501


        :return: The ovpn_sha1 of this ClientPack.  # noqa: E501
        :rtype: str
        """
        return self._ovpn_sha1

    @ovpn_sha1.setter
    def ovpn_sha1(self, ovpn_sha1):
        """Sets the ovpn_sha1 of this ClientPack.


        :param ovpn_sha1: The ovpn_sha1 of this ClientPack.  # noqa: E501
        :type: str
        """

        self._ovpn_sha1 = ovpn_sha1

    @property
    def tarball_file(self):
        """Gets the tarball_file of this ClientPack.  # noqa: E501


        :return: The tarball_file of this ClientPack.  # noqa: E501
        :rtype: str
        """
        return self._tarball_file

    @tarball_file.setter
    def tarball_file(self, tarball_file):
        """Sets the tarball_file of this ClientPack.


        :param tarball_file: The tarball_file of this ClientPack.  # noqa: E501
        :type: str
        """

        self._tarball_file = tarball_file

    @property
    def tarball_sha1(self):
        """Gets the tarball_sha1 of this ClientPack.  # noqa: E501


        :return: The tarball_sha1 of this ClientPack.  # noqa: E501
        :rtype: str
        """
        return self._tarball_sha1

    @tarball_sha1.setter
    def tarball_sha1(self, tarball_sha1):
        """Sets the tarball_sha1 of this ClientPack.


        :param tarball_sha1: The tarball_sha1 of this ClientPack.  # noqa: E501
        :type: str
        """

        self._tarball_sha1 = tarball_sha1

    @property
    def sequential_id(self):
        """Gets the sequential_id of this ClientPack.  # noqa: E501


        :return: The sequential_id of this ClientPack.  # noqa: E501
        :rtype: int
        """
        return self._sequential_id

    @sequential_id.setter
    def sequential_id(self, sequential_id):
        """Sets the sequential_id of this ClientPack.


        :param sequential_id: The sequential_id of this ClientPack.  # noqa: E501
        :type: int
        """

        self._sequential_id = sequential_id

    @property
    def checked_out(self):
        """Gets the checked_out of this ClientPack.  # noqa: E501


        :return: The checked_out of this ClientPack.  # noqa: E501
        :rtype: bool
        """
        return self._checked_out

    @checked_out.setter
    def checked_out(self, checked_out):
        """Sets the checked_out of this ClientPack.


        :param checked_out: The checked_out of this ClientPack.  # noqa: E501
        :type: bool
        """

        self._checked_out = checked_out

    @property
    def zip_sha1(self):
        """Gets the zip_sha1 of this ClientPack.  # noqa: E501


        :return: The zip_sha1 of this ClientPack.  # noqa: E501
        :rtype: str
        """
        return self._zip_sha1

    @zip_sha1.setter
    def zip_sha1(self, zip_sha1):
        """Sets the zip_sha1 of this ClientPack.


        :param zip_sha1: The zip_sha1 of this ClientPack.  # noqa: E501
        :type: str
        """

        self._zip_sha1 = zip_sha1

    @property
    def zip_file(self):
        """Gets the zip_file of this ClientPack.  # noqa: E501


        :return: The zip_file of this ClientPack.  # noqa: E501
        :rtype: str
        """
        return self._zip_file

    @zip_file.setter
    def zip_file(self, zip_file):
        """Sets the zip_file of this ClientPack.


        :param zip_file: The zip_file of this ClientPack.  # noqa: E501
        :type: str
        """

        self._zip_file = zip_file

    @property
    def last_connect(self):
        """Gets the last_connect of this ClientPack.  # noqa: E501


        :return: The last_connect of this ClientPack.  # noqa: E501
        :rtype: str
        """
        return self._last_connect

    @last_connect.setter
    def last_connect(self, last_connect):
        """Sets the last_connect of this ClientPack.


        :param last_connect: The last_connect of this ClientPack.  # noqa: E501
        :type: str
        """

        self._last_connect = last_connect

    @property
    def last_disconnect(self):
        """Gets the last_disconnect of this ClientPack.  # noqa: E501


        :return: The last_disconnect of this ClientPack.  # noqa: E501
        :rtype: str
        """
        return self._last_disconnect

    @last_disconnect.setter
    def last_disconnect(self, last_disconnect):
        """Sets the last_disconnect of this ClientPack.


        :param last_disconnect: The last_disconnect of this ClientPack.  # noqa: E501
        :type: str
        """

        self._last_disconnect = last_disconnect

    @property
    def connected(self):
        """Gets the connected of this ClientPack.  # noqa: E501


        :return: The connected of this ClientPack.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this ClientPack.


        :param connected: The connected of this ClientPack.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def manager_id(self):
        """Gets the manager_id of this ClientPack.  # noqa: E501


        :return: The manager_id of this ClientPack.  # noqa: E501
        :rtype: str
        """
        return self._manager_id

    @manager_id.setter
    def manager_id(self, manager_id):
        """Sets the manager_id of this ClientPack.


        :param manager_id: The manager_id of this ClientPack.  # noqa: E501
        :type: str
        """

        self._manager_id = manager_id

    @property
    def ipaddress(self):
        """Gets the ipaddress of this ClientPack.  # noqa: E501


        :return: The ipaddress of this ClientPack.  # noqa: E501
        :rtype: str
        """
        return self._ipaddress

    @ipaddress.setter
    def ipaddress(self, ipaddress):
        """Sets the ipaddress of this ClientPack.


        :param ipaddress: The ipaddress of this ClientPack.  # noqa: E501
        :type: str
        """

        self._ipaddress = ipaddress

    @property
    def tags(self):
        """Gets the tags of this ClientPack.  # noqa: E501

        Key, value object of tags  # noqa: E501

        :return: The tags of this ClientPack.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ClientPack.

        Key, value object of tags  # noqa: E501

        :param tags: The tags of this ClientPack.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientPack):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
