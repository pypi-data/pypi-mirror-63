# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class OverlayClient(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "manager_id": "int",
        "overlay_ipaddress": "str",
        "ipaddress": "str",
    }

    attribute_map = {
        "manager_id": "manager_id",
        "overlay_ipaddress": "overlay_ipaddress",
        "ipaddress": "ipaddress",
    }

    def __init__(
        self, manager_id=None, overlay_ipaddress=None, ipaddress=None
    ):  # noqa: E501
        """OverlayClient - a model defined in OpenAPI"""  # noqa: E501

        self._manager_id = None
        self._overlay_ipaddress = None
        self._ipaddress = None
        self.discriminator = None

        if manager_id is not None:
            self.manager_id = manager_id
        if overlay_ipaddress is not None:
            self.overlay_ipaddress = overlay_ipaddress
        if ipaddress is not None:
            self.ipaddress = ipaddress

    @property
    def manager_id(self):
        """Gets the manager_id of this OverlayClient.  # noqa: E501


        :return: The manager_id of this OverlayClient.  # noqa: E501
        :rtype: int
        """
        return self._manager_id

    @manager_id.setter
    def manager_id(self, manager_id):
        """Sets the manager_id of this OverlayClient.


        :param manager_id: The manager_id of this OverlayClient.  # noqa: E501
        :type: int
        """

        self._manager_id = manager_id

    @property
    def overlay_ipaddress(self):
        """Gets the overlay_ipaddress of this OverlayClient.  # noqa: E501


        :return: The overlay_ipaddress of this OverlayClient.  # noqa: E501
        :rtype: str
        """
        return self._overlay_ipaddress

    @overlay_ipaddress.setter
    def overlay_ipaddress(self, overlay_ipaddress):
        """Sets the overlay_ipaddress of this OverlayClient.


        :param overlay_ipaddress: The overlay_ipaddress of this OverlayClient.  # noqa: E501
        :type: str
        """

        self._overlay_ipaddress = overlay_ipaddress

    @property
    def ipaddress(self):
        """Gets the ipaddress of this OverlayClient.  # noqa: E501


        :return: The ipaddress of this OverlayClient.  # noqa: E501
        :rtype: str
        """
        return self._ipaddress

    @ipaddress.setter
    def ipaddress(self, ipaddress):
        """Sets the ipaddress of this OverlayClient.


        :param ipaddress: The ipaddress of this OverlayClient.  # noqa: E501
        :type: str
        """

        self._ipaddress = ipaddress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OverlayClient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
