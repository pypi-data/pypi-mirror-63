# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DisconnetClientRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"disconnect": "bool"}

    attribute_map = {"disconnect": "disconnect"}

    def __init__(self, disconnect=None):  # noqa: E501
        """DisconnetClientRequest - a model defined in OpenAPI"""  # noqa: E501

        self._disconnect = None
        self.discriminator = None

        self.disconnect = disconnect

    @property
    def disconnect(self):
        """Gets the disconnect of this DisconnetClientRequest.  # noqa: E501


        :return: The disconnect of this DisconnetClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._disconnect

    @disconnect.setter
    def disconnect(self, disconnect):
        """Sets the disconnect of this DisconnetClientRequest.


        :param disconnect: The disconnect of this DisconnetClientRequest.  # noqa: E501
        :type: bool
        """
        if disconnect is None:
            raise ValueError(
                "Invalid value for `disconnect`, must not be `None`"
            )  # noqa: E501

        self._disconnect = disconnect

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DisconnetClientRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
