# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UpdateLicenseParametersRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "subnet": "str",
        "managers": "str",
        "asns": "str",
        "clients": "str",
        "my_manager_vip": "str",
        "default": "bool",
    }

    attribute_map = {
        "subnet": "subnet",
        "managers": "managers",
        "asns": "asns",
        "clients": "clients",
        "my_manager_vip": "my_manager_vip",
        "default": "default",
    }

    def __init__(
        self,
        subnet=None,
        managers=None,
        asns=None,
        clients=None,
        my_manager_vip=None,
        default=None,
    ):  # noqa: E501
        """UpdateLicenseParametersRequest - a model defined in OpenAPI"""  # noqa: E501

        self._subnet = None
        self._managers = None
        self._asns = None
        self._clients = None
        self._my_manager_vip = None
        self._default = None
        self.discriminator = None

        if subnet is not None:
            self.subnet = subnet
        if managers is not None:
            self.managers = managers
        if asns is not None:
            self.asns = asns
        if clients is not None:
            self.clients = clients
        if my_manager_vip is not None:
            self.my_manager_vip = my_manager_vip
        if default is not None:
            self.default = default

    @property
    def subnet(self):
        """Gets the subnet of this UpdateLicenseParametersRequest.  # noqa: E501

        Specifies the CIDR of the virtual network created for use with the VNS3 Manager  # noqa: E501

        :return: The subnet of this UpdateLicenseParametersRequest.  # noqa: E501
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this UpdateLicenseParametersRequest.

        Specifies the CIDR of the virtual network created for use with the VNS3 Manager  # noqa: E501

        :param subnet: The subnet of this UpdateLicenseParametersRequest.  # noqa: E501
        :type: str
        """

        self._subnet = subnet

    @property
    def managers(self):
        """Gets the managers of this UpdateLicenseParametersRequest.  # noqa: E501

        Whitespace delimited address string in the subnet to use for the VNS3 Controllers' virtual interfaces.  # noqa: E501

        :return: The managers of this UpdateLicenseParametersRequest.  # noqa: E501
        :rtype: str
        """
        return self._managers

    @managers.setter
    def managers(self, managers):
        """Sets the managers of this UpdateLicenseParametersRequest.

        Whitespace delimited address string in the subnet to use for the VNS3 Controllers' virtual interfaces.  # noqa: E501

        :param managers: The managers of this UpdateLicenseParametersRequest.  # noqa: E501
        :type: str
        """

        self._managers = managers

    @property
    def asns(self):
        """Gets the asns of this UpdateLicenseParametersRequest.  # noqa: E501

        Whitespace delimited string of ASNs (autonomous system numbers) corresponding to the order of the controllers  # noqa: E501

        :return: The asns of this UpdateLicenseParametersRequest.  # noqa: E501
        :rtype: str
        """
        return self._asns

    @asns.setter
    def asns(self, asns):
        """Sets the asns of this UpdateLicenseParametersRequest.

        Whitespace delimited string of ASNs (autonomous system numbers) corresponding to the order of the controllers  # noqa: E501

        :param asns: The asns of this UpdateLicenseParametersRequest.  # noqa: E501
        :type: str
        """

        self._asns = asns

    @property
    def clients(self):
        """Gets the clients of this UpdateLicenseParametersRequest.  # noqa: E501

        Comma delimited, or hyphenated sequence of addresses for use as client addresses in the virtual network.  # noqa: E501

        :return: The clients of this UpdateLicenseParametersRequest.  # noqa: E501
        :rtype: str
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this UpdateLicenseParametersRequest.

        Comma delimited, or hyphenated sequence of addresses for use as client addresses in the virtual network.  # noqa: E501

        :param clients: The clients of this UpdateLicenseParametersRequest.  # noqa: E501
        :type: str
        """

        self._clients = clients

    @property
    def my_manager_vip(self):
        """Gets the my_manager_vip of this UpdateLicenseParametersRequest.  # noqa: E501

        IPAddress that must be allocated from the subnet, and be the same for all controllers  # noqa: E501

        :return: The my_manager_vip of this UpdateLicenseParametersRequest.  # noqa: E501
        :rtype: str
        """
        return self._my_manager_vip

    @my_manager_vip.setter
    def my_manager_vip(self, my_manager_vip):
        """Sets the my_manager_vip of this UpdateLicenseParametersRequest.

        IPAddress that must be allocated from the subnet, and be the same for all controllers  # noqa: E501

        :param my_manager_vip: The my_manager_vip of this UpdateLicenseParametersRequest.  # noqa: E501
        :type: str
        """

        self._my_manager_vip = my_manager_vip

    @property
    def default(self):
        """Gets the default of this UpdateLicenseParametersRequest.  # noqa: E501

        Specifices whether to use defualt topology addressing as specified by the license  # noqa: E501

        :return: The default of this UpdateLicenseParametersRequest.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this UpdateLicenseParametersRequest.

        Specifices whether to use defualt topology addressing as specified by the license  # noqa: E501

        :param default: The default of this UpdateLicenseParametersRequest.  # noqa: E501
        :type: bool
        """

        self._default = default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateLicenseParametersRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
