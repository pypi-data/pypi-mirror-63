# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ContainerImage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "id": "str",
        "image_name": "str",
        "status": "str",
        "status_msg": "str",
        "import_id": "str",
        "created": "datetime",
        "description": "str",
        "tag_name": "str",
        "comment": "str",
        "container_config": "dict(str, object)",
    }

    attribute_map = {
        "id": "id",
        "image_name": "image_name",
        "status": "status",
        "status_msg": "status_msg",
        "import_id": "import_id",
        "created": "created",
        "description": "description",
        "tag_name": "tag_name",
        "comment": "comment",
        "container_config": "container_config",
    }

    def __init__(
        self,
        id=None,
        image_name=None,
        status=None,
        status_msg=None,
        import_id=None,
        created=None,
        description=None,
        tag_name=None,
        comment=None,
        container_config=None,
    ):  # noqa: E501
        """ContainerImage - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._image_name = None
        self._status = None
        self._status_msg = None
        self._import_id = None
        self._created = None
        self._description = None
        self._tag_name = None
        self._comment = None
        self._container_config = None
        self.discriminator = None

        self.id = id
        if image_name is not None:
            self.image_name = image_name
        if status is not None:
            self.status = status
        if status_msg is not None:
            self.status_msg = status_msg
        if import_id is not None:
            self.import_id = import_id
        if created is not None:
            self.created = created
        if description is not None:
            self.description = description
        if tag_name is not None:
            self.tag_name = tag_name
        if comment is not None:
            self.comment = comment
        if container_config is not None:
            self.container_config = container_config

    @property
    def id(self):
        """Gets the id of this ContainerImage.  # noqa: E501


        :return: The id of this ContainerImage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContainerImage.


        :param id: The id of this ContainerImage.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image_name(self):
        """Gets the image_name of this ContainerImage.  # noqa: E501


        :return: The image_name of this ContainerImage.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this ContainerImage.


        :param image_name: The image_name of this ContainerImage.  # noqa: E501
        :type: str
        """

        self._image_name = image_name

    @property
    def status(self):
        """Gets the status of this ContainerImage.  # noqa: E501


        :return: The status of this ContainerImage.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContainerImage.


        :param status: The status of this ContainerImage.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_msg(self):
        """Gets the status_msg of this ContainerImage.  # noqa: E501


        :return: The status_msg of this ContainerImage.  # noqa: E501
        :rtype: str
        """
        return self._status_msg

    @status_msg.setter
    def status_msg(self, status_msg):
        """Sets the status_msg of this ContainerImage.


        :param status_msg: The status_msg of this ContainerImage.  # noqa: E501
        :type: str
        """

        self._status_msg = status_msg

    @property
    def import_id(self):
        """Gets the import_id of this ContainerImage.  # noqa: E501


        :return: The import_id of this ContainerImage.  # noqa: E501
        :rtype: str
        """
        return self._import_id

    @import_id.setter
    def import_id(self, import_id):
        """Sets the import_id of this ContainerImage.


        :param import_id: The import_id of this ContainerImage.  # noqa: E501
        :type: str
        """

        self._import_id = import_id

    @property
    def created(self):
        """Gets the created of this ContainerImage.  # noqa: E501


        :return: The created of this ContainerImage.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ContainerImage.


        :param created: The created of this ContainerImage.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this ContainerImage.  # noqa: E501


        :return: The description of this ContainerImage.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ContainerImage.


        :param description: The description of this ContainerImage.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tag_name(self):
        """Gets the tag_name of this ContainerImage.  # noqa: E501


        :return: The tag_name of this ContainerImage.  # noqa: E501
        :rtype: str
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name):
        """Sets the tag_name of this ContainerImage.


        :param tag_name: The tag_name of this ContainerImage.  # noqa: E501
        :type: str
        """

        self._tag_name = tag_name

    @property
    def comment(self):
        """Gets the comment of this ContainerImage.  # noqa: E501


        :return: The comment of this ContainerImage.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ContainerImage.


        :param comment: The comment of this ContainerImage.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def container_config(self):
        """Gets the container_config of this ContainerImage.  # noqa: E501


        :return: The container_config of this ContainerImage.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._container_config

    @container_config.setter
    def container_config(self, container_config):
        """Sets the container_config of this ContainerImage.


        :param container_config: The container_config of this ContainerImage.  # noqa: E501
        :type: dict(str, object)
        """

        self._container_config = container_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerImage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
