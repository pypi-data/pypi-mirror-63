# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Snapshot(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "sha1_checksum": "str",
        "created_at": "str",
        "created_at_i": "int",
        "size": "int",
    }

    attribute_map = {
        "sha1_checksum": "sha1_checksum",
        "created_at": "created_at",
        "created_at_i": "created_at_i",
        "size": "size",
    }

    def __init__(
        self, sha1_checksum=None, created_at=None, created_at_i=None, size=None
    ):  # noqa: E501
        """Snapshot - a model defined in OpenAPI"""  # noqa: E501

        self._sha1_checksum = None
        self._created_at = None
        self._created_at_i = None
        self._size = None
        self.discriminator = None

        if sha1_checksum is not None:
            self.sha1_checksum = sha1_checksum
        if created_at is not None:
            self.created_at = created_at
        if created_at_i is not None:
            self.created_at_i = created_at_i
        if size is not None:
            self.size = size

    @property
    def sha1_checksum(self):
        """Gets the sha1_checksum of this Snapshot.  # noqa: E501


        :return: The sha1_checksum of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._sha1_checksum

    @sha1_checksum.setter
    def sha1_checksum(self, sha1_checksum):
        """Sets the sha1_checksum of this Snapshot.


        :param sha1_checksum: The sha1_checksum of this Snapshot.  # noqa: E501
        :type: str
        """

        self._sha1_checksum = sha1_checksum

    @property
    def created_at(self):
        """Gets the created_at of this Snapshot.  # noqa: E501


        :return: The created_at of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Snapshot.


        :param created_at: The created_at of this Snapshot.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def created_at_i(self):
        """Gets the created_at_i of this Snapshot.  # noqa: E501


        :return: The created_at_i of this Snapshot.  # noqa: E501
        :rtype: int
        """
        return self._created_at_i

    @created_at_i.setter
    def created_at_i(self, created_at_i):
        """Sets the created_at_i of this Snapshot.


        :param created_at_i: The created_at_i of this Snapshot.  # noqa: E501
        :type: int
        """

        self._created_at_i = created_at_i

    @property
    def size(self):
        """Gets the size of this Snapshot.  # noqa: E501


        :return: The size of this Snapshot.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Snapshot.


        :param size: The size of this Snapshot.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Snapshot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
