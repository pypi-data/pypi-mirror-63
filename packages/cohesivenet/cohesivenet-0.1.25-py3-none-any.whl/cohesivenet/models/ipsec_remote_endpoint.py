# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IpsecRemoteEndpoint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "id": "int",
        "name": "str",
        "ipaddress": "str",
        "nat_t_enabled": "bool",
        "ike_version": "str",
        "pfs": "bool",
        "private_ipaddress": "str",
        "extra_config": "list[str]",
        "tunnels": "dict(str, IpsecTunnel)",
        "bgp_peers": "dict(str, BGPPeer)",
        "type": "str",
        "vpn_type": "str",
        "gre_interface_address": "str",
        "route_based_int_address": "str",
        "route_based_local": "str",
        "route_based_remote": "str",
        "psk": "str",
    }

    attribute_map = {
        "id": "id",
        "name": "name",
        "ipaddress": "ipaddress",
        "nat_t_enabled": "nat_t_enabled",
        "ike_version": "ike_version",
        "pfs": "pfs",
        "private_ipaddress": "private_ipaddress",
        "extra_config": "extra_config",
        "tunnels": "tunnels",
        "bgp_peers": "bgp_peers",
        "type": "type",
        "vpn_type": "vpn_type",
        "gre_interface_address": "gre_interface_address",
        "route_based_int_address": "route_based_int_address",
        "route_based_local": "route_based_local",
        "route_based_remote": "route_based_remote",
        "psk": "psk",
    }

    def __init__(
        self,
        id=None,
        name=None,
        ipaddress=None,
        nat_t_enabled=None,
        ike_version=None,
        pfs=None,
        private_ipaddress=None,
        extra_config=None,
        tunnels=None,
        bgp_peers=None,
        type=None,
        vpn_type=None,
        gre_interface_address=None,
        route_based_int_address=None,
        route_based_local=None,
        route_based_remote=None,
        psk=None,
    ):  # noqa: E501
        """IpsecRemoteEndpoint - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._ipaddress = None
        self._nat_t_enabled = None
        self._ike_version = None
        self._pfs = None
        self._private_ipaddress = None
        self._extra_config = None
        self._tunnels = None
        self._bgp_peers = None
        self._type = None
        self._vpn_type = None
        self._gre_interface_address = None
        self._route_based_int_address = None
        self._route_based_local = None
        self._route_based_remote = None
        self._psk = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if ipaddress is not None:
            self.ipaddress = ipaddress
        if nat_t_enabled is not None:
            self.nat_t_enabled = nat_t_enabled
        if ike_version is not None:
            self.ike_version = ike_version
        if pfs is not None:
            self.pfs = pfs
        if private_ipaddress is not None:
            self.private_ipaddress = private_ipaddress
        if extra_config is not None:
            self.extra_config = extra_config
        if tunnels is not None:
            self.tunnels = tunnels
        if bgp_peers is not None:
            self.bgp_peers = bgp_peers
        if type is not None:
            self.type = type
        if vpn_type is not None:
            self.vpn_type = vpn_type
        if gre_interface_address is not None:
            self.gre_interface_address = gre_interface_address
        if route_based_int_address is not None:
            self.route_based_int_address = route_based_int_address
        if route_based_local is not None:
            self.route_based_local = route_based_local
        if route_based_remote is not None:
            self.route_based_remote = route_based_remote
        if psk is not None:
            self.psk = psk

    @property
    def id(self):
        """Gets the id of this IpsecRemoteEndpoint.  # noqa: E501


        :return: The id of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IpsecRemoteEndpoint.


        :param id: The id of this IpsecRemoteEndpoint.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this IpsecRemoteEndpoint.  # noqa: E501


        :return: The name of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IpsecRemoteEndpoint.


        :param name: The name of this IpsecRemoteEndpoint.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ipaddress(self):
        """Gets the ipaddress of this IpsecRemoteEndpoint.  # noqa: E501


        :return: The ipaddress of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._ipaddress

    @ipaddress.setter
    def ipaddress(self, ipaddress):
        """Sets the ipaddress of this IpsecRemoteEndpoint.


        :param ipaddress: The ipaddress of this IpsecRemoteEndpoint.  # noqa: E501
        :type: str
        """

        self._ipaddress = ipaddress

    @property
    def nat_t_enabled(self):
        """Gets the nat_t_enabled of this IpsecRemoteEndpoint.  # noqa: E501


        :return: The nat_t_enabled of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: bool
        """
        return self._nat_t_enabled

    @nat_t_enabled.setter
    def nat_t_enabled(self, nat_t_enabled):
        """Sets the nat_t_enabled of this IpsecRemoteEndpoint.


        :param nat_t_enabled: The nat_t_enabled of this IpsecRemoteEndpoint.  # noqa: E501
        :type: bool
        """

        self._nat_t_enabled = nat_t_enabled

    @property
    def ike_version(self):
        """Gets the ike_version of this IpsecRemoteEndpoint.  # noqa: E501


        :return: The ike_version of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._ike_version

    @ike_version.setter
    def ike_version(self, ike_version):
        """Sets the ike_version of this IpsecRemoteEndpoint.


        :param ike_version: The ike_version of this IpsecRemoteEndpoint.  # noqa: E501
        :type: str
        """

        self._ike_version = ike_version

    @property
    def pfs(self):
        """Gets the pfs of this IpsecRemoteEndpoint.  # noqa: E501

        Perfect forward secrecy enabled  # noqa: E501

        :return: The pfs of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: bool
        """
        return self._pfs

    @pfs.setter
    def pfs(self, pfs):
        """Sets the pfs of this IpsecRemoteEndpoint.

        Perfect forward secrecy enabled  # noqa: E501

        :param pfs: The pfs of this IpsecRemoteEndpoint.  # noqa: E501
        :type: bool
        """

        self._pfs = pfs

    @property
    def private_ipaddress(self):
        """Gets the private_ipaddress of this IpsecRemoteEndpoint.  # noqa: E501


        :return: The private_ipaddress of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._private_ipaddress

    @private_ipaddress.setter
    def private_ipaddress(self, private_ipaddress):
        """Sets the private_ipaddress of this IpsecRemoteEndpoint.


        :param private_ipaddress: The private_ipaddress of this IpsecRemoteEndpoint.  # noqa: E501
        :type: str
        """

        self._private_ipaddress = private_ipaddress

    @property
    def extra_config(self):
        """Gets the extra_config of this IpsecRemoteEndpoint.  # noqa: E501


        :return: The extra_config of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: list[str]
        """
        return self._extra_config

    @extra_config.setter
    def extra_config(self, extra_config):
        """Sets the extra_config of this IpsecRemoteEndpoint.


        :param extra_config: The extra_config of this IpsecRemoteEndpoint.  # noqa: E501
        :type: list[str]
        """

        self._extra_config = extra_config

    @property
    def tunnels(self):
        """Gets the tunnels of this IpsecRemoteEndpoint.  # noqa: E501


        :return: The tunnels of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: dict(str, IpsecTunnel)
        """
        return self._tunnels

    @tunnels.setter
    def tunnels(self, tunnels):
        """Sets the tunnels of this IpsecRemoteEndpoint.


        :param tunnels: The tunnels of this IpsecRemoteEndpoint.  # noqa: E501
        :type: dict(str, IpsecTunnel)
        """

        self._tunnels = tunnels

    @property
    def bgp_peers(self):
        """Gets the bgp_peers of this IpsecRemoteEndpoint.  # noqa: E501


        :return: The bgp_peers of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: dict(str, BGPPeer)
        """
        return self._bgp_peers

    @bgp_peers.setter
    def bgp_peers(self, bgp_peers):
        """Sets the bgp_peers of this IpsecRemoteEndpoint.


        :param bgp_peers: The bgp_peers of this IpsecRemoteEndpoint.  # noqa: E501
        :type: dict(str, BGPPeer)
        """

        self._bgp_peers = bgp_peers

    @property
    def type(self):
        """Gets the type of this IpsecRemoteEndpoint.  # noqa: E501

        Indicating Ipsec or GRE over ipsec  # noqa: E501

        :return: The type of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IpsecRemoteEndpoint.

        Indicating Ipsec or GRE over ipsec  # noqa: E501

        :param type: The type of this IpsecRemoteEndpoint.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def vpn_type(self):
        """Gets the vpn_type of this IpsecRemoteEndpoint.  # noqa: E501


        :return: The vpn_type of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._vpn_type

    @vpn_type.setter
    def vpn_type(self, vpn_type):
        """Sets the vpn_type of this IpsecRemoteEndpoint.


        :param vpn_type: The vpn_type of this IpsecRemoteEndpoint.  # noqa: E501
        :type: str
        """

        self._vpn_type = vpn_type

    @property
    def gre_interface_address(self):
        """Gets the gre_interface_address of this IpsecRemoteEndpoint.  # noqa: E501


        :return: The gre_interface_address of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._gre_interface_address

    @gre_interface_address.setter
    def gre_interface_address(self, gre_interface_address):
        """Sets the gre_interface_address of this IpsecRemoteEndpoint.


        :param gre_interface_address: The gre_interface_address of this IpsecRemoteEndpoint.  # noqa: E501
        :type: str
        """

        self._gre_interface_address = gre_interface_address

    @property
    def route_based_int_address(self):
        """Gets the route_based_int_address of this IpsecRemoteEndpoint.  # noqa: E501


        :return: The route_based_int_address of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._route_based_int_address

    @route_based_int_address.setter
    def route_based_int_address(self, route_based_int_address):
        """Sets the route_based_int_address of this IpsecRemoteEndpoint.


        :param route_based_int_address: The route_based_int_address of this IpsecRemoteEndpoint.  # noqa: E501
        :type: str
        """

        self._route_based_int_address = route_based_int_address

    @property
    def route_based_local(self):
        """Gets the route_based_local of this IpsecRemoteEndpoint.  # noqa: E501


        :return: The route_based_local of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._route_based_local

    @route_based_local.setter
    def route_based_local(self, route_based_local):
        """Sets the route_based_local of this IpsecRemoteEndpoint.


        :param route_based_local: The route_based_local of this IpsecRemoteEndpoint.  # noqa: E501
        :type: str
        """

        self._route_based_local = route_based_local

    @property
    def route_based_remote(self):
        """Gets the route_based_remote of this IpsecRemoteEndpoint.  # noqa: E501


        :return: The route_based_remote of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._route_based_remote

    @route_based_remote.setter
    def route_based_remote(self, route_based_remote):
        """Sets the route_based_remote of this IpsecRemoteEndpoint.


        :param route_based_remote: The route_based_remote of this IpsecRemoteEndpoint.  # noqa: E501
        :type: str
        """

        self._route_based_remote = route_based_remote

    @property
    def psk(self):
        """Gets the psk of this IpsecRemoteEndpoint.  # noqa: E501


        :return: The psk of this IpsecRemoteEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._psk

    @psk.setter
    def psk(self, psk):
        """Sets the psk of this IpsecRemoteEndpoint.


        :param psk: The psk of this IpsecRemoteEndpoint.  # noqa: E501
        :type: str
        """

        self._psk = psk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpsecRemoteEndpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
