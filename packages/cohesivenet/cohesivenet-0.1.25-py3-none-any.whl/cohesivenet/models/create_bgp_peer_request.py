# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateBGPPeerRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "ipaddress": "str",
        "asn": "int",
        "access_list": "str",
        "bgp_password": "str",
    }

    attribute_map = {
        "ipaddress": "ipaddress",
        "asn": "asn",
        "access_list": "access_list",
        "bgp_password": "bgp_password",
    }

    def __init__(
        self, ipaddress=None, asn=None, access_list=None, bgp_password=None
    ):  # noqa: E501
        """CreateBGPPeerRequest - a model defined in OpenAPI"""  # noqa: E501

        self._ipaddress = None
        self._asn = None
        self._access_list = None
        self._bgp_password = None
        self.discriminator = None

        self.ipaddress = ipaddress
        if asn is not None:
            self.asn = asn
        if access_list is not None:
            self.access_list = access_list
        if bgp_password is not None:
            self.bgp_password = bgp_password

    @property
    def ipaddress(self):
        """Gets the ipaddress of this CreateBGPPeerRequest.  # noqa: E501

        IP address of the desired BGP peer.  # noqa: E501

        :return: The ipaddress of this CreateBGPPeerRequest.  # noqa: E501
        :rtype: str
        """
        return self._ipaddress

    @ipaddress.setter
    def ipaddress(self, ipaddress):
        """Sets the ipaddress of this CreateBGPPeerRequest.

        IP address of the desired BGP peer.  # noqa: E501

        :param ipaddress: The ipaddress of this CreateBGPPeerRequest.  # noqa: E501
        :type: str
        """
        if ipaddress is None:
            raise ValueError(
                "Invalid value for `ipaddress`, must not be `None`"
            )  # noqa: E501

        self._ipaddress = ipaddress

    @property
    def asn(self):
        """Gets the asn of this CreateBGPPeerRequest.  # noqa: E501

        Autonomous system number assigned to device at ipaddress  # noqa: E501

        :return: The asn of this CreateBGPPeerRequest.  # noqa: E501
        :rtype: int
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this CreateBGPPeerRequest.

        Autonomous system number assigned to device at ipaddress  # noqa: E501

        :param asn: The asn of this CreateBGPPeerRequest.  # noqa: E501
        :type: int
        """

        self._asn = asn

    @property
    def access_list(self):
        """Gets the access_list of this CreateBGPPeerRequest.  # noqa: E501

        List of \"in permit CIDR\" and/or \"out permit CIDR\" statements in a string delimited by \"\\n\"  # noqa: E501

        :return: The access_list of this CreateBGPPeerRequest.  # noqa: E501
        :rtype: str
        """
        return self._access_list

    @access_list.setter
    def access_list(self, access_list):
        """Sets the access_list of this CreateBGPPeerRequest.

        List of \"in permit CIDR\" and/or \"out permit CIDR\" statements in a string delimited by \"\\n\"  # noqa: E501

        :param access_list: The access_list of this CreateBGPPeerRequest.  # noqa: E501
        :type: str
        """

        self._access_list = access_list

    @property
    def bgp_password(self):
        """Gets the bgp_password of this CreateBGPPeerRequest.  # noqa: E501

        String to be agreed upon by both peers as a simple password.  # noqa: E501

        :return: The bgp_password of this CreateBGPPeerRequest.  # noqa: E501
        :rtype: str
        """
        return self._bgp_password

    @bgp_password.setter
    def bgp_password(self, bgp_password):
        """Sets the bgp_password of this CreateBGPPeerRequest.

        String to be agreed upon by both peers as a simple password.  # noqa: E501

        :param bgp_password: The bgp_password of this CreateBGPPeerRequest.  # noqa: E501
        :type: str
        """

        self._bgp_password = bgp_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBGPPeerRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
