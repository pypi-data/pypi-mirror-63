# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RuntimeStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "connected_clients": "dict(str, OverlayClient)",
        "connected_subnets": "list[list[str]]",
        "ipsec": "dict(str, IpsecTunnel)",
    }

    attribute_map = {
        "connected_clients": "connected_clients",
        "connected_subnets": "connected_subnets",
        "ipsec": "ipsec",
    }

    def __init__(
        self, connected_clients=None, connected_subnets=None, ipsec=None
    ):  # noqa: E501
        """RuntimeStatus - a model defined in OpenAPI"""  # noqa: E501

        self._connected_clients = None
        self._connected_subnets = None
        self._ipsec = None
        self.discriminator = None

        if connected_clients is not None:
            self.connected_clients = connected_clients
        if connected_subnets is not None:
            self.connected_subnets = connected_subnets
        if ipsec is not None:
            self.ipsec = ipsec

    @property
    def connected_clients(self):
        """Gets the connected_clients of this RuntimeStatus.  # noqa: E501

        clients keyed by ip address  # noqa: E501

        :return: The connected_clients of this RuntimeStatus.  # noqa: E501
        :rtype: dict(str, OverlayClient)
        """
        return self._connected_clients

    @connected_clients.setter
    def connected_clients(self, connected_clients):
        """Sets the connected_clients of this RuntimeStatus.

        clients keyed by ip address  # noqa: E501

        :param connected_clients: The connected_clients of this RuntimeStatus.  # noqa: E501
        :type: dict(str, OverlayClient)
        """

        self._connected_clients = connected_clients

    @property
    def connected_subnets(self):
        """Gets the connected_subnets of this RuntimeStatus.  # noqa: E501

        Array of arrays with each element of length 2 representing [network, subnet mask]  # noqa: E501

        :return: The connected_subnets of this RuntimeStatus.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._connected_subnets

    @connected_subnets.setter
    def connected_subnets(self, connected_subnets):
        """Sets the connected_subnets of this RuntimeStatus.

        Array of arrays with each element of length 2 representing [network, subnet mask]  # noqa: E501

        :param connected_subnets: The connected_subnets of this RuntimeStatus.  # noqa: E501
        :type: list[list[str]]
        """

        self._connected_subnets = connected_subnets

    @property
    def ipsec(self):
        """Gets the ipsec of this RuntimeStatus.  # noqa: E501

        IPSEC tunnels keyed by tunnel ID  # noqa: E501

        :return: The ipsec of this RuntimeStatus.  # noqa: E501
        :rtype: dict(str, IpsecTunnel)
        """
        return self._ipsec

    @ipsec.setter
    def ipsec(self, ipsec):
        """Sets the ipsec of this RuntimeStatus.

        IPSEC tunnels keyed by tunnel ID  # noqa: E501

        :param ipsec: The ipsec of this RuntimeStatus.  # noqa: E501
        :type: dict(str, IpsecTunnel)
        """

        self._ipsec = ipsec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuntimeStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
