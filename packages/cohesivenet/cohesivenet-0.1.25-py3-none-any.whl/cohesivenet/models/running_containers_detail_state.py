# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RunningContainersDetailState(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "running": "bool",
        "pid": "int",
        "exit_code": "int",
        "started_at": "str",
        "finished_at": "str",
        "ghost": "bool",
    }

    attribute_map = {
        "running": "Running",
        "pid": "Pid",
        "exit_code": "ExitCode",
        "started_at": "StartedAt",
        "finished_at": "FinishedAt",
        "ghost": "Ghost",
    }

    def __init__(
        self,
        running=None,
        pid=None,
        exit_code=None,
        started_at=None,
        finished_at=None,
        ghost=None,
    ):  # noqa: E501
        """RunningContainersDetailState - a model defined in OpenAPI"""  # noqa: E501

        self._running = None
        self._pid = None
        self._exit_code = None
        self._started_at = None
        self._finished_at = None
        self._ghost = None
        self.discriminator = None

        if running is not None:
            self.running = running
        if pid is not None:
            self.pid = pid
        if exit_code is not None:
            self.exit_code = exit_code
        if started_at is not None:
            self.started_at = started_at
        if finished_at is not None:
            self.finished_at = finished_at
        if ghost is not None:
            self.ghost = ghost

    @property
    def running(self):
        """Gets the running of this RunningContainersDetailState.  # noqa: E501


        :return: The running of this RunningContainersDetailState.  # noqa: E501
        :rtype: bool
        """
        return self._running

    @running.setter
    def running(self, running):
        """Sets the running of this RunningContainersDetailState.


        :param running: The running of this RunningContainersDetailState.  # noqa: E501
        :type: bool
        """

        self._running = running

    @property
    def pid(self):
        """Gets the pid of this RunningContainersDetailState.  # noqa: E501


        :return: The pid of this RunningContainersDetailState.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this RunningContainersDetailState.


        :param pid: The pid of this RunningContainersDetailState.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def exit_code(self):
        """Gets the exit_code of this RunningContainersDetailState.  # noqa: E501


        :return: The exit_code of this RunningContainersDetailState.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this RunningContainersDetailState.


        :param exit_code: The exit_code of this RunningContainersDetailState.  # noqa: E501
        :type: int
        """

        self._exit_code = exit_code

    @property
    def started_at(self):
        """Gets the started_at of this RunningContainersDetailState.  # noqa: E501


        :return: The started_at of this RunningContainersDetailState.  # noqa: E501
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this RunningContainersDetailState.


        :param started_at: The started_at of this RunningContainersDetailState.  # noqa: E501
        :type: str
        """

        self._started_at = started_at

    @property
    def finished_at(self):
        """Gets the finished_at of this RunningContainersDetailState.  # noqa: E501


        :return: The finished_at of this RunningContainersDetailState.  # noqa: E501
        :rtype: str
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this RunningContainersDetailState.


        :param finished_at: The finished_at of this RunningContainersDetailState.  # noqa: E501
        :type: str
        """

        self._finished_at = finished_at

    @property
    def ghost(self):
        """Gets the ghost of this RunningContainersDetailState.  # noqa: E501


        :return: The ghost of this RunningContainersDetailState.  # noqa: E501
        :rtype: bool
        """
        return self._ghost

    @ghost.setter
    def ghost(self, ghost):
        """Sets the ghost of this RunningContainersDetailState.


        :param ghost: The ghost of this RunningContainersDetailState.  # noqa: E501
        :type: bool
        """

        self._ghost = ghost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunningContainersDetailState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
