# coding: utf-8

"""
    VNS3 Controller API

    Cohesive networks VNS3 API providing complete control of your network's addresses, routes, rules and edge  # noqa: E501

    The version of the OpenAPI document: 4.8
    Contact: solutions@cohesive.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PeersDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "id": "int",
        "peered": "bool",
        "managers": "dict(str, VNS3ControllerPeer)",
        "controllers": "dict(str, object)",
    }

    attribute_map = {
        "id": "id",
        "peered": "peered",
        "managers": "managers",
        "controllers": "controllers",
    }

    def __init__(
        self, id=None, peered=None, managers=None, controllers=None
    ):  # noqa: E501
        """PeersDetail - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._peered = None
        self._managers = None
        self._controllers = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if peered is not None:
            self.peered = peered
        if managers is not None:
            self.managers = managers
        if controllers is not None:
            self.controllers = controllers

    @property
    def id(self):
        """Gets the id of this PeersDetail.  # noqa: E501


        :return: The id of this PeersDetail.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PeersDetail.


        :param id: The id of this PeersDetail.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def peered(self):
        """Gets the peered of this PeersDetail.  # noqa: E501


        :return: The peered of this PeersDetail.  # noqa: E501
        :rtype: bool
        """
        return self._peered

    @peered.setter
    def peered(self, peered):
        """Sets the peered of this PeersDetail.


        :param peered: The peered of this PeersDetail.  # noqa: E501
        :type: bool
        """

        self._peered = peered

    @property
    def managers(self):
        """Gets the managers of this PeersDetail.  # noqa: E501


        :return: The managers of this PeersDetail.  # noqa: E501
        :rtype: dict(str, VNS3ControllerPeer)
        """
        return self._managers

    @managers.setter
    def managers(self, managers):
        """Sets the managers of this PeersDetail.


        :param managers: The managers of this PeersDetail.  # noqa: E501
        :type: dict(str, VNS3ControllerPeer)
        """

        self._managers = managers

    @property
    def controllers(self):
        """Gets the controllers of this PeersDetail.  # noqa: E501


        :return: The controllers of this PeersDetail.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._controllers

    @controllers.setter
    def controllers(self, controllers):
        """Sets the controllers of this PeersDetail.


        :param controllers: The controllers of this PeersDetail.  # noqa: E501
        :type: dict(str, object)
        """

        self._controllers = controllers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeersDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
