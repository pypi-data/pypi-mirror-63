# -*- generated by 1.0.14 -*-
import da
PatternExpr_193 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.FreePattern('c'), da.pat.BoundPattern('_BoundPattern198_')])
PatternExpr_236 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c'), da.pat.BoundPattern('_BoundPattern240_')])
PatternExpr_266 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c'), da.pat.FreePattern('p')])
PatternExpr_280 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c'), da.pat.SelfPattern()])
PatternExpr_310 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.FreePattern('c2'), da.pat.BoundPattern('_BoundPattern315_')])
PatternExpr_386 = da.pat.TuplePattern([da.pat.ConstantPattern('Done')])
PatternExpr_391 = da.pat.BoundPattern('_BoundPattern393_')
PatternExpr_394 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern400_')]), da.pat.TuplePattern([da.pat.ConstantPattern('Done')])])
PatternExpr_476 = da.pat.TuplePattern([da.pat.ConstantPattern('Done')])
PatternExpr_481 = da.pat.BoundPattern('_BoundPattern482_')
PatternExpr_483 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern489_')]), da.pat.TuplePattern([da.pat.ConstantPattern('Done')])])
_config_object = {}
import sys

class P(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PReceivedEvent_0 = []
        self._PReceivedEvent_1 = []
        self._PSentEvent_3 = []
        self._PReceivedEvent_4 = []
        self._PReceivedEvent_5 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_193, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_1', PatternExpr_236, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_2', PatternExpr_266, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_265]), da.pat.EventPattern(da.pat.SentEvent, '_PSentEvent_3', PatternExpr_280, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_4', PatternExpr_310, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_5', PatternExpr_386, sources=[PatternExpr_391], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, s, n, **rest_500):
        super().setup(s=s, n=n, **rest_500)
        self._state.s = s
        self._state.n = n
        pass

    def run(self):

        def anounce():
            self.output('In cs!')
        for i in range(self._state.n):
            self.cs(anounce)
        self.send(('Done',), to=self.parent())
        super()._label('_st_label_383', block=False)
        _st_label_383 = 0
        while (_st_label_383 == 0):
            _st_label_383 += 1
            if PatternExpr_394.match_iter(self._PReceivedEvent_5, _BoundPattern400_=self.parent(), SELF_ID=self._id):
                _st_label_383 += 1
            else:
                super()._label('_st_label_383', block=True)
                _st_label_383 -= 1

    def cs(self, task):
        super()._label('request', block=False)
        ownc = self.logical_clock()
        self.send(('request', ownc, self._id), to=self._state.s)
        super()._label('cs', block=False)
        c = p = None

        def UniversalOpExpr_185():
            nonlocal c, p
            for p in self._state.s:

                def ExistentialOpExpr_191(p):
                    nonlocal c
                    for (_, _, (_ConstantPattern209_, c, _BoundPattern212_)) in self._PReceivedEvent_0:
                        if (_ConstantPattern209_ == 'ack'):
                            if (_BoundPattern212_ == p):
                                if (c > ownc):
                                    return True
                    return False
                if (not ExistentialOpExpr_191(p=p)):
                    return False
            return True
        _st_label_184 = 0
        while (_st_label_184 == 0):
            _st_label_184 += 1
            if UniversalOpExpr_185():
                _st_label_184 += 1
            else:
                super()._label('cs', block=True)
                _st_label_184 -= 1
        task()
        super()._label('release', block=False)
        self.output('Release!')

        def ExistentialOpExpr_234(p):
            for (_, _, (_ConstantPattern251_, c, _BoundPattern254_)) in self._PReceivedEvent_1:
                if (_ConstantPattern251_ == 'request'):
                    if (_BoundPattern254_ == p):
                        if ((c, p) >= (ownc, self._id)):
                            return True
            return False
        self.send(('ack', self.logical_clock(), self._id), to={p for p in self._state.s if ExistentialOpExpr_234(p=p)})

    def _P_handler_265(self, c, p):

        def UniversalOpExpr_303(c):
            for p in self._state.s:

                def ExistentialOpExpr_308(p, c):
                    for (_, _, (_ConstantPattern326_, c2, _BoundPattern329_)) in self._PReceivedEvent_4:
                        if (_ConstantPattern326_ == 'ack'):
                            if (_BoundPattern329_ == p):
                                if (c2 > c):
                                    return True
                    return False
                if (not ExistentialOpExpr_308(p=p, c=c)):
                    return False
            return True
        ownc = max(({c for (_, _, (_ConstantPattern296_, c, _ConstantPattern299_)) in self._PSentEvent_3 if (_ConstantPattern296_ == 'request') if (_ConstantPattern299_ == self._id) if (not UniversalOpExpr_303(c=c))} | {(- 1)}))
        if ((ownc == (- 1)) or ((c, p) < (ownc, self._id))):
            self.send(('ack', self.logical_clock(), self._id), to=p)
    _P_handler_265._labels = None
    _P_handler_265._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._Node_ReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_0', PatternExpr_476, sources=[PatternExpr_481], destinations=None, timestamps=None, record_history=True, handlers=[])])
    _config_object = {'clock': 'Lamport'}

    def run(self):
        nprocs = (int(sys.argv[1]) if (len(sys.argv) > 1) else 10)
        nrounds = (int(sys.argv[2]) if (len(sys.argv) > 2) else 1)
        ps = self.new(P, num=nprocs)
        for p in ps:
            self._setup({p}, ((ps - {p}), nrounds))
        self._start(ps)
        super()._label('_st_label_468', block=False)
        p = None

        def UniversalOpExpr_469():
            nonlocal p
            for p in ps:
                if (not PatternExpr_483.match_iter(self._Node_ReceivedEvent_0, _BoundPattern489_=p)):
                    return False
            return True
        _st_label_468 = 0
        while (_st_label_468 == 0):
            _st_label_468 += 1
            if UniversalOpExpr_469():
                _st_label_468 += 1
            else:
                super()._label('_st_label_468', block=True)
                _st_label_468 -= 1
        self.output('All processes done.')
        self.send(('Done',), to=ps)
